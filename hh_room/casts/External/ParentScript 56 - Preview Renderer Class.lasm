property pPossibleParts

on construct me
  [  0] pushcons 0 .............................. <"preview_rendered">
  [  2] pushsymb 292 ............................ <#bitmap>
  [  5] pusharglistnoret 2 ...................... <"preview_rendered", #bitmap>
  [  7] extcall 329 ............................. createMember("preview_rendered", #bitmap)
  [ 10] pushcons 1 .............................. <"a">
  [ 12] pushcons 2 .............................. <"b">
  [ 14] pushcons 3 .............................. <"c">
  [ 16] pushcons 4 .............................. <"d">
  [ 18] pushcons 5 .............................. <"e">
  [ 20] pushcons 6 .............................. <"f">
  [ 22] pushcons 7 .............................. <"g">
  [ 24] pushcons 8 .............................. <"h">
  [ 26] pushcons 9 .............................. <"i">
  [ 28] pushcons 10 ............................. <"j">
  [ 30] pushcons 11 ............................. <"k">
  [ 32] pushcons 12 ............................. <"l">
  [ 34] pusharglist 12 .......................... <["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]>
  [ 36] pushlist ................................ <["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]>
  [ 37] setprop 1705 ............................ pPossibleParts = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]
  [ 40] pushint8 1 .............................. <1>
  [ 42] pusharglistnoret 1 ...................... <1>
  [ 44] extcall 116 ............................. return 1
  [ 46] ret
end

on deconstruct me
  [  0] pushcons 0 .............................. <"preview_rendered">
  [  2] pusharglistnoret 1 ...................... <"preview_rendered">
  [  4] extcall 1100 ............................ removeMember("preview_rendered")
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 1 ...................... <1>
  [ 11] extcall 116 ............................. return 1
  [ 13] ret
end

on getPreviewMember me, tImage
  [  0] pushcons 0 .............................. <"preview_rendered">
  [  2] pusharglist 1 ........................... <"preview_rendered">
  [  4] extcall 330 ............................. <getmemnum("preview_rendered")>
  [  7] setlocal 0 .............................. tMemNum = getmemnum("preview_rendered")
  [  9] getlocal 0 .............................. <tMemNum>
  [ 11] pusharglist 1 ........................... <tMemNum>
  [ 13] extcall 263 ............................. <member(tMemNum)>
  [ 16] getparam 1 .............................. <tImage>
  [ 18] setobjprop 260 .......................... member(tMemNum).image = tImage
  [ 21] getlocal 0 .............................. <tMemNum>
  [ 23] pusharglistnoret 1 ...................... <tMemNum>
  [ 25] extcall 116 ............................. return tMemNum
  [ 27] ret
end

on solveClass me, tClass, tMemStr
  [  0] getparam 1 .............................. <tClass>
  [  2] setlocal 0 .............................. tName = tClass
  [  4] getlocal 0 .............................. <tName>
  [  6] pushcons 13 ............................. <"*">
  [  8] containsstr ............................. <tName contains "*">
  [  9] jmpifz [ 64] ............................ if tName contains "*" then / else
  [ 12] getlocal 0 .............................. <tName>
  [ 14] pushcons 14 ............................. <"_small">
  [ 16] joinstr ................................. <tName & "_small">
  [ 17] setlocal 1 .............................. tSmallMem = tName & "_small"
  [ 19] getlocal 0 .............................. <tName>
  [ 21] pushsymb 425 ............................ <#char>
  [ 24] pushint8 1 .............................. <1>
  [ 26] pushcons 13 ............................. <"*">
  [ 28] getlocal 0 .............................. <tName>
  [ 30] pusharglist 2 ........................... <"*", tName>
  [ 32] extcall 594 ............................. <offset("*", tName)>
  [ 35] pushint8 1 .............................. <1>
  [ 37] sub ..................................... <offset("*", tName) - 1>
  [ 38] pusharglist 4 ........................... <tName, #char, 1, offset("*", tName) - 1>
  [ 40] objcall 134 ............................. <tName.char[1..offset("*", tName) - 1]>
  [ 42] setlocal 0 .............................. tName = tName.char[1..offset("*", tName) - 1]
  [ 44] getlocal 1 .............................. <tSmallMem>
  [ 46] pusharglist 1 ........................... <tSmallMem>
  [ 48] extcall 122 ............................. <memberExists(tSmallMem)>
  [ 50] not ..................................... <not memberExists(tSmallMem)>
  [ 51] jmpifz [ 61] ............................ if not memberExists(tSmallMem) then
  [ 54] getlocal 0 .............................. <tName>
  [ 56] pushcons 14 ............................. <"_small">
  [ 58] joinstr ................................. <tName & "_small">
  [ 59] setlocal 1 .............................. tSmallMem = tName & "_small"
  [ 61] jmp [ 71]
  [ 64] getparam 1 .............................. <tClass>
  [ 66] pushcons 14 ............................. <"_small">
  [ 68] joinstr ................................. <tClass & "_small">
  [ 69] setlocal 1 .............................. tSmallMem = tClass & "_small"
  [ 71] getparam 2 .............................. <tMemStr>
  [ 73] pusharglist 0 ........................... <>
  [ 75] extcall 120 ............................. <VOID>
  [ 77] eq ...................................... <tMemStr = VOID>
  [ 78] jmpifz [ 85] ............................ if tMemStr = VOID then
  [ 81] pushcons 15 ............................. <EMPTY>
  [ 83] setparam 2 .............................. tMemStr = EMPTY
  [ 85] getlocal 1 .............................. <tSmallMem>
  [ 87] pusharglist 1 ........................... <tSmallMem>
  [ 89] extcall 122 ............................. <memberExists(tSmallMem)>
  [ 91] jmpifz [103] ............................ if memberExists(tSmallMem) then / else
  [ 94] getlocal 1 .............................. <tSmallMem>
  [ 96] pusharglistnoret 1 ...................... <tSmallMem>
  [ 98] extcall 116 ............................. return tSmallMem
  [100] jmp [127]
  [103] getparam 2 .............................. <tMemStr>
  [105] pusharglist 1 ........................... <tMemStr>
  [107] extcall 122 ............................. <memberExists(tMemStr)>
  [109] jmpifz [121] ............................ if memberExists(tMemStr) then / else
  [112] getparam 2 .............................. <tMemStr>
  [114] pusharglistnoret 1 ...................... <tMemStr>
  [116] extcall 116 ............................. return tMemStr
  [118] jmp [127]
  [121] pushcons 16 ............................. <"no_icon_small">
  [123] pusharglistnoret 1 ...................... <"no_icon_small">
  [125] extcall 116 ............................. return "no_icon_small"
  [127] ret
end

on solveColorList me, tpartColors
  [  0] getparam 1 .............................. <tpartColors>
  [  2] pushcons 15 ............................. <EMPTY>
  [  4] eq ...................................... <tpartColors = EMPTY>
  [  5] getparam 1 .............................. <tpartColors>
  [  7] pusharglist 1 ........................... <tpartColors>
  [  9] extcall 253 ............................. <voidp(tpartColors)>
  [ 11] or ...................................... <(tpartColors = EMPTY) or voidp(tpartColors)>
  [ 12] jmpifz [ 19] ............................ if (tpartColors = EMPTY) or voidp(tpartColors) then
  [ 15] pushcons 17 ............................. <"0,0,0">
  [ 17] setparam 1 .............................. tpartColors = "0,0,0"
  [ 19] pusharglist 0 ........................... <[]>
  [ 21] pushlist ................................ <[]>
  [ 22] setlocal 0 .............................. tPartList = []
  [ 24] getmovieprop 654 ........................ <the itemDelimiter>
  [ 27] setlocal 1 .............................. tDelim = the itemDelimiter
  [ 29] pushcons 18 ............................. <",">
  [ 31] setmovieprop 654 ........................ the itemDelimiter = ","
  [ 34] pushint8 1 .............................. <1>
  [ 36] setlocal 2
  [ 38] getlocal 2
  [ 40] getparam 1 .............................. <tpartColors>
  [ 42] pushsymb 655 ............................ <#item>
  [ 45] pusharglist 2 ........................... <tpartColors, #item>
  [ 47] objcall 149 ............................. <tpartColors.item.count>
  [ 49] lteq
  [ 50] jmpifz [ 84] ............................ repeat with i = 1 to tpartColors.item.count
  [ 53] getlocal 0 .............................. <tPartList>
  [ 55] getparam 1 .............................. <tpartColors>
  [ 57] pushsymb 655 ............................ <#item>
  [ 60] getlocal 2 .............................. <i>
  [ 62] pusharglist 3 ........................... <tpartColors, #item, i>
  [ 64] objcall 134 ............................. <tpartColors.item[i]>
  [ 66] pusharglist 1 ........................... <tpartColors.item[i]>
  [ 68] extcall 596 ............................. <string(tpartColors.item[i])>
  [ 71] pusharglistnoret 2 ...................... <tPartList, string(tpartColors.item[i])>
  [ 73] objcall 151 ............................. tPartList.add(string(tpartColors.item[i]))
  [ 75] pushint8 1
  [ 77] getlocal 2
  [ 79] add
  [ 80] setlocal 2
  [ 82] endrepeat [ 38]
  [ 84] getlocal 0 .............................. <tPartList>
  [ 86] getobjprop 149 .......................... <tPartList.count>
  [ 88] setlocal 3
  [ 90] getlocal 3
  [ 92] pushint8 4 .............................. <4>
  [ 94] lteq
  [ 95] jmpifz [115] ............................ repeat with j = tPartList.count to 4
  [ 98] getlocal 0 .............................. <tPartList>
  [100] pushcons 19 ............................. <"*ffffff">
  [102] pusharglistnoret 2 ...................... <tPartList, "*ffffff">
  [104] objcall 151 ............................. tPartList.add("*ffffff")
  [106] pushint8 1
  [108] getlocal 3
  [110] add
  [111] setlocal 3
  [113] endrepeat [ 90]
  [115] getlocal 1 .............................. <tDelim>
  [117] setmovieprop 654 ........................ the itemDelimiter = tDelim
  [120] getlocal 0 .............................. <tPartList>
  [122] pusharglistnoret 1 ...................... <tPartList>
  [124] extcall 116 ............................. return tPartList
  [126] ret
end

on renderPreviewImage me, tMemStr, tColorList, tColorListToSolve, tClass
  [  0] getparam 1 .............................. <tMemStr>
  [  2] pusharglist 0 ........................... <>
  [  4] extcall 120 ............................. <VOID>
  [  6] eq ...................................... <tMemStr = VOID>
  [  7] jmpifz [ 23] ............................ if tMemStr = VOID then
  [ 10] getparam 0 .............................. <me>
  [ 12] getparam 4 .............................. <tClass>
  [ 14] getparam 1 .............................. <tMemStr>
  [ 16] pusharglist 3 ........................... <me, tClass, tMemStr>
  [ 18] objcall 1698 ............................ <me.solveClass(tClass, tMemStr)>
  [ 21] setparam 1 .............................. tMemStr = me.solveClass(tClass, tMemStr)
  [ 23] getparam 1 .............................. <tMemStr>
  [ 25] pusharglist 1 ........................... <tMemStr>
  [ 27] extcall 330 ............................. <getmemnum(tMemStr)>
  [ 30] pushzero ................................ <0>
  [ 31] eq ...................................... <getmemnum(tMemStr) = 0>
  [ 32] jmpifz [ 48] ............................ if getmemnum(tMemStr) = 0 then
  [ 35] getparam 0 .............................. <me>
  [ 37] getparam 4 .............................. <tClass>
  [ 39] getparam 1 .............................. <tMemStr>
  [ 41] pusharglist 3 ........................... <me, tClass, tMemStr>
  [ 43] objcall 1698 ............................ <me.solveClass(tClass, tMemStr)>
  [ 46] setparam 1 .............................. tMemStr = me.solveClass(tClass, tMemStr)
  [ 48] getparam 3 .............................. <tColorListToSolve>
  [ 50] pusharglist 0 ........................... <>
  [ 52] extcall 120 ............................. <VOID>
  [ 54] nteq .................................... <tColorListToSolve <> VOID>
  [ 55] jmpifz [ 69] ............................ if tColorListToSolve <> VOID then
  [ 58] getparam 0 .............................. <me>
  [ 60] getparam 3 .............................. <tColorListToSolve>
  [ 62] pusharglist 2 ........................... <me, tColorListToSolve>
  [ 64] objcall 1699 ............................ <me.solveColorList(tColorListToSolve)>
  [ 67] setparam 2 .............................. tColorList = me.solveColorList(tColorListToSolve)
  [ 69] getparam 0 .............................. <me>
  [ 71] getparam 1 .............................. <tMemStr>
  [ 73] pusharglist 2 ........................... <me, tMemStr>
  [ 75] objcall 1701 ............................ <me.doLayersExist(tMemStr)>
  [ 78] not ..................................... <not me.doLayersExist(tMemStr)>
  [ 79] jmpifz [149] ............................ if not me.doLayersExist(tMemStr) then
  [ 82] getparam 0 .............................. <me>
  [ 84] getparam 1 .............................. <tMemStr>
  [ 86] getparam 2 .............................. <tColorList>
  [ 88] pusharglist 3 ........................... <me, tMemStr, tColorList>
  [ 90] objcall 1700 ............................ <me.getSmallsColor(tMemStr, tColorList)>
  [ 93] setlocal 0 .............................. tColor = me.getSmallsColor(tMemStr, tColorList)
  [ 95] getlocal 0 .............................. <tColor>
  [ 97] pushzero ................................ <0>
  [ 98] eq ...................................... <tColor = 0>
  [ 99] jmpifz [121] ............................ if tColor = 0 then
  [102] getparam 1 .............................. <tMemStr>
  [104] pusharglist 1 ........................... <tMemStr>
  [106] extcall 330 ............................. <getmemnum(tMemStr)>
  [109] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [111] extcall 263 ............................. <member(getmemnum(tMemStr))>
  [114] getobjprop 260 .......................... <member(getmemnum(tMemStr)).image>
  [117] pusharglistnoret 1 ...................... <member(getmemnum(tMemStr)).image>
  [119] extcall 116 ............................. return member(getmemnum(tMemStr)).image
  [121] getparam 0 .............................. <me>
  [123] getparam 1 .............................. <tMemStr>
  [125] pusharglist 1 ........................... <tMemStr>
  [127] extcall 330 ............................. <getmemnum(tMemStr)>
  [130] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [132] extcall 263 ............................. <member(getmemnum(tMemStr))>
  [135] getobjprop 260 .......................... <member(getmemnum(tMemStr)).image>
  [138] getlocal 0 .............................. <tColor>
  [140] pusharglist 3 ........................... <me, member(getmemnum(tMemStr)).image, tColor>
  [142] objcall 1704 ............................ <me.applyDarkenColor(member(getmemnum(tMemStr)).image, tColor)>
  [145] pusharglistnoret 1 ...................... <me.applyDarkenColor(member(getmemnum(tMemStr)).image, tColor)>
  [147] extcall 116 ............................. return me.applyDarkenColor(member(getmemnum(tMemStr)).image, tColor)
  [149] getparam 1 .............................. <tMemStr>
  [151] pusharglist 1 ........................... <tMemStr>
  [153] extcall 330 ............................. <getmemnum(tMemStr)>
  [156] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [158] extcall 263 ............................. <member(getmemnum(tMemStr))>
  [161] setlocal 1 .............................. tMem = member(getmemnum(tMemStr))
  [163] getlocal 1 .............................. <tMem>
  [165] getobjprop 219 .......................... <tMem.width>
  [167] getlocal 1 .............................. <tMem>
  [169] getobjprop 261 .......................... <tMem.height>
  [172] pushint8 32 ............................. <32>
  [174] pusharglist 3 ........................... <tMem.width, tMem.height, 32>
  [176] extcall 260 ............................. <image(tMem.width, tMem.height, 32)>
  [179] setlocal 2 .............................. tRendered = image(tMem.width, tMem.height, 32)
  [181] getlocal 2 .............................. <tRendered>
  [183] getlocal 1 .............................. <tMem>
  [185] getobjprop 260 .......................... <tMem.image>
  [188] getlocal 1 .............................. <tMem>
  [190] getobjprop 221 .......................... <tMem.rect>
  [192] getlocal 1 .............................. <tMem>
  [194] getobjprop 221 .......................... <tMem.rect>
  [196] pusharglistnoret 4 ...................... <tRendered, tMem.image, tMem.rect, tMem.rect>
  [198] objcall 293 ............................. tRendered.copyPixels(tMem.image, tMem.rect, tMem.rect)
  [201] pushint8 1 .............................. <1>
  [203] setlocal 3
  [205] getlocal 3
  [207] getprop 1705 ............................ <pPossibleParts>
  [210] getobjprop 149 .......................... <pPossibleParts.count>
  [212] lteq
  [213] jmpifz [264] ............................ repeat with i = 1 to pPossibleParts.count
  [216] getparam 1 .............................. <tMemStr>
  [218] pushcons 20 ............................. <"_">
  [220] joinstr ................................. <tMemStr & "_">
  [221] getprop 1705 ............................ <pPossibleParts>
  [224] getlocal 3 .............................. <i>
  [226] pusharglist 2 ........................... <pPossibleParts, i>
  [228] objcall 138 ............................. <pPossibleParts[i]>
  [230] joinstr ................................. <tMemStr & "_" & pPossibleParts[i]>
  [231] pusharglist 1 ........................... <tMemStr & "_" & pPossibleParts[i]>
  [233] extcall 122 ............................. <memberExists(tMemStr & "_" & pPossibleParts[i])>
  [235] jmpifz [255] ............................ if memberExists(tMemStr & "_" & pPossibleParts[i]) then
  [238] getparam 0 .............................. <me>
  [240] getlocal 2 .............................. <tRendered>
  [242] getlocal 3 .............................. <i>
  [244] getparam 1 .............................. <tMemStr>
  [246] getparam 2 .............................. <tColorList>
  [248] pusharglist 5 ........................... <me, tRendered, i, tMemStr, tColorList>
  [250] objcall 1703 ............................ <me.addLayerToImage(tRendered, i, tMemStr, tColorList)>
  [253] setlocal 2 .............................. tRendered = me.addLayerToImage(tRendered, i, tMemStr, tColorList)
  [255] pushint8 1
  [257] getlocal 3
  [259] add
  [260] setlocal 3
  [262] endrepeat [205]
  [264] getlocal 2 .............................. <tRendered>
  [266] pusharglistnoret 1 ...................... <tRendered>
  [268] extcall 116 ............................. return tRendered
  [270] ret
end

on getSmallsColor me, tMemStr, tColorList
  [  0] getparam 0 .............................. <me>
  [  2] getparam 2 .............................. <tColorList>
  [  4] pusharglist 2 ........................... <me, tColorList>
  [  6] objcall 1702 ............................ <me.getLastColor(tColorList)>
  [  9] setlocal 0 .............................. tColor = me.getLastColor(tColorList)
  [ 11] getlocal 0 .............................. <tColor>
  [ 13] pushcons 21 ............................. <"ffffff">
  [ 15] eq ...................................... <tColor = "ffffff">
  [ 16] getparam 1 .............................. <tMemStr>
  [ 18] pushcons 13 ............................. <"*">
  [ 20] containsstr ............................. <tMemStr contains "*">
  [ 21] or ...................................... <(tColor = "ffffff") or (tMemStr contains "*")>
  [ 22] jmpifz [ 30] ............................ if (tColor = "ffffff") or (tMemStr contains "*") then
  [ 25] pushzero ................................ <0>
  [ 26] pusharglistnoret 1 ...................... <0>
  [ 28] extcall 116 ............................. return 0
  [ 30] getlocal 0 .............................. <tColor>
  [ 32] pusharglistnoret 1 ...................... <tColor>
  [ 34] extcall 116 ............................. return tColor
  [ 36] ret
end

on doLayersExist me, tMemStr
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getprop 1705 ............................ <pPossibleParts>
  [  9] getobjprop 149 .......................... <pPossibleParts.count>
  [ 11] lteq
  [ 12] jmpifz [ 52] ............................ repeat with i = 1 to pPossibleParts.count
  [ 15] getparam 1 .............................. <tMemStr>
  [ 17] pushcons 20 ............................. <"_">
  [ 19] joinstr ................................. <tMemStr & "_">
  [ 20] getprop 1705 ............................ <pPossibleParts>
  [ 23] getlocal 0 .............................. <i>
  [ 25] pusharglist 2 ........................... <pPossibleParts, i>
  [ 27] objcall 138 ............................. <pPossibleParts[i]>
  [ 29] joinstr ................................. <tMemStr & "_" & pPossibleParts[i]>
  [ 30] pusharglist 1 ........................... <tMemStr & "_" & pPossibleParts[i]>
  [ 32] extcall 122 ............................. <memberExists(tMemStr & "_" & pPossibleParts[i])>
  [ 34] jmpifz [ 43] ............................ if memberExists(tMemStr & "_" & pPossibleParts[i]) then
  [ 37] pushint8 1 .............................. <1>
  [ 39] pusharglistnoret 1 ...................... <1>
  [ 41] extcall 116 ............................. return 1
  [ 43] pushint8 1
  [ 45] getlocal 0
  [ 47] add
  [ 48] setlocal 0
  [ 50] endrepeat [  4]
  [ 52] pushzero ................................ <0>
  [ 53] pusharglistnoret 1 ...................... <0>
  [ 55] extcall 116 ............................. return 0
  [ 57] ret
end

on getLastColor me, tColorList
  [  0] pushcons 21 ............................. <"ffffff">
  [  2] setlocal 0 .............................. tColor = "ffffff"
  [  4] getparam 1 .............................. <tColorList>
  [  6] getobjprop 215 .......................... <tColorList.ilk>
  [  8] pushsymb 216 ............................ <#list>
  [ 10] eq ...................................... <tColorList.ilk = #list>
  [ 11] jmpifz [ 93] ............................ if tColorList.ilk = #list then
  [ 14] pushint8 1 .............................. <1>
  [ 16] setlocal 1
  [ 18] getlocal 1
  [ 20] getparam 1 .............................. <tColorList>
  [ 22] getobjprop 149 .......................... <tColorList.count>
  [ 24] lteq
  [ 25] jmpifz [ 93] ............................ repeat with i = 1 to tColorList.count
  [ 28] getparam 1 .............................. <tColorList>
  [ 30] getlocal 1 .............................. <i>
  [ 32] pusharglist 2 ........................... <tColorList, i>
  [ 34] objcall 138 ............................. <tColorList[i]>
  [ 36] pushcons 21 ............................. <"ffffff">
  [ 38] containsstr ............................. <tColorList[i] contains "ffffff">
  [ 39] getparam 1 .............................. <tColorList>
  [ 41] getlocal 1 .............................. <i>
  [ 43] pusharglist 2 ........................... <tColorList, i>
  [ 45] objcall 138 ............................. <tColorList[i]>
  [ 47] pushcons 22 ............................. <"0">
  [ 49] eq ...................................... <tColorList[i] = "0">
  [ 50] or ...................................... <(tColorList[i] contains "ffffff") or (tColorList[i] = "0")>
  [ 51] getparam 1 .............................. <tColorList>
  [ 53] getlocal 1 .............................. <i>
  [ 55] pusharglist 2 ........................... <tColorList, i>
  [ 57] objcall 138 ............................. <tColorList[i]>
  [ 59] pushcons 23 ............................. <"null">
  [ 61] eq ...................................... <tColorList[i] = "null">
  [ 62] or ...................................... <(tColorList[i] contains "ffffff") or (tColorList[i] = "0") or (tColorList[i] = "null")>
  [ 63] jmpifz [ 74] ............................ if (tColorList[i] contains "ffffff") or (tColorList[i] = "0") or (tColorList[i] = "null") then
  [ 66] pusharglistnoret 0 ...................... <>
  [ 68] extcall 274 ............................. nothing()
  [ 71] jmp [ 84] ............................... next repeat
  [ 74] getparam 1 .............................. <tColorList>
  [ 76] getlocal 1 .............................. <i>
  [ 78] pusharglist 2 ........................... <tColorList, i>
  [ 80] objcall 138 ............................. <tColorList[i]>
  [ 82] setlocal 0 .............................. tColor = tColorList[i]
  [ 84] pushint8 1
  [ 86] getlocal 1
  [ 88] add
  [ 89] setlocal 1
  [ 91] endrepeat [ 18]
  [ 93] getlocal 0 .............................. <tColor>
  [ 95] pusharglistnoret 1 ...................... <tColor>
  [ 97] extcall 116 ............................. return tColor
  [ 99] ret
end

on addLayerToImage me, tImg, tNum, tMemStr, tColorList
  [  0] getprop 1705 ............................ <pPossibleParts>
  [  3] getparam 2 .............................. <tNum>
  [  5] pusharglist 2 ........................... <pPossibleParts, tNum>
  [  7] objcall 138 ............................. <pPossibleParts[tNum]>
  [  9] setlocal 0 .............................. tAbc = pPossibleParts[tNum]
  [ 11] getparam 4 .............................. <tColorList>
  [ 13] pusharglist 0 ........................... <>
  [ 15] extcall 120 ............................. <VOID>
  [ 17] eq ...................................... <tColorList = VOID>
  [ 18] jmpifz [ 26] ............................ if tColorList = VOID then
  [ 21] pusharglist 0 ........................... <[]>
  [ 23] pushlist ................................ <[]>
  [ 24] setparam 4 .............................. tColorList = []
  [ 26] getparam 4 .............................. <tColorList>
  [ 28] getobjprop 149 .......................... <tColorList.count>
  [ 30] getparam 2 .............................. <tNum>
  [ 32] lt ...................................... <tColorList.count < tNum>
  [ 33] jmpifz [ 43] ............................ if tColorList.count < tNum then / else
  [ 36] pushcons 21 ............................. <"ffffff">
  [ 38] setlocal 1 .............................. tColor = "ffffff"
  [ 40] jmp [ 53]
  [ 43] getparam 4 .............................. <tColorList>
  [ 45] getparam 2 .............................. <tNum>
  [ 47] pusharglist 2 ........................... <tColorList, tNum>
  [ 49] objcall 138 ............................. <tColorList[tNum]>
  [ 51] setlocal 1 .............................. tColor = tColorList[tNum]
  [ 53] getparam 3 .............................. <tMemStr>
  [ 55] pushcons 20 ............................. <"_">
  [ 57] joinstr ................................. <tMemStr & "_">
  [ 58] getlocal 0 .............................. <tAbc>
  [ 60] joinstr ................................. <tMemStr & "_" & tAbc>
  [ 61] pusharglist 1 ........................... <tMemStr & "_" & tAbc>
  [ 63] extcall 330 ............................. <getmemnum(tMemStr & "_" & tAbc)>
  [ 66] pusharglist 1 ........................... <getmemnum(tMemStr & "_" & tAbc)>
  [ 68] extcall 263 ............................. <member(getmemnum(tMemStr & "_" & tAbc))>
  [ 71] getobjprop 260 .......................... <member(getmemnum(tMemStr & "_" & tAbc)).image>
  [ 74] setlocal 2 .............................. tImg2 = member(getmemnum(tMemStr & "_" & tAbc)).image
  [ 76] getparam 3 .............................. <tMemStr>
  [ 78] pushcons 20 ............................. <"_">
  [ 80] joinstr ................................. <tMemStr & "_">
  [ 81] getlocal 0 .............................. <tAbc>
  [ 83] joinstr ................................. <tMemStr & "_" & tAbc>
  [ 84] pusharglist 1 ........................... <tMemStr & "_" & tAbc>
  [ 86] extcall 330 ............................. <getmemnum(tMemStr & "_" & tAbc)>
  [ 89] pusharglist 1 ........................... <getmemnum(tMemStr & "_" & tAbc)>
  [ 91] extcall 263 ............................. <member(getmemnum(tMemStr & "_" & tAbc))>
  [ 94] getobjprop 265 .......................... <member(getmemnum(tMemStr & "_" & tAbc)).regPoint>
  [ 97] getparam 3 .............................. <tMemStr>
  [ 99] pusharglist 1 ........................... <tMemStr>
  [101] extcall 330 ............................. <getmemnum(tMemStr)>
  [104] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [106] extcall 263 ............................. <member(getmemnum(tMemStr))>
  [109] getobjprop 265 .......................... <member(getmemnum(tMemStr)).regPoint>
  [112] sub ..................................... <member(getmemnum(tMemStr & "_" & tAbc)).regPoint - member(getmemnum(tMemStr)).regPoint>
  [113] setlocal 3 .............................. tRegp = member(getmemnum(tMemStr & "_" & tAbc)).regPoint - member(getmemnum(tMemStr)).regPoint
  [115] getlocal 2 .............................. <tImg2>
  [117] getobjprop 221 .......................... <tImg2.rect>
  [119] getlocal 3 .............................. <tRegp>
  [121] pushint8 1 .............................. <1>
  [123] pusharglist 2 ........................... <tRegp, 1>
  [125] objcall 138 ............................. <tRegp[1]>
  [127] getlocal 3 .............................. <tRegp>
  [129] pushint8 2 .............................. <2>
  [131] pusharglist 2 ........................... <tRegp, 2>
  [133] objcall 138 ............................. <tRegp[2]>
  [135] getlocal 3 .............................. <tRegp>
  [137] pushint8 1 .............................. <1>
  [139] pusharglist 2 ........................... <tRegp, 1>
  [141] objcall 138 ............................. <tRegp[1]>
  [143] getlocal 3 .............................. <tRegp>
  [145] pushint8 2 .............................. <2>
  [147] pusharglist 2 ........................... <tRegp, 2>
  [149] objcall 138 ............................. <tRegp[2]>
  [151] pusharglist 4 ........................... <tRegp[1], tRegp[2], tRegp[1], tRegp[2]>
  [153] extcall 221 ............................. <rect(tRegp[1], tRegp[2], tRegp[1], tRegp[2])>
  [155] sub ..................................... <tImg2.rect - rect(tRegp[1], tRegp[2], tRegp[1], tRegp[2])>
  [156] setlocal 4 .............................. tRect = tImg2.rect - rect(tRegp[1], tRegp[2], tRegp[1], tRegp[2])
  [158] getlocal 2 .............................. <tImg2>
  [160] pusharglist 1 ........................... <tImg2>
  [162] objcall 1157 ............................ <tImg2.createMatte()>
  [165] setlocal 5 .............................. tMatte = tImg2.createMatte()
  [167] getlocal 1 .............................. <tColor>
  [169] pusharglist 1 ........................... <tColor>
  [171] extcall 283 ............................. <rgb(tColor)>
  [174] setlocal 6 .............................. tColorObj = rgb(tColor)
  [176] getparam 1 .............................. <tImg>
  [178] getlocal 2 .............................. <tImg2>
  [180] getlocal 4 .............................. <tRect>
  [182] getlocal 2 .............................. <tImg2>
  [184] getobjprop 221 .......................... <tImg2.rect>
  [186] pushsymb 393 ............................ <#ink>
  [189] pushint8 41 ............................. <41>
  [191] pushsymb 282 ............................ <#bgColor>
  [194] getlocal 6 .............................. <tColorObj>
  [196] pushsymb 1156 ........................... <#maskImage>
  [199] getlocal 5 .............................. <tMatte>
  [201] pusharglist 6 ........................... <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [203] pushproplist ............................ <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [204] pusharglistnoret 5 ...................... <tImg, tImg2, tRect, tImg2.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [206] objcall 293 ............................. tImg.copyPixels(tImg2, tRect, tImg2.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte])
  [209] getparam 1 .............................. <tImg>
  [211] pusharglistnoret 1 ...................... <tImg>
  [213] extcall 116 ............................. return tImg
  [215] ret
end

on applyDarkenColor me, tOrgImg, tColor
  [  0] getparam 2 .............................. <tColor>
  [  2] pusharglist 1 ........................... <tColor>
  [  4] extcall 283 ............................. <rgb(tColor)>
  [  7] setlocal 0 .............................. tColorObj = rgb(tColor)
  [  9] getparam 1 .............................. <tOrgImg>
  [ 11] getobjprop 219 .......................... <tOrgImg.width>
  [ 13] getparam 1 .............................. <tOrgImg>
  [ 15] getobjprop 261 .......................... <tOrgImg.height>
  [ 18] pushint8 32 ............................. <32>
  [ 20] pusharglist 3 ........................... <tOrgImg.width, tOrgImg.height, 32>
  [ 22] extcall 260 ............................. <image(tOrgImg.width, tOrgImg.height, 32)>
  [ 25] setlocal 1 .............................. tImg = image(tOrgImg.width, tOrgImg.height, 32)
  [ 27] getparam 1 .............................. <tOrgImg>
  [ 29] pusharglist 1 ........................... <tOrgImg>
  [ 31] objcall 1157 ............................ <tOrgImg.createMatte()>
  [ 34] setlocal 2 .............................. tMatte = tOrgImg.createMatte()
  [ 36] getlocal 1 .............................. <tImg>
  [ 38] getparam 1 .............................. <tOrgImg>
  [ 40] getlocal 1 .............................. <tImg>
  [ 42] getobjprop 221 .......................... <tImg.rect>
  [ 44] getlocal 1 .............................. <tImg>
  [ 46] getobjprop 221 .......................... <tImg.rect>
  [ 48] pushsymb 393 ............................ <#ink>
  [ 51] pushint8 41 ............................. <41>
  [ 53] pushsymb 282 ............................ <#bgColor>
  [ 56] getlocal 0 .............................. <tColorObj>
  [ 58] pushsymb 1156 ........................... <#maskImage>
  [ 61] getlocal 2 .............................. <tMatte>
  [ 63] pusharglist 6 ........................... <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [ 65] pushproplist ............................ <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [ 66] pusharglistnoret 5 ...................... <tImg, tOrgImg, tImg.rect, tImg.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [ 68] objcall 293 ............................. tImg.copyPixels(tOrgImg, tImg.rect, tImg.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte])
  [ 71] getlocal 1 .............................. <tImg>
  [ 73] pusharglistnoret 1 ...................... <tImg>
  [ 75] extcall 116 ............................. return tImg
  [ 77] ret
end
