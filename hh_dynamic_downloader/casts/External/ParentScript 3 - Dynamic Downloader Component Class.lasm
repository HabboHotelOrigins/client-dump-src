property pDynDownloadURL, pFurniCastNameTemplate, pSoundDownloadUrl, pDownloadQueue, pPriorityDownloadQueue, pCurrentDownLoads, pDownloadedAssets, pBypassList, pFurniRevisionList, pRevisionsReceived, pRevisionsLoading, pAliasList, pAliasListReceived, pAliasListLoading, pBinCastName, pPersistentFurniDataID

on construct me
  [  0] pushcons 0 .............................. <"dynamic.download.url">
  [  2] pusharglist 1 ........................... <"dynamic.download.url">
  [  4] extcall 17 .............................. <variableExists("dynamic.download.url")>
  [  6] jmpifz [ 20] ............................ if variableExists("dynamic.download.url") then / else
  [  9] pushcons 0 .............................. <"dynamic.download.url">
  [ 11] pusharglist 1 ........................... <"dynamic.download.url">
  [ 13] extcall 28 .............................. <getVariable("dynamic.download.url")>
  [ 15] setprop 106 ............................. pDynDownloadURL = getVariable("dynamic.download.url")
  [ 17] jmp [ 24]
  [ 20] pushcons 1 .............................. <"dynamic_content/">
  [ 22] setprop 106 ............................. pDynDownloadURL = "dynamic_content/"
  [ 24] pushcons 2 .............................. <"dynamic.download.name.template">
  [ 26] pusharglist 1 ........................... <"dynamic.download.name.template">
  [ 28] extcall 17 .............................. <variableExists("dynamic.download.name.template")>
  [ 30] jmpifz [ 44] ............................ if variableExists("dynamic.download.name.template") then / else
  [ 33] pushcons 2 .............................. <"dynamic.download.name.template">
  [ 35] pusharglist 1 ........................... <"dynamic.download.name.template">
  [ 37] extcall 28 .............................. <getVariable("dynamic.download.name.template")>
  [ 39] setprop 107 ............................. pFurniCastNameTemplate = getVariable("dynamic.download.name.template")
  [ 41] jmp [ 48]
  [ 44] pushcons 3 .............................. <"hh_furni_xx_%typeid%.cct">
  [ 46] setprop 107 ............................. pFurniCastNameTemplate = "hh_furni_xx_%typeid%.cct"
  [ 48] pushcons 4 .............................. <"sound.download.url">
  [ 50] pusharglist 1 ........................... <"sound.download.url">
  [ 52] extcall 17 .............................. <variableExists("sound.download.url")>
  [ 54] jmpifz [ 68] ............................ if variableExists("sound.download.url") then / else
  [ 57] pushcons 4 .............................. <"sound.download.url">
  [ 59] pusharglist 1 ........................... <"sound.download.url">
  [ 61] extcall 28 .............................. <getVariable("sound.download.url")>
  [ 63] setprop 108 ............................. pSoundDownloadUrl = getVariable("sound.download.url")
  [ 65] jmp [ 72]
  [ 68] pushcons 5 .............................. <"sound/%typeid%.cct">
  [ 70] setprop 108 ............................. pSoundDownloadUrl = "sound/%typeid%.cct"
  [ 72] pusharglist 0 ........................... <[:]>
  [ 74] pushproplist ............................ <[:]>
  [ 75] setprop 109 ............................. pDownloadQueue = [:]
  [ 77] pusharglist 0 ........................... <[:]>
  [ 79] pushproplist ............................ <[:]>
  [ 80] setprop 110 ............................. pPriorityDownloadQueue = [:]
  [ 82] pusharglist 0 ........................... <[:]>
  [ 84] pushproplist ............................ <[:]>
  [ 85] setprop 111 ............................. pCurrentDownLoads = [:]
  [ 87] pusharglist 0 ........................... <[:]>
  [ 89] pushproplist ............................ <[:]>
  [ 90] setprop 112 ............................. pDownloadedAssets = [:]
  [ 92] pusharglist 0 ........................... <[:]>
  [ 94] pushproplist ............................ <[:]>
  [ 95] setprop 113 ............................. pFurniRevisionList = [:]
  [ 97] pushzero ................................ <0>
  [ 98] setprop 114 ............................. pRevisionsReceived = 0
  [100] pushzero ................................ <0>
  [101] setprop 115 ............................. pRevisionsLoading = 0
  [103] pusharglist 0 ........................... <[:]>
  [105] pushproplist ............................ <[:]>
  [106] setprop 116 ............................. pAliasList = [:]
  [108] pushzero ................................ <0>
  [109] setprop 117 ............................. pAliasListReceived = 0
  [111] pushzero ................................ <0>
  [112] setprop 118 ............................. pAliasListLoading = 0
  [114] pushcons 6 .............................. <"bin">
  [116] setprop 119 ............................. pBinCastName = "bin"
  [118] pushcons 7 .............................. <"dyn.download.bypass.list">
  [120] pusharglist 0 ........................... <[]>
  [122] pushlist ................................ <[]>
  [123] pusharglist 2 ........................... <"dyn.download.bypass.list", []>
  [125] extcall 28 .............................. <getVariable("dyn.download.bypass.list", [])>
  [127] pusharglist 1 ........................... <getVariable("dyn.download.bypass.list", [])>
  [129] extcall 63 .............................. <value(getVariable("dyn.download.bypass.list", []))>
  [131] setprop 120 ............................. pBypassList = value(getVariable("dyn.download.bypass.list", []))
  [133] pushcons 8 .............................. <"Persistent Furniture Data">
  [135] setprop 121 ............................. pPersistentFurniDataID = "Persistent Furniture Data"
  [137] pusharglist 0 ........................... <>
  [139] extcall 15 .............................. <getUniqueID()>
  [141] pushint8 10 ............................. <10>
  [143] pushsymb 93 ............................. <#initPersistentFurnidata>
  [145] getparam 0 .............................. <me>
  [147] pusharglist 1 ........................... <me>
  [149] objcall 39 .............................. <me.getID()>
  [151] pusharglist 0 ........................... <>
  [153] extcall 82 .............................. <VOID>
  [155] pushint8 1 .............................. <1>
  [157] pusharglistnoret 6 ...................... <getUniqueID(), 10, #initPersistentFurnidata, me.getID(), VOID, 1>
  [159] extcall 47 .............................. createTimeout(getUniqueID(), 10, #initPersistentFurnidata, me.getID(), VOID, 1)
  [161] ret
end

on initPersistentFurnidata me
  [  0] getprop 121 ............................. <pPersistentFurniDataID>
  [  2] pushcons 9 .............................. <"Persistent Furni Data Container">
  [  4] pusharglist 1 ........................... <["Persistent Furni Data Container"]>
  [  6] pushlist ................................ <["Persistent Furni Data Container"]>
  [  7] pusharglistnoret 2 ...................... <pPersistentFurniDataID, ["Persistent Furni Data Container"]>
  [  9] extcall 122 ............................. createObject(pPersistentFurniDataID, ["Persistent Furni Data Container"])
  [ 11] ret
end

on isAssetDownloaded me, tAssetId
  [  0] getprop 120 ............................. <pBypassList>
  [  2] peek 0
  [  4] pusharglist 1
  [  6] extcall 46
  [  8] pushint8 1
  [ 10] peek 0
  [ 12] peek 2
  [ 14] lteq
  [ 15] jmpifz [ 87] ............................ repeat with tBypassItem in pBypassList
  [ 18] peek 2
  [ 20] peek 1
  [ 22] pusharglist 2
  [ 24] extcall 54
  [ 26] setlocal 0
  [ 28] getlocal 0 .............................. <tBypassItem>
  [ 30] getobjprop 123 .......................... <tBypassItem.length>
  [ 32] setlocal 1 .............................. tBypassWildLength = tBypassItem.length
  [ 34] getlocal 0 .............................. <tBypassItem>
  [ 36] pushcons 10 ............................. <"?">
  [ 38] pushcons 11 ............................. <EMPTY>
  [ 40] pusharglist 3 ........................... <tBypassItem, "?", EMPTY>
  [ 42] extcall 33 .............................. <replaceChunks(tBypassItem, "?", EMPTY)>
  [ 44] setlocal 0 .............................. tBypassItem = replaceChunks(tBypassItem, "?", EMPTY)
  [ 46] getparam 1 .............................. <tAssetId>
  [ 48] getlocal 0 .............................. <tBypassItem>
  [ 50] eq ...................................... <tAssetId = tBypassItem>
  [ 51] jmpifz [ 60] ............................ if tAssetId = tBypassItem then
  [ 54] pushint8 1 .............................. <1>
  [ 56] pusharglistnoret 1 ...................... <1>
  [ 58] extcall 21 .............................. return 1
  [ 60] getparam 1 .............................. <tAssetId>
  [ 62] getlocal 0 .............................. <tBypassItem>
  [ 64] contains0str ............................ <tAssetId starts tBypassItem>
  [ 65] getparam 1 .............................. <tAssetId>
  [ 67] getobjprop 123 .......................... <tAssetId.length>
  [ 69] getlocal 1 .............................. <tBypassWildLength>
  [ 71] eq ...................................... <tAssetId.length = tBypassWildLength>
  [ 72] and ..................................... <(tAssetId starts tBypassItem) and (tAssetId.length = tBypassWildLength)>
  [ 73] jmpifz [ 82] ............................ if (tAssetId starts tBypassItem) and (tAssetId.length = tBypassWildLength) then
  [ 76] pushint8 1 .............................. <1>
  [ 78] pusharglistnoret 1 ...................... <1>
  [ 80] extcall 21 .............................. return 1
  [ 82] pushint8 1
  [ 84] add
  [ 85] endrepeat [ 10]
  [ 87] pop 3
  [ 89] getparam 0 .............................. <me>
  [ 91] getparam 1 .............................. <tAssetId>
  [ 93] pusharglist 2 ........................... <me, tAssetId>
  [ 95] objcall 98 .............................. <me.checkDownloadStatus(tAssetId)>
  [ 97] setlocal 2 .............................. tStatus = me.checkDownloadStatus(tAssetId)
  [ 99] getlocal 2 .............................. <tStatus>
  [101] peek 0 .................................. case tStatus of
  [103] pushsymb 124 ............................ <#downloaded>
  [105] nteq
  [106] jmpifz [117] ............................ (case) #downloaded, ...
  [109] peek 0
  [111] pushsymb 125 ............................ <#failed>
  [113] eq
  [114] jmpifz [128] ............................ (case) ..., #failed:
  [117] pop 1
  [119] pushint8 1 .............................. <1>
  [121] pusharglistnoret 1 ...................... <1>
  [123] extcall 21 .............................. return 1
  [125] jmp [135] ............................... (case) otherwise:
  [128] pop 1
  [130] pushzero ................................ <0>
  [131] pusharglistnoret 1 ...................... <0>
  [133] extcall 21 .............................. return 0
  [135] pop 1 ................................... end case
  [137] ret
end

on downloadCastDynamically me, tAssetId, tAssetType, tCallbackObjectID, tCallBackHandler, tPriorityDownload, tCallbackParams, tParentId
  [  0] getparam 1 .............................. <tAssetId>
  [  2] pushcons 11 ............................. <EMPTY>
  [  4] eq ...................................... <tAssetId = EMPTY>
  [  5] getparam 1 .............................. <tAssetId>
  [  7] pusharglist 1 ........................... <tAssetId>
  [  9] extcall 130 ............................. <voidp(tAssetId)>
  [ 11] or ...................................... <(tAssetId = EMPTY) or voidp(tAssetId)>
  [ 12] jmpifz [ 33] ............................ if (tAssetId = EMPTY) or voidp(tAssetId) then
  [ 15] getparam 0 .............................. <me>
  [ 17] pushcons 12 ............................. <"tAssetId was empty, returning with true just to prevent download sequence!">
  [ 19] pushsymb 95 ............................. <#downloadCastDynamically>
  [ 21] pushsymb 24 ............................. <#minor>
  [ 23] pusharglistnoret 4 ...................... <me, "tAssetId was empty, returning with true just to prevent download sequence!", #downloadCastDynamically, #minor>
  [ 25] extcall 23 .............................. error(me, "tAssetId was empty, returning with true just to prevent download sequence!", #downloadCastDynamically, #minor)
  [ 27] pushint8 1 .............................. <1>
  [ 29] pusharglistnoret 1 ...................... <1>
  [ 31] extcall 21 .............................. return 1
  [ 33] getparam 0 .............................. <me>
  [ 35] getparam 1 .............................. <tAssetId>
  [ 37] pusharglist 2 ........................... <me, tAssetId>
  [ 39] objcall 98 .............................. <me.checkDownloadStatus(tAssetId)>
  [ 41] setlocal 0 .............................. tStatus = me.checkDownloadStatus(tAssetId)
  [ 43] getlocal 0 .............................. <tStatus>
  [ 45] peek 0 .................................. case tStatus of
  [ 47] pushsymb 131 ............................ <#nodata>
  [ 49] nteq
  [ 50] jmpifz [ 69] ............................ (case) #nodata, ...
  [ 53] peek 0
  [ 55] pushsymb 132 ............................ <#downloading>
  [ 57] nteq
  [ 58] jmpifz [ 69] ............................ (case) ..., #downloading, ...
  [ 61] peek 0
  [ 63] pushsymb 133 ............................ <#inqueue>
  [ 65] eq
  [ 66] jmpifz [107] ............................ (case) ..., #inqueue:
  [ 69] getparam 0 .............................. <me>
  [ 71] getparam 1 .............................. <tAssetId>
  [ 73] getparam 3 .............................. <tCallbackObjectID>
  [ 75] getparam 4 .............................. <tCallBackHandler>
  [ 77] getparam 5 .............................. <tPriorityDownload>
  [ 79] pushzero ................................ <0>
  [ 80] getparam 6 .............................. <tCallbackParams>
  [ 82] getparam 2 .............................. <tAssetType>
  [ 84] getparam 7 .............................. <tParentId>
  [ 86] pusharglistnoret 9 ...................... <me, tAssetId, tCallbackObjectID, tCallBackHandler, tPriorityDownload, 0, tCallbackParams, tAssetType, tParentId>
  [ 88] objcall 99 .............................. me.addToDownloadQueue(tAssetId, tCallbackObjectID, tCallBackHandler, tPriorityDownload, 0, tCallbackParams, tAssetType, tParentId)
  [ 90] getparam 0 .............................. <me>
  [ 92] pusharglistnoret 1 ...................... <me>
  [ 94] objcall 100 ............................. me.tryNextDownload()
  [ 96] pop 1
  [ 98] pushint8 1 .............................. <1>
  [100] pusharglistnoret 1 ...................... <1>
  [102] extcall 21 .............................. return 1
  [104] jmp [130]
  [107] peek 0
  [109] pushsymb 124 ............................ <#downloaded>
  [111] nteq
  [112] jmpifz [123] ............................ (case) #downloaded, ...
  [115] peek 0
  [117] pushsymb 125 ............................ <#failed>
  [119] eq
  [120] jmpifz [130] ............................ (case) ..., #failed:
  [123] pop 1
  [125] pushzero ................................ <0>
  [126] pusharglistnoret 1 ...................... <0>
  [128] extcall 21 .............................. return 0
  [130] pop 1 ................................... end case
  [132] getparam 0 .............................. <me>
  [134] pushcons 13 ............................. <"Invalid status type found:">
  [136] getlocal 0 .............................. <tStatus>
  [138] joinpadstr .............................. <"Invalid status type found:" && tStatus>
  [139] pushsymb 95 ............................. <#downloadCastDynamically>
  [141] pushsymb 134 ............................ <#major>
  [143] pusharglist 4 ........................... <me, "Invalid status type found:" && tStatus, #downloadCastDynamically, #major>
  [145] extcall 23 .............................. <error(me, "Invalid status type found:" && tStatus, #downloadCastDynamically, #major)>
  [147] pusharglistnoret 1 ...................... <error(me, "Invalid status type found:" && tStatus, #downloadCastDynamically, #major)>
  [149] extcall 21 .............................. return error(me, "Invalid status type found:" && tStatus, #downloadCastDynamically, #major)
  [151] ret
end

on handleCompletedCastDownload me, tAssetId
  [  0] getprop 111 ............................. <pCurrentDownLoads>
  [  2] getparam 1 .............................. <tAssetId>
  [  4] pusharglist 2 ........................... <pCurrentDownLoads, tAssetId>
  [  6] objcall 54 .............................. <pCurrentDownLoads[tAssetId]>
  [  8] setlocal 0 .............................. tDownloadObj = pCurrentDownLoads[tAssetId]
  [ 10] getlocal 0 .............................. <tDownloadObj>
  [ 12] pusharglist 1 ........................... <tDownloadObj>
  [ 14] objcall 141 ............................. <tDownloadObj.getDownloadName()>
  [ 16] setlocal 1 .............................. tCastName = tDownloadObj.getDownloadName()
  [ 18] getlocal 1 .............................. <tCastName>
  [ 20] pusharglist 1 ........................... <tCastName>
  [ 22] extcall 142 ............................. <FindCastNumber(tCastName)>
  [ 24] setlocal 2 .............................. tCastNum = FindCastNumber(tCastName)
  [ 26] getlocal 2 .............................. <tCastNum>
  [ 28] pushzero ................................ <0>
  [ 29] eq ...................................... <tCastNum = 0>
  [ 30] jmpifz [ 86] ............................ if tCastNum = 0 then
  [ 33] getlocal 0 .............................. <tDownloadObj>
  [ 35] pushzero ................................ <0>
  [ 36] pusharglistnoret 2 ...................... <tDownloadObj, 0>
  [ 38] objcall 143 ............................. tDownloadObj.purgeCallbacks(0)
  [ 40] getprop 112 ............................. <pDownloadedAssets>
  [ 42] getparam 1 .............................. <tAssetId>
  [ 44] pushsymb 125 ............................ <#failed>
  [ 46] pusharglistnoret 3 ...................... <pDownloadedAssets, tAssetId, #failed>
  [ 48] objcall 59 .............................. pDownloadedAssets[tAssetId] = #failed
  [ 50] getprop 111 ............................. <pCurrentDownLoads>
  [ 52] getparam 1 .............................. <tAssetId>
  [ 54] pusharglistnoret 2 ...................... <pCurrentDownLoads, tAssetId>
  [ 56] objcall 144 ............................. pCurrentDownLoads.deleteProp(tAssetId)
  [ 58] getparam 0 .............................. <me>
  [ 60] pusharglistnoret 1 ...................... <me>
  [ 62] objcall 100 ............................. me.tryNextDownload()
  [ 64] getparam 0 .............................. <me>
  [ 66] pushcons 14 ............................. <"Cast ">
  [ 68] getlocal 1 .............................. <tCastName>
  [ 70] joinstr ................................. <"Cast " & tCastName>
  [ 71] pushcons 15 ............................. <" was not available">
  [ 73] joinstr ................................. <"Cast " & tCastName & " was not available">
  [ 74] pushsymb 96 ............................. <#handleCompletedCastDownload>
  [ 76] pushsymb 24 ............................. <#minor>
  [ 78] pusharglist 4 ........................... <me, "Cast " & tCastName & " was not available", #handleCompletedCastDownload, #minor>
  [ 80] extcall 23 .............................. <error(me, "Cast " & tCastName & " was not available", #handleCompletedCastDownload, #minor)>
  [ 82] pusharglistnoret 1 ...................... <error(me, "Cast " & tCastName & " was not available", #handleCompletedCastDownload, #minor)>
  [ 84] extcall 21 .............................. return error(me, "Cast " & tCastName & " was not available", #handleCompletedCastDownload, #minor)
  [ 86] getparam 0 .............................. <me>
  [ 88] getlocal 2 .............................. <tCastNum>
  [ 90] getparam 1 .............................. <tAssetId>
  [ 92] pusharglistnoret 3 ...................... <me, tCastNum, tAssetId>
  [ 94] objcall 102 ............................. me.acquireAssetsFromCast(tCastNum, tAssetId)
  [ 96] pusharglist 0 ........................... <>
  [ 98] extcall 145 ............................. <getCastLoadManager()>
  [100] getlocal 2 .............................. <tCastNum>
  [102] pusharglist 2 ........................... <getCastLoadManager(), tCastNum>
  [104] objcall 146 ............................. <getCastLoadManager().ResetOneDynamicCast(tCastNum)>
  [106] setlocal 3 .............................. tResetOk = getCastLoadManager().ResetOneDynamicCast(tCastNum)
  [108] getlocal 3 .............................. <tResetOk>
  [110] not ..................................... <not tResetOk>
  [111] jmpifz [129] ............................ if not tResetOk then
  [114] getparam 0 .............................. <me>
  [116] pushcons 16 ............................. <"Cast reset failed:">
  [118] getlocal 2 .............................. <tCastNum>
  [120] joinpadstr .............................. <"Cast reset failed:" && tCastNum>
  [121] pushsymb 96 ............................. <#handleCompletedCastDownload>
  [123] pushsymb 134 ............................ <#major>
  [125] pusharglistnoret 4 ...................... <me, "Cast reset failed:" && tCastNum, #handleCompletedCastDownload, #major>
  [127] extcall 23 .............................. error(me, "Cast reset failed:" && tCastNum, #handleCompletedCastDownload, #major)
  [129] getprop 111 ............................. <pCurrentDownLoads>
  [131] getparam 1 .............................. <tAssetId>
  [133] pusharglistnoret 2 ...................... <pCurrentDownLoads, tAssetId>
  [135] objcall 144 ............................. pCurrentDownLoads.deleteProp(tAssetId)
  [137] getprop 112 ............................. <pDownloadedAssets>
  [139] getparam 1 .............................. <tAssetId>
  [141] pushsymb 124 ............................ <#downloaded>
  [143] pusharglistnoret 3 ...................... <pDownloadedAssets, tAssetId, #downloaded>
  [145] objcall 59 .............................. pDownloadedAssets[tAssetId] = #downloaded
  [147] getlocal 0 .............................. <tDownloadObj>
  [149] pushint8 1 .............................. <1>
  [151] pusharglistnoret 2 ...................... <tDownloadObj, 1>
  [153] objcall 143 ............................. tDownloadObj.purgeCallbacks(1)
  [155] getparam 0 .............................. <me>
  [157] pusharglistnoret 1 ...................... <me>
  [159] objcall 100 ............................. me.tryNextDownload()
  [161] ret
end

on getPersistentFurniDataObject me
  [  0] getprop 121 ............................. <pPersistentFurniDataID>
  [  2] pusharglist 1 ........................... <pPersistentFurniDataID>
  [  4] extcall 130 ............................. <voidp(pPersistentFurniDataID)>
  [  6] jmpifz [ 21] ............................ if voidp(pPersistentFurniDataID) then
  [  9] getparam 0 .............................. <me>
  [ 11] pushcons 17 ............................. <"Persistent Furni Data Missing!">
  [ 13] pushsymb 97 ............................. <#getPersistentFurniDataObject>
  [ 15] pushsymb 134 ............................ <#major>
  [ 17] pusharglistnoret 4 ...................... <me, "Persistent Furni Data Missing!", #getPersistentFurniDataObject, #major>
  [ 19] extcall 23 .............................. error(me, "Persistent Furni Data Missing!", #getPersistentFurniDataObject, #major)
  [ 21] getprop 121 ............................. <pPersistentFurniDataID>
  [ 23] pusharglist 1 ........................... <pPersistentFurniDataID>
  [ 25] extcall 151 ............................. <getObject(pPersistentFurniDataID)>
  [ 27] pusharglistnoret 1 ...................... <getObject(pPersistentFurniDataID)>
  [ 29] extcall 21 .............................. return getObject(pPersistentFurniDataID)
  [ 31] ret
end

on checkDownloadStatus me, tAssetId
  [  0] getprop 112 ............................. <pDownloadedAssets>
  [  2] getparam 1 .............................. <tAssetId>
  [  4] pusharglist 2 ........................... <pDownloadedAssets, tAssetId>
  [  6] objcall 22 .............................. <pDownloadedAssets.getaProp(tAssetId)>
  [  8] setlocal 0 .............................. tDownloadStatus = pDownloadedAssets.getaProp(tAssetId)
  [ 10] getlocal 0 .............................. <tDownloadStatus>
  [ 12] pusharglist 0 ........................... <>
  [ 14] extcall 82 .............................. <VOID>
  [ 16] nteq .................................... <tDownloadStatus <> VOID>
  [ 17] jmpifz [ 29] ............................ if tDownloadStatus <> VOID then / else
  [ 20] getlocal 0 .............................. <tDownloadStatus>
  [ 22] pusharglistnoret 1 ...................... <tDownloadStatus>
  [ 24] extcall 21 .............................. return tDownloadStatus
  [ 26] jmp [101]
  [ 29] getprop 109 ............................. <pDownloadQueue>
  [ 31] getparam 1 .............................. <tAssetId>
  [ 33] pusharglist 2 ........................... <pDownloadQueue, tAssetId>
  [ 35] objcall 22 .............................. <pDownloadQueue.getaProp(tAssetId)>
  [ 37] pusharglist 0 ........................... <>
  [ 39] extcall 82 .............................. <VOID>
  [ 41] nteq .................................... <pDownloadQueue.getaProp(tAssetId) <> VOID>
  [ 42] jmpifz [ 54] ............................ if pDownloadQueue.getaProp(tAssetId) <> VOID then / else
  [ 45] pushsymb 133 ............................ <#inqueue>
  [ 47] pusharglistnoret 1 ...................... <#inqueue>
  [ 49] extcall 21 .............................. return #inqueue
  [ 51] jmp [101]
  [ 54] getprop 110 ............................. <pPriorityDownloadQueue>
  [ 56] getparam 1 .............................. <tAssetId>
  [ 58] pusharglist 2 ........................... <pPriorityDownloadQueue, tAssetId>
  [ 60] objcall 22 .............................. <pPriorityDownloadQueue.getaProp(tAssetId)>
  [ 62] pusharglist 0 ........................... <>
  [ 64] extcall 82 .............................. <VOID>
  [ 66] nteq .................................... <pPriorityDownloadQueue.getaProp(tAssetId) <> VOID>
  [ 67] jmpifz [ 79] ............................ if pPriorityDownloadQueue.getaProp(tAssetId) <> VOID then / else
  [ 70] pushsymb 133 ............................ <#inqueue>
  [ 72] pusharglistnoret 1 ...................... <#inqueue>
  [ 74] extcall 21 .............................. return #inqueue
  [ 76] jmp [101]
  [ 79] getprop 111 ............................. <pCurrentDownLoads>
  [ 81] getparam 1 .............................. <tAssetId>
  [ 83] pusharglist 2 ........................... <pCurrentDownLoads, tAssetId>
  [ 85] objcall 22 .............................. <pCurrentDownLoads.getaProp(tAssetId)>
  [ 87] pusharglist 0 ........................... <>
  [ 89] extcall 82 .............................. <VOID>
  [ 91] nteq .................................... <pCurrentDownLoads.getaProp(tAssetId) <> VOID>
  [ 92] jmpifz [101] ............................ if pCurrentDownLoads.getaProp(tAssetId) <> VOID then
  [ 95] pushsymb 132 ............................ <#downloading>
  [ 97] pusharglistnoret 1 ...................... <#downloading>
  [ 99] extcall 21 .............................. return #downloading
  [101] pushsymb 131 ............................ <#nodata>
  [103] pusharglistnoret 1 ...................... <#nodata>
  [105] extcall 21 .............................. return #nodata
  [107] ret
end

on addToDownloadQueue me, tAssetId, tCallbackObjectID, tCallBackHandler, tPriorityDownload, tAllowIndexing, tCallbackParams, tAssetType, tParentId
  [  0] getparam 5 .............................. <tAllowIndexing>
  [  2] pusharglist 1 ........................... <tAllowIndexing>
  [  4] extcall 130 ............................. <voidp(tAllowIndexing)>
  [  6] jmpifz [ 12] ............................ if voidp(tAllowIndexing) then
  [  9] pushzero ................................ <0>
  [ 10] setparam 5 .............................. tAllowIndexing = 0
  [ 12] pusharglist 0 ........................... <>
  [ 14] extcall 82 .............................. <VOID>
  [ 16] setlocal 0 .............................. tDownloadObj = VOID
  [ 18] getprop 109 ............................. <pDownloadQueue>
  [ 20] getparam 1 .............................. <tAssetId>
  [ 22] pusharglist 2 ........................... <pDownloadQueue, tAssetId>
  [ 24] objcall 22 .............................. <pDownloadQueue.getaProp(tAssetId)>
  [ 26] pusharglist 0 ........................... <>
  [ 28] extcall 82 .............................. <VOID>
  [ 30] nteq .................................... <pDownloadQueue.getaProp(tAssetId) <> VOID>
  [ 31] jmpifz [ 47] ............................ if pDownloadQueue.getaProp(tAssetId) <> VOID then / else
  [ 34] getprop 109 ............................. <pDownloadQueue>
  [ 36] getparam 1 .............................. <tAssetId>
  [ 38] pusharglist 2 ........................... <pDownloadQueue, tAssetId>
  [ 40] objcall 22 .............................. <pDownloadQueue.getaProp(tAssetId)>
  [ 42] setlocal 0 .............................. tDownloadObj = pDownloadQueue.getaProp(tAssetId)
  [ 44] jmp [208]
  [ 47] getprop 110 ............................. <pPriorityDownloadQueue>
  [ 49] getparam 1 .............................. <tAssetId>
  [ 51] pusharglist 2 ........................... <pPriorityDownloadQueue, tAssetId>
  [ 53] objcall 22 .............................. <pPriorityDownloadQueue.getaProp(tAssetId)>
  [ 55] pusharglist 0 ........................... <>
  [ 57] extcall 82 .............................. <VOID>
  [ 59] nteq .................................... <pPriorityDownloadQueue.getaProp(tAssetId) <> VOID>
  [ 60] jmpifz [ 76] ............................ if pPriorityDownloadQueue.getaProp(tAssetId) <> VOID then / else
  [ 63] getprop 110 ............................. <pPriorityDownloadQueue>
  [ 65] getparam 1 .............................. <tAssetId>
  [ 67] pusharglist 2 ........................... <pPriorityDownloadQueue, tAssetId>
  [ 69] objcall 22 .............................. <pPriorityDownloadQueue.getaProp(tAssetId)>
  [ 71] setlocal 0 .............................. tDownloadObj = pPriorityDownloadQueue.getaProp(tAssetId)
  [ 73] jmp [208]
  [ 76] getprop 111 ............................. <pCurrentDownLoads>
  [ 78] getparam 1 .............................. <tAssetId>
  [ 80] pusharglist 2 ........................... <pCurrentDownLoads, tAssetId>
  [ 82] objcall 22 .............................. <pCurrentDownLoads.getaProp(tAssetId)>
  [ 84] pusharglist 0 ........................... <>
  [ 86] extcall 82 .............................. <VOID>
  [ 88] nteq .................................... <pCurrentDownLoads.getaProp(tAssetId) <> VOID>
  [ 89] jmpifz [105] ............................ if pCurrentDownLoads.getaProp(tAssetId) <> VOID then / else
  [ 92] getprop 111 ............................. <pCurrentDownLoads>
  [ 94] getparam 1 .............................. <tAssetId>
  [ 96] pusharglist 2 ........................... <pCurrentDownLoads, tAssetId>
  [ 98] objcall 22 .............................. <pCurrentDownLoads.getaProp(tAssetId)>
  [100] setlocal 0 .............................. tDownloadObj = pCurrentDownLoads.getaProp(tAssetId)
  [102] jmp [208]
  [105] pushcons 18 ............................. <"dyndownload-">
  [107] getparam 1 .............................. <tAssetId>
  [109] joinstr ................................. <"dyndownload-" & tAssetId>
  [110] pushcons 19 ............................. <"dyn.download.instance">
  [112] pusharglist 1 ........................... <"dyn.download.instance">
  [114] extcall 153 ............................. <getClassVariable("dyn.download.instance")>
  [116] pusharglist 2 ........................... <"dyndownload-" & tAssetId, getClassVariable("dyn.download.instance")>
  [118] extcall 122 ............................. <createObject("dyndownload-" & tAssetId, getClassVariable("dyn.download.instance"))>
  [120] setlocal 0 .............................. tDownloadObj = createObject("dyndownload-" & tAssetId, getClassVariable("dyn.download.instance"))
  [122] getlocal 0 .............................. <tDownloadObj>
  [124] not ..................................... <not tDownloadObj>
  [125] jmpifz [148] ............................ if not tDownloadObj then
  [128] getparam 0 .............................. <me>
  [130] pushcons 20 ............................. <"Could not create download object. Could it be a duplicate:">
  [132] getparam 1 .............................. <tAssetId>
  [134] joinpadstr .............................. <"Could not create download object. Could it be a duplicate:" && tAssetId>
  [135] pushsymb 99 ............................. <#addToDownloadQueue>
  [137] pushsymb 134 ............................ <#major>
  [139] pusharglistnoret 4 ...................... <me, "Could not create download object. Could it be a duplicate:" && tAssetId, #addToDownloadQueue, #major>
  [141] extcall 23 .............................. error(me, "Could not create download object. Could it be a duplicate:" && tAssetId, #addToDownloadQueue, #major)
  [143] pushzero ................................ <0>
  [144] pusharglistnoret 1 ...................... <0>
  [146] extcall 21 .............................. return 0
  [148] getlocal 0 .............................. <tDownloadObj>
  [150] getparam 1 .............................. <tAssetId>
  [152] pusharglistnoret 2 ...................... <tDownloadObj, tAssetId>
  [154] objcall 154 ............................. tDownloadObj.setAssetId(tAssetId)
  [156] getlocal 0 .............................. <tDownloadObj>
  [158] getparam 7 .............................. <tAssetType>
  [160] pusharglistnoret 2 ...................... <tDownloadObj, tAssetType>
  [162] objcall 155 ............................. tDownloadObj.setAssetType(tAssetType)
  [164] getlocal 0 .............................. <tDownloadObj>
  [166] getparam 5 .............................. <tAllowIndexing>
  [168] pusharglistnoret 2 ...................... <tDownloadObj, tAllowIndexing>
  [170] objcall 156 ............................. tDownloadObj.setIndexing(tAllowIndexing)
  [172] getlocal 0 .............................. <tDownloadObj>
  [174] getparam 8 .............................. <tParentId>
  [176] pusharglistnoret 2 ...................... <tDownloadObj, tParentId>
  [178] objcall 157 ............................. tDownloadObj.setParentId(tParentId)
  [180] getparam 4 .............................. <tPriorityDownload>
  [182] jmpifz [198] ............................ if tPriorityDownload then / else
  [185] getprop 110 ............................. <pPriorityDownloadQueue>
  [187] getparam 1 .............................. <tAssetId>
  [189] getlocal 0 .............................. <tDownloadObj>
  [191] pusharglistnoret 3 ...................... <pPriorityDownloadQueue, tAssetId, tDownloadObj>
  [193] objcall 158 ............................. pPriorityDownloadQueue.addProp(tAssetId, tDownloadObj)
  [195] jmp [208]
  [198] getprop 109 ............................. <pDownloadQueue>
  [200] getparam 1 .............................. <tAssetId>
  [202] getlocal 0 .............................. <tDownloadObj>
  [204] pusharglistnoret 3 ...................... <pDownloadQueue, tAssetId, tDownloadObj>
  [206] objcall 158 ............................. pDownloadQueue.addProp(tAssetId, tDownloadObj)
  [208] getlocal 0 .............................. <tDownloadObj>
  [210] getparam 2 .............................. <tCallbackObjectID>
  [212] getparam 3 .............................. <tCallBackHandler>
  [214] getparam 6 .............................. <tCallbackParams>
  [216] pusharglistnoret 4 ...................... <tDownloadObj, tCallbackObjectID, tCallBackHandler, tCallbackParams>
  [218] objcall 159 ............................. tDownloadObj.addCallbackListener(tCallbackObjectID, tCallBackHandler, tCallbackParams)
  [220] ret
end

on tryNextDownload me
  [  0] getprop 117 ............................. <pAliasListReceived>
  [  2] not ..................................... <not pAliasListReceived>
  [  3] jmpifz [ 46] ............................ if not pAliasListReceived then
  [  6] getprop 118 ............................. <pAliasListLoading>
  [  8] not ..................................... <not pAliasListLoading>
  [  9] jmpifz [ 41] ............................ if not pAliasListLoading then
  [ 12] pusharglist 0 ........................... <[:]>
  [ 14] pushproplist ............................ <[:]>
  [ 15] setprop 116 ............................. pAliasList = [:]
  [ 17] pushint8 1 .............................. <1>
  [ 19] setprop 118 ............................. pAliasListLoading = 1
  [ 21] pushcons 21 ............................. <"connection.info.id">
  [ 23] pusharglist 1 ........................... <"connection.info.id">
  [ 25] extcall 28 .............................. <getVariable("connection.info.id")>
  [ 27] pusharglist 1 ........................... <getVariable("connection.info.id")>
  [ 29] extcall 161 ............................. <getConnection(getVariable("connection.info.id"))>
  [ 31] setlocal 0 .............................. tConn = getConnection(getVariable("connection.info.id"))
  [ 33] getlocal 0 .............................. <tConn>
  [ 35] pushcons 22 ............................. <"GET_ALIAS_LIST">
  [ 37] pusharglistnoret 2 ...................... <tConn, "GET_ALIAS_LIST">
  [ 39] objcall 162 ............................. tConn.send("GET_ALIAS_LIST")
  [ 41] pushzero ................................ <0>
  [ 42] pusharglistnoret 1 ...................... <0>
  [ 44] extcall 21 .............................. return 0
  [ 46] getprop 114 ............................. <pRevisionsReceived>
  [ 48] not ..................................... <not pRevisionsReceived>
  [ 49] jmpifz [ 88] ............................ if not pRevisionsReceived then
  [ 52] getprop 115 ............................. <pRevisionsLoading>
  [ 54] not ..................................... <not pRevisionsLoading>
  [ 55] jmpifz [ 83] ............................ if not pRevisionsLoading then
  [ 58] pusharglist 0 ........................... <[:]>
  [ 60] pushproplist ............................ <[:]>
  [ 61] setprop 113 ............................. pFurniRevisionList = [:]
  [ 63] pushint8 1 .............................. <1>
  [ 65] setprop 115 ............................. pRevisionsLoading = 1
  [ 67] pushcons 23 ............................. <"connection.room.id">
  [ 69] pusharglist 1 ........................... <"connection.room.id">
  [ 71] extcall 163 ............................. <getVariableValue("connection.room.id")>
  [ 73] pusharglist 1 ........................... <getVariableValue("connection.room.id")>
  [ 75] extcall 161 ............................. <getConnection(getVariableValue("connection.room.id"))>
  [ 77] pushcons 24 ............................. <"GET_FURNI_REVISIONS">
  [ 79] pusharglistnoret 2 ...................... <getConnection(getVariableValue("connection.room.id")), "GET_FURNI_REVISIONS">
  [ 81] objcall 162 ............................. getConnection(getVariableValue("connection.room.id")).send("GET_FURNI_REVISIONS")
  [ 83] pushzero ................................ <0>
  [ 84] pusharglistnoret 1 ...................... <0>
  [ 86] extcall 21 .............................. return 0
  [ 88] pushint8 1 .............................. <1>
  [ 90] setlocal 1 .............................. tMaxItemsInProcess = 1
  [ 92] pusharglist 0 ........................... <>
  [ 94] extcall 82 .............................. <VOID>
  [ 96] setlocal 2 .............................. tDownloadObj = VOID
  [ 98] getprop 111 ............................. <pCurrentDownLoads>
  [100] getobjprop 46 ........................... <pCurrentDownLoads.count>
  [102] getlocal 1 .............................. <tMaxItemsInProcess>
  [104] gteq .................................... <pCurrentDownLoads.count >= tMaxItemsInProcess>
  [105] jmpifz [113] ............................ if pCurrentDownLoads.count >= tMaxItemsInProcess then
  [108] pushzero ................................ <0>
  [109] pusharglistnoret 1 ...................... <0>
  [111] extcall 21 .............................. return 0
  [113] getprop 110 ............................. <pPriorityDownloadQueue>
  [115] getobjprop 46 ........................... <pPriorityDownloadQueue.count>
  [117] pushzero ................................ <0>
  [118] gt ...................................... <pPriorityDownloadQueue.count > 0>
  [119] jmpifz [151] ............................ if pPriorityDownloadQueue.count > 0 then / else
  [122] getprop 110 ............................. <pPriorityDownloadQueue>
  [124] pushint8 1 .............................. <1>
  [126] pusharglist 2 ........................... <pPriorityDownloadQueue, 1>
  [128] extcall 54 .............................. <getAt(pPriorityDownloadQueue, 1)>
  [130] setlocal 2 .............................. tDownloadObj = getAt(pPriorityDownloadQueue, 1)
  [132] getlocal 2 .............................. <tDownloadObj>
  [134] pusharglist 1 ........................... <tDownloadObj>
  [136] objcall 164 ............................. <tDownloadObj.getAssetId()>
  [138] setlocal 3 .............................. tAssetId = tDownloadObj.getAssetId()
  [140] getprop 110 ............................. <pPriorityDownloadQueue>
  [142] getlocal 3 .............................. <tAssetId>
  [144] pusharglistnoret 2 ...................... <pPriorityDownloadQueue, tAssetId>
  [146] objcall 144 ............................. pPriorityDownloadQueue.deleteProp(tAssetId)
  [148] jmp [194]
  [151] getprop 109 ............................. <pDownloadQueue>
  [153] getobjprop 46 ........................... <pDownloadQueue.count>
  [155] pushzero ................................ <0>
  [156] gt ...................................... <pDownloadQueue.count > 0>
  [157] jmpifz [189] ............................ if pDownloadQueue.count > 0 then / else
  [160] getprop 109 ............................. <pDownloadQueue>
  [162] pushint8 1 .............................. <1>
  [164] pusharglist 2 ........................... <pDownloadQueue, 1>
  [166] extcall 54 .............................. <getAt(pDownloadQueue, 1)>
  [168] setlocal 2 .............................. tDownloadObj = getAt(pDownloadQueue, 1)
  [170] getlocal 2 .............................. <tDownloadObj>
  [172] pusharglist 1 ........................... <tDownloadObj>
  [174] objcall 164 ............................. <tDownloadObj.getAssetId()>
  [176] setlocal 3 .............................. tAssetId = tDownloadObj.getAssetId()
  [178] getprop 109 ............................. <pDownloadQueue>
  [180] getlocal 3 .............................. <tAssetId>
  [182] pusharglistnoret 2 ...................... <pDownloadQueue, tAssetId>
  [184] objcall 144 ............................. pDownloadQueue.deleteProp(tAssetId)
  [186] jmp [194]
  [189] pushzero ................................ <0>
  [190] pusharglistnoret 1 ...................... <0>
  [192] extcall 21 .............................. return 0
  [194] getparam 0 .............................. <me>
  [196] getlocal 3 .............................. <tAssetId>
  [198] pusharglist 2 ........................... <me, tAssetId>
  [200] objcall 98 .............................. <me.checkDownloadStatus(tAssetId)>
  [202] pushsymb 124 ............................ <#downloaded>
  [204] eq ...................................... <me.checkDownloadStatus(tAssetId) = #downloaded>
  [205] jmpifz [226] ............................ if me.checkDownloadStatus(tAssetId) = #downloaded then
  [208] getlocal 2 .............................. <tDownloadObj>
  [210] pushint8 1 .............................. <1>
  [212] pusharglistnoret 2 ...................... <tDownloadObj, 1>
  [214] objcall 143 ............................. tDownloadObj.purgeCallbacks(1)
  [216] getparam 0 .............................. <me>
  [218] pusharglist 1 ........................... <me>
  [220] objcall 100 ............................. <me.tryNextDownload()>
  [222] pusharglistnoret 1 ...................... <me.tryNextDownload()>
  [224] extcall 21 .............................. return me.tryNextDownload()
  [226] getprop 111 ............................. <pCurrentDownLoads>
  [228] getlocal 3 .............................. <tAssetId>
  [230] getlocal 2 .............................. <tDownloadObj>
  [232] pusharglistnoret 3 ...................... <pCurrentDownLoads, tAssetId, tDownloadObj>
  [234] objcall 158 ............................. pCurrentDownLoads.addProp(tAssetId, tDownloadObj)
  [236] getlocal 3 .............................. <tAssetId>
  [238] setlocal 4 .............................. tAliasedAssetId = tAssetId
  [240] getprop 116 ............................. <pAliasList>
  [242] getlocal 3 .............................. <tAssetId>
  [244] pusharglist 2 ........................... <pAliasList, tAssetId>
  [246] objcall 22 .............................. <pAliasList.getaProp(tAssetId)>
  [248] pusharglist 1 ........................... <pAliasList.getaProp(tAssetId)>
  [250] extcall 130 ............................. <voidp(pAliasList.getaProp(tAssetId))>
  [252] not ..................................... <not voidp(pAliasList.getaProp(tAssetId))>
  [253] jmpifz [266] ............................ if not voidp(pAliasList.getaProp(tAssetId)) then
  [256] getprop 116 ............................. <pAliasList>
  [258] getlocal 3 .............................. <tAssetId>
  [260] pusharglist 2 ........................... <pAliasList, tAssetId>
  [262] objcall 54 .............................. <pAliasList[tAssetId]>
  [264] setlocal 4 .............................. tAliasedAssetId = pAliasList[tAssetId]
  [266] getprop 106 ............................. <pDynDownloadURL>
  [268] getprop 107 ............................. <pFurniCastNameTemplate>
  [270] joinstr ................................. <pDynDownloadURL & pFurniCastNameTemplate>
  [271] setlocal 5 .............................. tDownloadURL = pDynDownloadURL & pFurniCastNameTemplate
  [273] getlocal 2 .............................. <tDownloadObj>
  [275] pusharglist 1 ........................... <tDownloadObj>
  [277] objcall 165 ............................. <tDownloadObj.getAssetType()>
  [279] pushsymb 166 ............................ <#sound>
  [281] eq ...................................... <tDownloadObj.getAssetType() = #sound>
  [282] jmpifz [323] ............................ if tDownloadObj.getAssetType() = #sound then
  [285] getlocal 2 .............................. <tDownloadObj>
  [287] pusharglist 1 ........................... <tDownloadObj>
  [289] objcall 167 ............................. <tDownloadObj.getParentId()>
  [291] setlocal 6 .............................. tParentId = tDownloadObj.getParentId()
  [293] getlocal 6 .............................. <tParentId>
  [295] pusharglist 1 ........................... <tParentId>
  [297] extcall 130 ............................. <voidp(tParentId)>
  [299] not ..................................... <not voidp(tParentId)>
  [300] jmpifz [323] ............................ if not voidp(tParentId) then
  [303] pushcons 25 ............................. <"dynamic.download.samples.template">
  [305] pusharglist 1 ........................... <"dynamic.download.samples.template">
  [307] extcall 17 .............................. <variableExists("dynamic.download.samples.template")>
  [309] jmpifz [323] ............................ if variableExists("dynamic.download.samples.template") then
  [312] getprop 106 ............................. <pDynDownloadURL>
  [314] pushcons 25 ............................. <"dynamic.download.samples.template">
  [316] pusharglist 1 ........................... <"dynamic.download.samples.template">
  [318] extcall 28 .............................. <getVariable("dynamic.download.samples.template")>
  [320] joinstr ................................. <pDynDownloadURL & getVariable("dynamic.download.samples.template")>
  [321] setlocal 5 .............................. tDownloadURL = pDynDownloadURL & getVariable("dynamic.download.samples.template")
  [323] getlocal 4 .............................. <tAliasedAssetId>
  [325] pushcons 26 ............................. <" ">
  [327] pushcons 27 ............................. <"_">
  [329] pusharglist 3 ........................... <tAliasedAssetId, " ", "_">
  [331] extcall 33 .............................. <replaceChunks(tAliasedAssetId, " ", "_")>
  [333] setlocal 7 .............................. tFixedAssetId = replaceChunks(tAliasedAssetId, " ", "_")
  [335] getlocal 5 .............................. <tDownloadURL>
  [337] pushcons 28 ............................. <"%typeid%">
  [339] getlocal 7 .............................. <tFixedAssetId>
  [341] pusharglist 3 ........................... <tDownloadURL, "%typeid%", tFixedAssetId>
  [343] extcall 33 .............................. <replaceChunks(tDownloadURL, "%typeid%", tFixedAssetId)>
  [345] setlocal 5 .............................. tDownloadURL = replaceChunks(tDownloadURL, "%typeid%", tFixedAssetId)
  [347] getlocal 3 .............................. <tAssetId>
  [349] setlocal 8 .............................. tRawAssetId = tAssetId
  [351] getlocal 3 .............................. <tAssetId>
  [353] pushint8 1 .............................. <1>
  [355] pushint8 2 .............................. <2>
  [357] pusharglist 3 ........................... <tAssetId, 1, 2>
  [359] extcall 168 ............................. <chars(tAssetId, 1, 2)>
  [361] pushcons 29 ............................. <"s_">
  [363] eq ...................................... <chars(tAssetId, 1, 2) = "s_">
  [364] jmpifz [381] ............................ if chars(tAssetId, 1, 2) = "s_" then
  [367] getlocal 3 .............................. <tAssetId>
  [369] pushint8 3 .............................. <3>
  [371] getlocal 3 .............................. <tAssetId>
  [373] getobjprop 123 .......................... <tAssetId.length>
  [375] pusharglist 3 ........................... <tAssetId, 3, tAssetId.length>
  [377] extcall 168 ............................. <chars(tAssetId, 3, tAssetId.length)>
  [379] setlocal 8 .............................. tRawAssetId = chars(tAssetId, 3, tAssetId.length)
  [381] getlocal 6 .............................. <tParentId>
  [383] pusharglist 1 ........................... <tParentId>
  [385] extcall 130 ............................. <voidp(tParentId)>
  [387] not ..................................... <not voidp(tParentId)>
  [388] jmpifz [408] ............................ if not voidp(tParentId) then / else
  [391] getprop 113 ............................. <pFurniRevisionList>
  [393] getlocal 6 .............................. <tParentId>
  [395] pusharglist 2 ........................... <pFurniRevisionList, tParentId>
  [397] objcall 54 .............................. <pFurniRevisionList[tParentId]>
  [399] pusharglist 1 ........................... <pFurniRevisionList[tParentId]>
  [401] extcall 31 .............................. <string(pFurniRevisionList[tParentId])>
  [403] setlocal 9 .............................. tRevision = string(pFurniRevisionList[tParentId])
  [405] jmp [470]
  [408] getprop 113 ............................. <pFurniRevisionList>
  [410] getlocal 8 .............................. <tRawAssetId>
  [412] pusharglist 2 ........................... <pFurniRevisionList, tRawAssetId>
  [414] objcall 169 ............................. <pFurniRevisionList.findPos(tRawAssetId)>
  [416] pusharglist 1 ........................... <pFurniRevisionList.findPos(tRawAssetId)>
  [418] extcall 130 ............................. <voidp(pFurniRevisionList.findPos(tRawAssetId))>
  [420] not ..................................... <not voidp(pFurniRevisionList.findPos(tRawAssetId))>
  [421] jmpifz [441] ............................ if not voidp(pFurniRevisionList.findPos(tRawAssetId)) then / else
  [424] getprop 113 ............................. <pFurniRevisionList>
  [426] getlocal 8 .............................. <tRawAssetId>
  [428] pusharglist 2 ........................... <pFurniRevisionList, tRawAssetId>
  [430] objcall 54 .............................. <pFurniRevisionList[tRawAssetId]>
  [432] pusharglist 1 ........................... <pFurniRevisionList[tRawAssetId]>
  [434] extcall 31 .............................. <string(pFurniRevisionList[tRawAssetId])>
  [436] setlocal 9 .............................. tRevision = string(pFurniRevisionList[tRawAssetId])
  [438] jmp [470]
  [441] getlocal 3 .............................. <tAssetId>
  [443] pushcons 30 ............................. <"poster">
  [445] containsstr ............................. <tAssetId contains "poster">
  [446] jmpifz [466] ............................ if tAssetId contains "poster" then / else
  [449] getprop 113 ............................. <pFurniRevisionList>
  [451] pushcons 30 ............................. <"poster">
  [453] pusharglist 2 ........................... <pFurniRevisionList, "poster">
  [455] objcall 54 .............................. <pFurniRevisionList["poster"]>
  [457] pusharglist 1 ........................... <pFurniRevisionList["poster"]>
  [459] extcall 31 .............................. <string(pFurniRevisionList["poster"])>
  [461] setlocal 9 .............................. tRevision = string(pFurniRevisionList["poster"])
  [463] jmp [470]
  [466] pushcons 11 ............................. <EMPTY>
  [468] setlocal 9 .............................. tRevision = EMPTY
  [470] getlocal 5 .............................. <tDownloadURL>
  [472] pushcons 31 ............................. <"%revision%">
  [474] getlocal 9 .............................. <tRevision>
  [476] pusharglist 3 ........................... <tDownloadURL, "%revision%", tRevision>
  [478] extcall 33 .............................. <replaceChunks(tDownloadURL, "%revision%", tRevision)>
  [480] setlocal 5 .............................. tDownloadURL = replaceChunks(tDownloadURL, "%revision%", tRevision)
  [482] getlocal 2 .............................. <tDownloadObj>
  [484] getlocal 5 .............................. <tDownloadURL>
  [486] pusharglistnoret 2 ...................... <tDownloadObj, tDownloadURL>
  [488] objcall 170 ............................. tDownloadObj.setDownloadName(tDownloadURL)
  [490] getlocal 2 .............................. <tDownloadObj>
  [492] pusharglist 1 ........................... <tDownloadObj>
  [494] objcall 171 ............................. <tDownloadObj.getIndexing()>
  [496] setlocal 10 ............................. tAllowIndexing = tDownloadObj.getIndexing()
  [498] pushcons 32 ............................. <"dynamic.download.delay">
  [500] pusharglist 1 ........................... <"dynamic.download.delay">
  [502] extcall 17 .............................. <variableExists("dynamic.download.delay")>
  [504] jmpifz [548] ............................ if variableExists("dynamic.download.delay") then / else
  [507] pushcons 32 ............................. <"dynamic.download.delay">
  [509] pusharglist 1 ........................... <"dynamic.download.delay">
  [511] extcall 28 .............................. <getVariable("dynamic.download.delay")>
  [513] setlocal 11 ............................. tTimeout = getVariable("dynamic.download.delay")
  [515] pushcons 33 ............................. <"dynamicdelay">
  [517] getmovieprop 43 ......................... <the milliSeconds>
  [519] joinstr ................................. <"dynamicdelay" & the milliSeconds>
  [520] getlocal 11 ............................. <tTimeout>
  [522] pushsymb 101 ............................ <#executeDownloadRequest>
  [524] getparam 0 .............................. <me>
  [526] pusharglist 1 ........................... <me>
  [528] objcall 39 .............................. <me.getID()>
  [530] getlocal 3 .............................. <tAssetId>
  [532] getlocal 5 .............................. <tDownloadURL>
  [534] getlocal 10 ............................. <tAllowIndexing>
  [536] pusharglist 3 ........................... <[tAssetId, tDownloadURL, tAllowIndexing]>
  [538] pushlist ................................ <[tAssetId, tDownloadURL, tAllowIndexing]>
  [539] pushint8 1 .............................. <1>
  [541] pusharglistnoret 6 ...................... <"dynamicdelay" & the milliSeconds, tTimeout, #executeDownloadRequest, me.getID(), [tAssetId, tDownloadURL, tAllowIndexing], 1>
  [543] extcall 47 .............................. createTimeout("dynamicdelay" & the milliSeconds, tTimeout, #executeDownloadRequest, me.getID(), [tAssetId, tDownloadURL, tAllowIndexing], 1)
  [545] jmp [563]
  [548] getparam 0 .............................. <me>
  [550] getlocal 3 .............................. <tAssetId>
  [552] getlocal 5 .............................. <tDownloadURL>
  [554] getlocal 10 ............................. <tAllowIndexing>
  [556] pusharglist 3 ........................... <[tAssetId, tDownloadURL, tAllowIndexing]>
  [558] pushlist ................................ <[tAssetId, tDownloadURL, tAllowIndexing]>
  [559] pusharglistnoret 2 ...................... <me, [tAssetId, tDownloadURL, tAllowIndexing]>
  [561] objcall 101 ............................. me.executeDownloadRequest([tAssetId, tDownloadURL, tAllowIndexing])
  [563] ret
end

on executeDownloadRequest me, tParams
  [  0] getparam 1 .............................. <tParams>
  [  2] pushint8 1 .............................. <1>
  [  4] pusharglist 2 ........................... <tParams, 1>
  [  6] objcall 54 .............................. <tParams[1]>
  [  8] setlocal 0 .............................. tAssetId = tParams[1]
  [ 10] getparam 1 .............................. <tParams>
  [ 12] pushint8 2 .............................. <2>
  [ 14] pusharglist 2 ........................... <tParams, 2>
  [ 16] objcall 54 .............................. <tParams[2]>
  [ 18] setlocal 1 .............................. tDownloadURL = tParams[2]
  [ 20] getparam 1 .............................. <tParams>
  [ 22] pushint8 3 .............................. <3>
  [ 24] pusharglist 2 ........................... <tParams, 3>
  [ 26] objcall 54 .............................. <tParams[3]>
  [ 28] setlocal 2 .............................. tAllowIndexing = tParams[3]
  [ 30] getlocal 1 .............................. <tDownloadURL>
  [ 32] pushint8 1 .............................. <1>
  [ 34] pushint8 1 .............................. <1>
  [ 36] getlocal 2 .............................. <tAllowIndexing>
  [ 38] pusharglist 4 ........................... <tDownloadURL, 1, 1, tAllowIndexing>
  [ 40] extcall 180 ............................. <startCastLoad(tDownloadURL, 1, 1, tAllowIndexing)>
  [ 42] setlocal 3 .............................. tDownloadRefId = startCastLoad(tDownloadURL, 1, 1, tAllowIndexing)
  [ 44] getlocal 3 .............................. <tDownloadRefId>
  [ 46] pushsymb 96 ............................. <#handleCompletedCastDownload>
  [ 48] getparam 0 .............................. <me>
  [ 50] pusharglist 1 ........................... <me>
  [ 52] objcall 39 .............................. <me.getID()>
  [ 54] getlocal 0 .............................. <tAssetId>
  [ 56] pusharglistnoret 4 ...................... <tDownloadRefId, #handleCompletedCastDownload, me.getID(), tAssetId>
  [ 58] extcall 181 ............................. registerCastloadCallback(tDownloadRefId, #handleCompletedCastDownload, me.getID(), tAssetId)
  [ 60] ret
end

on acquireAssetsFromCast me, tCastNum, tAssetId
  [  0] getparam 2 .............................. <tAssetId>
  [  2] pusharglist 1 ........................... <tAssetId>
  [  4] extcall 130 ............................. <voidp(tAssetId)>
  [  6] jmpifz [ 13] ............................ if voidp(tAssetId) then
  [  9] pushcons 11 ............................. <EMPTY>
  [ 11] setparam 2 .............................. tAssetId = EMPTY
  [ 13] getparam 1 .............................. <tCastNum>
  [ 15] pusharglist 1 ........................... <tCastNum>
  [ 17] extcall 183 ............................. <castLib(tCastNum)>
  [ 19] setlocal 0 .............................. tCast = castLib(tCastNum)
  [ 21] getlocal 0 .............................. <tCast>
  [ 23] pusharglist 1 ........................... <tCast>
  [ 25] extcall 55 .............................. <ilk(tCast)>
  [ 27] pushsymb 183 ............................ <#castLib>
  [ 29] nteq .................................... <ilk(tCast) <> #castLib>
  [ 30] jmpifz [ 50] ............................ if ilk(tCast) <> #castLib then
  [ 33] getparam 0 .............................. <me>
  [ 35] pushcons 34 ............................. <"Download seems invalid, item is not a cast!">
  [ 37] pushsymb 102 ............................ <#acquireAssetsFromCast>
  [ 39] pushsymb 24 ............................. <#minor>
  [ 41] pusharglistnoret 4 ...................... <me, "Download seems invalid, item is not a cast!", #acquireAssetsFromCast, #minor>
  [ 43] extcall 23 .............................. error(me, "Download seems invalid, item is not a cast!", #acquireAssetsFromCast, #minor)
  [ 45] pushzero ................................ <0>
  [ 46] pusharglistnoret 1 ...................... <0>
  [ 48] extcall 21 .............................. return 0
  [ 50] pusharglist 0 ........................... <[:]>
  [ 52] pushproplist ............................ <[:]>
  [ 53] setlocal 1 .............................. tSavedPaletteRefs = [:]
  [ 55] pushint8 1 .............................. <1>
  [ 57] setlocal 2 .............................. tFirst = 1
  [ 59] getlocal 0 .............................. <tCast>
  [ 61] getobjprop 184 .......................... <tCast.number>
  [ 63] pushint8 2 .............................. <2>
  [ 65] get 8 ................................... <the number of castMembers of castLib the number of tCast>
  [ 67] setlocal 3 .............................. tLast = the number of castMembers of castLib the number of tCast
  [ 69] pushzero ................................ <0>
  [ 70] setlocal 4 .............................. tDone = 0
  [ 72] getlocal 4 .............................. <tDone>
  [ 74] not ..................................... <not tDone>
  [ 75] jmpifz [561] ............................ repeat while not tDone
  [ 78] pushint8 1 .............................. <1>
  [ 80] setlocal 4 .............................. tDone = 1
  [ 82] getlocal 3 .............................. <tLast>
  [ 84] setlocal 5 .............................. tCurrentLast = tLast
  [ 86] getlocal 2 .............................. <tFirst>
  [ 88] setlocal 6
  [ 90] getlocal 6
  [ 92] getlocal 5 .............................. <tCurrentLast>
  [ 94] lteq
  [ 95] jmpifz [558] ............................ repeat with tMemNo = tFirst to tCurrentLast
  [ 98] getlocal 6 .............................. <tMemNo>
  [100] getlocal 0 .............................. <tCast>
  [102] getobjprop 184 .......................... <tCast.number>
  [104] pusharglist 2 ........................... <tMemNo, tCast.number>
  [106] extcall 44 .............................. <member(tMemNo, tCast.number)>
  [108] setlocal 7 .............................. tmember = member(tMemNo, tCast.number)
  [110] getlocal 7 .............................. <tmember>
  [112] getobjprop 65 ........................... <tmember.type>
  [114] setlocal 8 .............................. tMemType = tmember.type
  [116] getlocal 7 .............................. <tmember>
  [118] getobjprop 185 .......................... <tmember.name>
  [120] setlocal 9 .............................. tMemName = tmember.name
  [122] getlocal 8 .............................. <tMemType>
  [124] peek 0 .................................. case tMemType of
  [126] pushsymb 186 ............................ <#bitmap>
  [128] eq
  [129] jmpifz [213] ............................ (case) #bitmap:
  [132] getlocal 9 .............................. <tMemName>
  [134] getprop 119 ............................. <pBinCastName>
  [136] pusharglist 2 ........................... <tMemName, pBinCastName>
  [138] extcall 44 .............................. <member(tMemName, pBinCastName)>
  [140] getobjprop 185 .......................... <member(tMemName, pBinCastName).name>
  [142] getlocal 9 .............................. <tMemName>
  [144] nteq .................................... <member(tMemName, pBinCastName).name <> tMemName>
  [145] jmpifz [210] ............................ if member(tMemName, pBinCastName).name <> tMemName then
  [148] getlocal 7 .............................. <tmember>
  [150] getobjprop 187 .......................... <tmember.paletteRef>
  [152] pusharglist 1 ........................... <tmember.paletteRef>
  [154] extcall 55 .............................. <ilk(tmember.paletteRef)>
  [156] pushsymb 188 ............................ <#symbol>
  [158] nteq .................................... <ilk(tmember.paletteRef) <> #symbol>
  [159] jmpifz [200] ............................ if ilk(tmember.paletteRef) <> #symbol then
  [162] getlocal 7 .............................. <tmember>
  [164] getobjprop 185 .......................... <tmember.name>
  [166] setlocal 10 ............................. tSourceMemName = tmember.name
  [168] getparam 0 .............................. <me>
  [170] getlocal 10 ............................. <tSourceMemName>
  [172] getparam 2 .............................. <tAssetId>
  [174] pusharglist 3 ........................... <me, tSourceMemName, tAssetId>
  [176] objcall 104 ............................. <me.doAliasReplacing(tSourceMemName, tAssetId)>
  [178] setlocal 11 ............................. tAliasedMemName = me.doAliasReplacing(tSourceMemName, tAssetId)
  [180] getlocal 1 .............................. <tSavedPaletteRefs>
  [182] getlocal 11 ............................. <tAliasedMemName>
  [184] getlocal 7 .............................. <tmember>
  [186] getchainedprop 187 ...................... <tmember.paletteRef>
  [188] getobjprop 185 .......................... <tmember.paletteRef.name>
  [190] pusharglistnoret 3 ...................... <tSavedPaletteRefs, tAliasedMemName, tmember.paletteRef.name>
  [192] objcall 59 .............................. tSavedPaletteRefs[tAliasedMemName] = tmember.paletteRef.name
  [194] getlocal 7 .............................. <tmember>
  [196] pushsymb 189 ............................ <#systemMac>
  [198] setobjprop 187 .......................... tmember.paletteRef = #systemMac
  [200] getparam 0 .............................. <me>
  [202] getlocal 7 .............................. <tmember>
  [204] getparam 2 .............................. <tAssetId>
  [206] pusharglistnoret 3 ...................... <me, tmember, tAssetId>
  [208] objcall 103 ............................. me.copyMemberToBin(tmember, tAssetId)
  [210] jmp [546]
  [213] peek 0
  [215] pushsymb 190 ............................ <#palette>
  [217] eq
  [218] jmpifz [252] ............................ (case) #palette:
  [221] getlocal 9 .............................. <tMemName>
  [223] getprop 119 ............................. <pBinCastName>
  [225] pusharglist 2 ........................... <tMemName, pBinCastName>
  [227] extcall 44 .............................. <member(tMemName, pBinCastName)>
  [229] getobjprop 185 .......................... <member(tMemName, pBinCastName).name>
  [231] getlocal 9 .............................. <tMemName>
  [233] nteq .................................... <member(tMemName, pBinCastName).name <> tMemName>
  [234] jmpifz [249] ............................ if member(tMemName, pBinCastName).name <> tMemName then
  [237] getparam 0 .............................. <me>
  [239] getlocal 7 .............................. <tmember>
  [241] pusharglist 0 ........................... <>
  [243] extcall 82 .............................. <VOID>
  [245] pusharglistnoret 3 ...................... <me, tmember, VOID>
  [247] objcall 103 ............................. me.copyMemberToBin(tmember, VOID)
  [249] jmp [546]
  [252] peek 0
  [254] pushsymb 35 ............................. <#field>
  [256] eq
  [257] jmpifz [511] ............................ (case) #field:
  [260] getlocal 7 .............................. <tmember>
  [262] getobjprop 56 ........................... <tmember.text>
  [264] setlocal 12 ............................. tSourceText = tmember.text
  [266] getparam 0 .............................. <me>
  [268] getlocal 12 ............................. <tSourceText>
  [270] getparam 2 .............................. <tAssetId>
  [272] pusharglist 3 ........................... <me, tSourceText, tAssetId>
  [274] objcall 104 ............................. <me.doAliasReplacing(tSourceText, tAssetId)>
  [276] setlocal 13 ............................. tAliasedText = me.doAliasReplacing(tSourceText, tAssetId)
  [278] getlocal 7 .............................. <tmember>
  [280] getlocal 13 ............................. <tAliasedText>
  [282] setobjprop 56 ........................... tmember.text = tAliasedText
  [284] getlocal 9 .............................. <tMemName>
  [286] pushcons 35 ............................. <"asset.index">
  [288] eq ...................................... <tMemName = "asset.index">
  [289] jmpifz [439] ............................ if tMemName = "asset.index" then / else
  [292] pushcons 36 ............................. <"room.classes.container">
  [294] pusharglist 1 ........................... <"room.classes.container">
  [296] extcall 28 .............................. <getVariable("room.classes.container")>
  [298] pusharglist 1 ........................... <getVariable("room.classes.container")>
  [300] extcall 151 ............................. <getObject(getVariable("room.classes.container"))>
  [302] setlocal 14 ............................. tClassesContainer = getObject(getVariable("room.classes.container"))
  [304] pushint8 1 .............................. <1>
  [306] setlocal 15
  [308] getlocal 15
  [310] getlocal 7 .............................. <tmember>
  [312] getobjprop 191 .......................... <tmember.lineCount>
  [314] lteq
  [315] jmpifz [436] ............................ repeat with i = 1 to tmember.lineCount
  [318] getlocal 7 .............................. <tmember>
  [320] pushsymb 57 ............................. <#line>
  [322] getlocal 15 ............................. <i>
  [324] pusharglist 3 ........................... <tmember, #line, i>
  [326] objcall 58 .............................. <tmember.line[i]>
  [328] setlocal 16 ............................. tLine = tmember.line[i]
  [330] getlocal 16 ............................. <tLine>
  [332] pusharglist 1 ........................... <tLine>
  [334] extcall 192 ............................. <stringp(tLine)>
  [336] jmpifz [427] ............................ if stringp(tLine) then
  [339] getlocal 16 ............................. <tLine>
  [341] getobjprop 123 .......................... <tLine.length>
  [343] pushint8 3 .............................. <3>
  [345] gt ...................................... <tLine.length > 3>
  [346] jmpifz [427] ............................ if tLine.length > 3 then
  [349] getlocal 16 ............................. <tLine>
  [351] pusharglist 1 ........................... <tLine>
  [353] extcall 63 .............................. <value(tLine)>
  [355] setlocal 17 ............................. tLineData = value(tLine)
  [357] getlocal 17 ............................. <tLineData>
  [359] pushsymb 193 ............................ <#id>
  [361] pusharglist 2 ........................... <tLineData, #id>
  [363] objcall 54 .............................. <tLineData[#id]>
  [365] setparam 2 .............................. tAssetId = tLineData[#id]
  [367] getprop 112 ............................. <pDownloadedAssets>
  [369] getparam 2 .............................. <tAssetId>
  [371] pushsymb 124 ............................ <#downloaded>
  [373] pusharglistnoret 3 ...................... <pDownloadedAssets, tAssetId, #downloaded>
  [375] objcall 59 .............................. pDownloadedAssets[tAssetId] = #downloaded
  [377] pushcons 29 ............................. <"s_">
  [379] getparam 2 .............................. <tAssetId>
  [381] pusharglist 2 ........................... <"s_", tAssetId>
  [383] extcall 194 ............................. <offset("s_", tAssetId)>
  [385] pushint8 1 .............................. <1>
  [387] eq ...................................... <offset("s_", tAssetId) = 1>
  [388] jmpifz [407] ............................ if offset("s_", tAssetId) = 1 then
  [391] getparam 2 .............................. <tAssetId>
  [393] pushsymb 195 ............................ <#char>
  [395] pushint8 3 .............................. <3>
  [397] getparam 2 .............................. <tAssetId>
  [399] getobjprop 123 .......................... <tAssetId.length>
  [401] pusharglist 4 ........................... <tAssetId, #char, 3, tAssetId.length>
  [403] objcall 58 .............................. <tAssetId.char[3..tAssetId.length]>
  [405] setparam 2 .............................. tAssetId = tAssetId.char[3..tAssetId.length]
  [407] getlocal 17 ............................. <tLineData>
  [409] pushsymb 196 ............................ <#classes>
  [411] pusharglist 2 ........................... <tLineData, #classes>
  [413] objcall 54 .............................. <tLineData[#classes]>
  [415] setlocal 18 ............................. tAssetClasses = tLineData[#classes]
  [417] getlocal 14 ............................. <tClassesContainer>
  [419] getparam 2 .............................. <tAssetId>
  [421] getlocal 18 ............................. <tAssetClasses>
  [423] pusharglistnoret 3 ...................... <tClassesContainer, tAssetId, tAssetClasses>
  [425] objcall 197 ............................. tClassesContainer.set(tAssetId, tAssetClasses)
  [427] pushint8 1
  [429] getlocal 15
  [431] add
  [432] setlocal 15
  [434] endrepeat [308]
  [436] jmp [508]
  [439] getlocal 9 .............................. <tMemName>
  [441] pushcons 37 ............................. <"memberalias.index">
  [443] eq ...................................... <tMemName = "memberalias.index">
  [444] jmpifz [484] ............................ if tMemName = "memberalias.index" then / else
  [447] getlocal 6 .............................. <tMemNo>
  [449] getlocal 3 .............................. <tLast>
  [451] eq ...................................... <tMemNo = tLast>
  [452] jmpifz [470] ............................ if tMemNo = tLast then / else
  [455] pusharglist 0 ........................... <>
  [457] extcall 198 ............................. <getResourceManager()>
  [459] getlocal 9 .............................. <tMemName>
  [461] getparam 1 .............................. <tCastNum>
  [463] pusharglistnoret 3 ...................... <getResourceManager(), tMemName, tCastNum>
  [465] objcall 199 ............................. getResourceManager().readAliasIndexesFromField(tMemName, tCastNum)
  [467] jmp [481]
  [470] pushzero ................................ <0>
  [471] setlocal 4 .............................. tDone = 0
  [473] getlocal 6 .............................. <tMemNo>
  [475] setlocal 2 .............................. tFirst = tMemNo
  [477] getlocal 6 .............................. <tMemNo>
  [479] setlocal 3 .............................. tLast = tMemNo
  [481] jmp [508]
  [484] getlocal 9 .............................. <tMemName>
  [486] pushcons 38 ............................. <".props">
  [488] containsstr ............................. <tMemName contains ".props">
  [489] getlocal 9 .............................. <tMemName>
  [491] pushcons 39 ............................. <".data">
  [493] containsstr ............................. <tMemName contains ".data">
  [494] or ...................................... <(tMemName contains ".props") or (tMemName contains ".data")>
  [495] jmpifz [508] ............................ if (tMemName contains ".props") or (tMemName contains ".data") then
  [498] getparam 0 .............................. <me>
  [500] getlocal 7 .............................. <tmember>
  [502] getparam 2 .............................. <tAssetId>
  [504] pusharglistnoret 3 ...................... <me, tmember, tAssetId>
  [506] objcall 103 ............................. me.copyMemberToBin(tmember, tAssetId)
  [508] jmp [546]
  [511] peek 0
  [513] pushsymb 200 ............................ <#script>
  [515] eq
  [516] jmpifz [530] ............................ (case) #script:
  [519] getparam 0 .............................. <me>
  [521] getlocal 7 .............................. <tmember>
  [523] pusharglistnoret 2 ...................... <me, tmember>
  [525] objcall 103 ............................. me.copyMemberToBin(tmember)
  [527] jmp [546]
  [530] peek 0
  [532] pushsymb 166 ............................ <#sound>
  [534] eq
  [535] jmpifz [546] ............................ (case) #sound:
  [538] getparam 0 .............................. <me>
  [540] getlocal 7 .............................. <tmember>
  [542] pusharglistnoret 2 ...................... <me, tmember>
  [544] objcall 103 ............................. me.copyMemberToBin(tmember)
  [546] pop 1 ................................... end case
  [548] pushint8 1
  [550] getlocal 6
  [552] add
  [553] setlocal 6
  [555] endrepeat [ 90]
  [558] endrepeat [ 72]
  [561] pushint8 1 .............................. <1>
  [563] setlocal 15
  [565] getlocal 15
  [567] getlocal 1 .............................. <tSavedPaletteRefs>
  [569] getobjprop 46 ........................... <tSavedPaletteRefs.count>
  [571] lteq
  [572] jmpifz [626] ............................ repeat with i = 1 to tSavedPaletteRefs.count
  [575] getlocal 1 .............................. <tSavedPaletteRefs>
  [577] getlocal 15 ............................. <i>
  [579] pusharglist 2 ........................... <tSavedPaletteRefs, i>
  [581] objcall 201 ............................. <tSavedPaletteRefs.getPropAt(i)>
  [583] setlocal 19 ............................. tMemberName = tSavedPaletteRefs.getPropAt(i)
  [585] getlocal 1 .............................. <tSavedPaletteRefs>
  [587] getlocal 19 ............................. <tMemberName>
  [589] pusharglist 2 ........................... <tSavedPaletteRefs, tMemberName>
  [591] objcall 54 .............................. <tSavedPaletteRefs[tMemberName]>
  [593] setlocal 20 ............................. tPaletteName = tSavedPaletteRefs[tMemberName]
  [595] getlocal 19 ............................. <tMemberName>
  [597] pusharglist 1 ........................... <tMemberName>
  [599] extcall 202 ............................. <getmemnum(tMemberName)>
  [601] pusharglist 1 ........................... <getmemnum(tMemberName)>
  [603] extcall 44 .............................. <member(getmemnum(tMemberName))>
  [605] getlocal 20 ............................. <tPaletteName>
  [607] pusharglist 1 ........................... <tPaletteName>
  [609] extcall 202 ............................. <getmemnum(tPaletteName)>
  [611] pusharglist 1 ........................... <getmemnum(tPaletteName)>
  [613] extcall 44 .............................. <member(getmemnum(tPaletteName))>
  [615] setobjprop 187 .......................... member(getmemnum(tMemberName)).paletteRef = member(getmemnum(tPaletteName))
  [617] pushint8 1
  [619] getlocal 15
  [621] add
  [622] setlocal 15
  [624] endrepeat [565]
  [626] ret
end

on copyMemberToBin me, tSourceMember, tTargetAssetClass
  [  0] getparam 2 .............................. <tTargetAssetClass>
  [  2] pusharglist 1 ........................... <tTargetAssetClass>
  [  4] extcall 130 ............................. <voidp(tTargetAssetClass)>
  [  6] jmpifz [ 13] ............................ if voidp(tTargetAssetClass) then
  [  9] pushcons 11 ............................. <EMPTY>
  [ 11] setparam 2 .............................. tTargetAssetClass = EMPTY
  [ 13] pushint8 1 .............................. <1>
  [ 15] setlocal 0 .............................. tAllowCopy = 1
  [ 17] getparam 1 .............................. <tSourceMember>
  [ 19] getobjprop 65 ........................... <tSourceMember.type>
  [ 21] pushsymb 223 ............................ <#empty>
  [ 23] eq ...................................... <tSourceMember.type = #empty>
  [ 24] jmpifz [ 33] ............................ if tSourceMember.type = #empty then / else
  [ 27] pushzero ................................ <0>
  [ 28] setlocal 0 .............................. tAllowCopy = 0
  [ 30] jmp [ 56]
  [ 33] getparam 1 .............................. <tSourceMember>
  [ 35] getobjprop 65 ........................... <tSourceMember.type>
  [ 37] pushsymb 200 ............................ <#script>
  [ 39] eq ...................................... <tSourceMember.type = #script>
  [ 40] jmpifz [ 56] ............................ if tSourceMember.type = #script then
  [ 43] getparam 1 .............................. <tSourceMember>
  [ 45] getobjprop 224 .......................... <tSourceMember.scriptType>
  [ 47] pushsymb 225 ............................ <#movie>
  [ 49] eq ...................................... <tSourceMember.scriptType = #movie>
  [ 50] jmpifz [ 56] ............................ if tSourceMember.scriptType = #movie then
  [ 53] pushzero ................................ <0>
  [ 54] setlocal 0 .............................. tAllowCopy = 0
  [ 56] getlocal 0 .............................. <tAllowCopy>
  [ 58] jmpifz [191] ............................ if tAllowCopy then
  [ 61] getparam 1 .............................. <tSourceMember>
  [ 63] getobjprop 185 .......................... <tSourceMember.name>
  [ 65] pusharglist 1 ........................... <tSourceMember.name>
  [ 67] extcall 202 ............................. <getmemnum(tSourceMember.name)>
  [ 69] pushzero ................................ <0>
  [ 70] eq ...................................... <getmemnum(tSourceMember.name) = 0>
  [ 71] jmpifz [191] ............................ if getmemnum(tSourceMember.name) = 0 then
  [ 74] getparam 1 .............................. <tSourceMember>
  [ 76] getobjprop 185 .......................... <tSourceMember.name>
  [ 78] setlocal 1 .............................. tSourceMemName = tSourceMember.name
  [ 80] getparam 0 .............................. <me>
  [ 82] getlocal 1 .............................. <tSourceMemName>
  [ 84] getparam 2 .............................. <tTargetAssetClass>
  [ 86] pusharglist 3 ........................... <me, tSourceMemName, tTargetAssetClass>
  [ 88] objcall 104 ............................. <me.doAliasReplacing(tSourceMemName, tTargetAssetClass)>
  [ 90] setlocal 2 .............................. tTargetMemName = me.doAliasReplacing(tSourceMemName, tTargetAssetClass)
  [ 92] getlocal 2 .............................. <tTargetMemName>
  [ 94] pusharglist 1 ........................... <tTargetMemName>
  [ 96] extcall 202 ............................. <getmemnum(tTargetMemName)>
  [ 98] setlocal 3 .............................. tTargetMemberNum = getmemnum(tTargetMemName)
  [100] getlocal 3 .............................. <tTargetMemberNum>
  [102] pushzero ................................ <0>
  [103] eq ...................................... <tTargetMemberNum = 0>
  [104] jmpifz [146] ............................ if tTargetMemberNum = 0 then
  [107] getlocal 2 .............................. <tTargetMemName>
  [109] getparam 1 .............................. <tSourceMember>
  [111] getobjprop 65 ........................... <tSourceMember.type>
  [113] pushzero ................................ <0>
  [114] pusharglist 3 ........................... <tTargetMemName, tSourceMember.type, 0>
  [116] extcall 34 .............................. <createMember(tTargetMemName, tSourceMember.type, 0)>
  [118] setlocal 3 .............................. tTargetMemberNum = createMember(tTargetMemName, tSourceMember.type, 0)
  [120] getlocal 3 .............................. <tTargetMemberNum>
  [122] pushzero ................................ <0>
  [123] eq ...................................... <tTargetMemberNum = 0>
  [124] jmpifz [146] ............................ if tTargetMemberNum = 0 then
  [127] getparam 0 .............................. <me>
  [129] pushcons 40 ............................. <"Could not create a new member for copying: ">
  [131] getlocal 2 .............................. <tTargetMemName>
  [133] joinstr ................................. <"Could not create a new member for copying: " & tTargetMemName>
  [134] pushsymb 103 ............................ <#copyMemberToBin>
  [136] pushsymb 134 ............................ <#major>
  [138] pusharglist 4 ........................... <me, "Could not create a new member for copying: " & tTargetMemName, #copyMemberToBin, #major>
  [140] extcall 23 .............................. <error(me, "Could not create a new member for copying: " & tTargetMemName, #copyMemberToBin, #major)>
  [142] pusharglistnoret 1 ...................... <error(me, "Could not create a new member for copying: " & tTargetMemName, #copyMemberToBin, #major)>
  [144] extcall 21 .............................. return error(me, "Could not create a new member for copying: " & tTargetMemName, #copyMemberToBin, #major)
  [146] getlocal 3 .............................. <tTargetMemberNum>
  [148] pusharglist 1 ........................... <tTargetMemberNum>
  [150] extcall 44 .............................. <member(tTargetMemberNum)>
  [152] setlocal 4 .............................. tTargetMember = member(tTargetMemberNum)
  [154] getlocal 4 .............................. <tTargetMember>
  [156] getparam 1 .............................. <tSourceMember>
  [158] getobjprop 226 .......................... <tSourceMember.media>
  [160] setobjprop 226 .......................... tTargetMember.media = tSourceMember.media
  [162] getparam 1 .............................. <tSourceMember>
  [164] getobjprop 65 ........................... <tSourceMember.type>
  [166] pushsymb 186 ............................ <#bitmap>
  [168] eq ...................................... <tSourceMember.type = #bitmap>
  [169] jmpifz [191] ............................ if tSourceMember.type = #bitmap then
  [172] getparam 1 .............................. <tSourceMember>
  [174] getchainedprop 227 ...................... <tSourceMember.image>
  [176] getobjprop 228 .......................... <tSourceMember.image.width>
  [178] pushzero ................................ <0>
  [179] eq ...................................... <tSourceMember.image.width = 0>
  [180] jmpifz [191] ............................ if tSourceMember.image.width = 0 then
  [183] getlocal 4 .............................. <tTargetMember>
  [185] getparam 1 .............................. <tSourceMember>
  [187] getobjprop 227 .......................... <tSourceMember.image>
  [189] setobjprop 227 .......................... tTargetMember.image = tSourceMember.image
  [191] ret
end

on doAliasReplacing me, tSourceString, tTargetAssetClass
  [  0] getparam 1 .............................. <tSourceString>
  [  2] setlocal 0 .............................. tAliasedSTring = tSourceString
  [  4] getparam 2 .............................. <tTargetAssetClass>
  [  6] pushint8 1 .............................. <1>
  [  8] pushint8 2 .............................. <2>
  [ 10] pusharglist 3 ........................... <tTargetAssetClass, 1, 2>
  [ 12] extcall 168 ............................. <chars(tTargetAssetClass, 1, 2)>
  [ 14] pushcons 29 ............................. <"s_">
  [ 16] eq ...................................... <chars(tTargetAssetClass, 1, 2) = "s_">
  [ 17] jmpifz [ 34] ............................ if chars(tTargetAssetClass, 1, 2) = "s_" then
  [ 20] getparam 2 .............................. <tTargetAssetClass>
  [ 22] pushint8 3 .............................. <3>
  [ 24] getparam 2 .............................. <tTargetAssetClass>
  [ 26] getobjprop 123 .......................... <tTargetAssetClass.length>
  [ 28] pusharglist 3 ........................... <tTargetAssetClass, 3, tTargetAssetClass.length>
  [ 30] extcall 168 ............................. <chars(tTargetAssetClass, 3, tTargetAssetClass.length)>
  [ 32] setparam 2 .............................. tTargetAssetClass = chars(tTargetAssetClass, 3, tTargetAssetClass.length)
  [ 34] getprop 116 ............................. <pAliasList>
  [ 36] getparam 2 .............................. <tTargetAssetClass>
  [ 38] pusharglist 2 ........................... <pAliasList, tTargetAssetClass>
  [ 40] objcall 54 .............................. <pAliasList[tTargetAssetClass]>
  [ 42] pusharglist 1 ........................... <pAliasList[tTargetAssetClass]>
  [ 44] extcall 130 ............................. <voidp(pAliasList[tTargetAssetClass])>
  [ 46] not ..................................... <not voidp(pAliasList[tTargetAssetClass])>
  [ 47] jmpifz [ 82] ............................ if not voidp(pAliasList[tTargetAssetClass]) then
  [ 50] getprop 116 ............................. <pAliasList>
  [ 52] getparam 2 .............................. <tTargetAssetClass>
  [ 54] pusharglist 2 ........................... <pAliasList, tTargetAssetClass>
  [ 56] objcall 22 .............................. <pAliasList.getaProp(tTargetAssetClass)>
  [ 58] setlocal 1 .............................. tSourceAssetClass = pAliasList.getaProp(tTargetAssetClass)
  [ 60] getlocal 1 .............................. <tSourceAssetClass>
  [ 62] pusharglist 1 ........................... <tSourceAssetClass>
  [ 64] extcall 130 ............................. <voidp(tSourceAssetClass)>
  [ 66] not ..................................... <not voidp(tSourceAssetClass)>
  [ 67] jmpifz [ 82] ............................ if not voidp(tSourceAssetClass) then
  [ 70] getlocal 0 .............................. <tAliasedSTring>
  [ 72] getlocal 1 .............................. <tSourceAssetClass>
  [ 74] getparam 2 .............................. <tTargetAssetClass>
  [ 76] pusharglist 3 ........................... <tAliasedSTring, tSourceAssetClass, tTargetAssetClass>
  [ 78] extcall 33 .............................. <replaceChunks(tAliasedSTring, tSourceAssetClass, tTargetAssetClass)>
  [ 80] setlocal 0 .............................. tAliasedSTring = replaceChunks(tAliasedSTring, tSourceAssetClass, tTargetAssetClass)
  [ 82] getlocal 0 .............................. <tAliasedSTring>
  [ 84] pusharglistnoret 1 ...................... <tAliasedSTring>
  [ 86] extcall 21 .............................. return tAliasedSTring
  [ 88] ret
end

on setAssetAlias me, tOriginalClass, tAliasClass
  [  0] getparam 1 .............................. <tOriginalClass>
  [  2] pusharglist 1 ........................... <tOriginalClass>
  [  4] extcall 130 ............................. <voidp(tOriginalClass)>
  [  6] getparam 2 .............................. <tAliasClass>
  [  8] pusharglist 1 ........................... <tAliasClass>
  [ 10] extcall 130 ............................. <voidp(tAliasClass)>
  [ 12] and ..................................... <voidp(tOriginalClass) and voidp(tAliasClass)>
  [ 13] jmpifz [ 29] ............................ if voidp(tOriginalClass) and voidp(tAliasClass) then
  [ 16] pushzero ................................ <0>
  [ 17] setprop 118 ............................. pAliasListLoading = 0
  [ 19] pushint8 1 .............................. <1>
  [ 21] setprop 117 ............................. pAliasListReceived = 1
  [ 23] pushint8 1 .............................. <1>
  [ 25] pusharglistnoret 1 ...................... <1>
  [ 27] extcall 21 .............................. return 1
  [ 29] getprop 116 ............................. <pAliasList>
  [ 31] getparam 1 .............................. <tOriginalClass>
  [ 33] getparam 2 .............................. <tAliasClass>
  [ 35] pusharglistnoret 3 ...................... <pAliasList, tOriginalClass, tAliasClass>
  [ 37] objcall 59 .............................. pAliasList[tOriginalClass] = tAliasClass
  [ 39] getprop 116 ............................. <pAliasList>
  [ 41] pushcons 29 ............................. <"s_">
  [ 43] getparam 1 .............................. <tOriginalClass>
  [ 45] joinstr ................................. <"s_" & tOriginalClass>
  [ 46] pushcons 29 ............................. <"s_">
  [ 48] getparam 2 .............................. <tAliasClass>
  [ 50] joinstr ................................. <"s_" & tAliasClass>
  [ 51] pusharglistnoret 3 ...................... <pAliasList, "s_" & tOriginalClass, "s_" & tAliasClass>
  [ 53] objcall 59 .............................. pAliasList["s_" & tOriginalClass] = "s_" & tAliasClass
  [ 55] ret
end

on setFurniRevision me, tClass, tRevision, tIsFurni
  [  0] getparam 1 .............................. <tClass>
  [  2] pusharglist 1 ........................... <tClass>
  [  4] extcall 130 ............................. <voidp(tClass)>
  [  6] jmpifz [ 22] ............................ if voidp(tClass) then
  [  9] pushint8 1 .............................. <1>
  [ 11] setprop 114 ............................. pRevisionsReceived = 1
  [ 13] pushzero ................................ <0>
  [ 14] setprop 115 ............................. pRevisionsLoading = 0
  [ 16] pushint8 1 .............................. <1>
  [ 18] pusharglistnoret 1 ...................... <1>
  [ 20] extcall 21 .............................. return 1
  [ 22] pushcons 41 ............................. <"*">
  [ 24] getparam 1 .............................. <tClass>
  [ 26] pusharglist 2 ........................... <"*", tClass>
  [ 28] extcall 194 ............................. <offset("*", tClass)>
  [ 30] setlocal 0 .............................. tOffset = offset("*", tClass)
  [ 32] getlocal 0 .............................. <tOffset>
  [ 34] jmpifz [ 54] ............................ if tOffset then
  [ 37] getparam 1 .............................. <tClass>
  [ 39] pushsymb 195 ............................ <#char>
  [ 41] pushint8 1 .............................. <1>
  [ 43] getlocal 0 .............................. <tOffset>
  [ 45] pushint8 1 .............................. <1>
  [ 47] sub ..................................... <tOffset - 1>
  [ 48] pusharglist 4 ........................... <tClass, #char, 1, tOffset - 1>
  [ 50] objcall 58 .............................. <tClass.char[1..tOffset - 1]>
  [ 52] setparam 1 .............................. tClass = tClass.char[1..tOffset - 1]
  [ 54] getprop 113 ............................. <pFurniRevisionList>
  [ 56] getparam 1 .............................. <tClass>
  [ 58] pusharglist 2 ........................... <pFurniRevisionList, tClass>
  [ 60] objcall 54 .............................. <pFurniRevisionList[tClass]>
  [ 62] pusharglist 1 ........................... <pFurniRevisionList[tClass]>
  [ 64] extcall 130 ............................. <voidp(pFurniRevisionList[tClass])>
  [ 66] not ..................................... <not voidp(pFurniRevisionList[tClass])>
  [ 67] jmpifz [ 95] ............................ if not voidp(pFurniRevisionList[tClass]) then / else
  [ 70] getprop 113 ............................. <pFurniRevisionList>
  [ 72] getparam 1 .............................. <tClass>
  [ 74] getprop 113 ............................. <pFurniRevisionList>
  [ 76] getparam 1 .............................. <tClass>
  [ 78] pusharglist 2 ........................... <pFurniRevisionList, tClass>
  [ 80] objcall 54 .............................. <pFurniRevisionList[tClass]>
  [ 82] getparam 2 .............................. <tRevision>
  [ 84] pusharglist 2 ........................... <pFurniRevisionList[tClass], tRevision>
  [ 86] extcall 240 ............................. <max(pFurniRevisionList[tClass], tRevision)>
  [ 88] pusharglistnoret 3 ...................... <pFurniRevisionList, tClass, max(pFurniRevisionList[tClass], tRevision)>
  [ 90] objcall 59 .............................. pFurniRevisionList[tClass] = max(pFurniRevisionList[tClass], tRevision)
  [ 92] jmp [105]
  [ 95] getprop 113 ............................. <pFurniRevisionList>
  [ 97] getparam 1 .............................. <tClass>
  [ 99] getparam 2 .............................. <tRevision>
  [101] pusharglistnoret 3 ...................... <pFurniRevisionList, tClass, tRevision>
  [103] objcall 59 .............................. pFurniRevisionList[tClass] = tRevision
  [105] pushint8 1 .............................. <1>
  [107] pusharglistnoret 1 ...................... <1>
  [109] extcall 21 .............................. return 1
  [111] ret
end
