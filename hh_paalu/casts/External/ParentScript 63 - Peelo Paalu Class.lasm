property pUpOrDown

on prepare me
  [  0] pushsymb 282 ............................ <#up>
  [  3] setprop 281 ............................. pUpOrDown = #up
  [  6] getparam 0 .............................. <me>
  [  8] pushint16 1000 .......................... <1000>
  [ 11] pusharglist 1 ........................... <1000>
  [ 13] extcall 268 ............................. <random(1000)>
  [ 16] pushint16 800 ........................... <800>
  [ 19] add ..................................... <random(1000) + 800>
  [ 20] pushsymb 280 ............................ <#bump>
  [ 23] pusharglistnoret 3 ...................... <me, random(1000) + 800, #bump>
  [ 25] objcall 283 ............................. me.delay(random(1000) + 800, #bump)
  [ 28] pushint8 1 .............................. <1>
  [ 30] pusharglistnoret 1 ...................... <1>
  [ 32] extcall 12 .............................. return 1
  [ 34] ret
end

on bump me
  [  0] getparam 0 .............................. <me>
  [  2] pushsymb 284 ............................ <#pSprList>
  [  5] pusharglist 2 ........................... <me, #pSprList>
  [  7] objcall 62 .............................. <me.pSprList.count>
  [  9] pushzero ................................ <0>
  [ 10] gt ...................................... <me.pSprList.count > 0>
  [ 11] jmpifz [109] ............................ if me.pSprList.count > 0 then
  [ 14] getprop 281 ............................. <pUpOrDown>
  [ 17] pushsymb 282 ............................ <#up>
  [ 20] eq ...................................... <pUpOrDown = #up>
  [ 21] jmpifz [ 42] ............................ if pUpOrDown = #up then / else
  [ 24] pushsymb 285 ............................ <#down>
  [ 27] setprop 281 ............................. pUpOrDown = #down
  [ 30] pushzero ................................ <0>
  [ 31] pushint8 1 .............................. <1>
  [ 33] pusharglist 2 ........................... <0, 1>
  [ 35] extcall 38 .............................. <point(0, 1)>
  [ 37] setlocal 0 .............................. tOff = point(0, 1)
  [ 39] jmp [ 58]
  [ 42] pushsymb 282 ............................ <#up>
  [ 45] setprop 281 ............................. pUpOrDown = #up
  [ 48] pushzero ................................ <0>
  [ 49] pushint8 1 .............................. <1>
  [ 51] inv ..................................... <-1>
  [ 52] pusharglist 2 ........................... <0, -1>
  [ 54] extcall 38 .............................. <point(0, -1)>
  [ 56] setlocal 0 .............................. tOff = point(0, -1)
  [ 58] getparam 0 .............................. <me>
  [ 60] pushsymb 284 ............................ <#pSprList>
  [ 63] pushint8 1 .............................. <1>
  [ 65] pusharglist 3 ........................... <me, #pSprList, 1>
  [ 67] objcall 152 ............................. <me.pSprList[1]>
  [ 69] getparam 0 .............................. <me>
  [ 71] pushsymb 284 ............................ <#pSprList>
  [ 74] pushint8 1 .............................. <1>
  [ 76] pusharglist 3 ........................... <me, #pSprList, 1>
  [ 78] objcall 152 ............................. <me.pSprList[1]>
  [ 80] getobjprop 105 .......................... <me.pSprList[1].loc>
  [ 82] getlocal 0 .............................. <tOff>
  [ 84] add ..................................... <me.pSprList[1].loc + tOff>
  [ 85] setobjprop 105 .......................... me.pSprList[1].loc = me.pSprList[1].loc + tOff
  [ 87] getparam 0 .............................. <me>
  [ 89] pushint16 1000 .......................... <1000>
  [ 92] pusharglist 1 ........................... <1000>
  [ 94] extcall 268 ............................. <random(1000)>
  [ 97] pushint16 800 ........................... <800>
  [100] add ..................................... <random(1000) + 800>
  [101] pushsymb 280 ............................ <#bump>
  [104] pusharglistnoret 3 ...................... <me, random(1000) + 800, #bump>
  [106] objcall 283 ............................. me.delay(random(1000) + 800, #bump)
  [109] ret
end
