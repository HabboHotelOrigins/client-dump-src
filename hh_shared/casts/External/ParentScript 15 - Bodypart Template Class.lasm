property ancestor, pPart, pmodel, pDirection, pDrawProps, pAction, pActionLh, pActionRh, pMemString, pXFix, pYFix, pCacheImage, pCacheRectA, pCacheRectB

on deconsturct me
  [  0] pusharglist 0 ........................... <>
  [  2] extcall 30 .............................. <VOID>
  [  4] setprop 379 ............................. ancestor = VOID
  [  7] pushint8 1 .............................. <1>
  [  9] pusharglistnoret 1 ...................... <1>
  [ 11] extcall 44 .............................. return 1
  [ 13] ret
end

on define me, tPart, tmodel, tColor, tDirection, tAction, tAncestor
  [  0] getparam 6 .............................. <tAncestor>
  [  2] setprop 379 ............................. ancestor = tAncestor
  [  5] getparam 1 .............................. <tPart>
  [  7] setprop 380 ............................. pPart = tPart
  [ 10] getparam 2 .............................. <tmodel>
  [ 12] setprop 381 ............................. pmodel = tmodel
  [ 15] pushsymb 383 ............................ <#maskImage>
  [ 18] pushzero ................................ <0>
  [ 19] pushsymb 58 ............................. <#ink>
  [ 21] pushzero ................................ <0>
  [ 22] pushsymb 384 ............................ <#bgColor>
  [ 25] pushzero ................................ <0>
  [ 26] pusharglist 6 ........................... <[#maskImage: 0, #ink: 0, #bgColor: 0]>
  [ 28] pushproplist ............................ <[#maskImage: 0, #ink: 0, #bgColor: 0]>
  [ 29] setprop 382 ............................. pDrawProps = [#maskImage: 0, #ink: 0, #bgColor: 0]
  [ 32] pushzero ................................ <0>
  [ 33] setprop 385 ............................. pCacheImage = 0
  [ 36] pushzero ................................ <0>
  [ 37] pushzero ................................ <0>
  [ 38] pushzero ................................ <0>
  [ 39] pushzero ................................ <0>
  [ 40] pusharglist 4 ........................... <0, 0, 0, 0>
  [ 42] extcall 387 ............................. <rect(0, 0, 0, 0)>
  [ 45] setprop 386 ............................. pCacheRectA = rect(0, 0, 0, 0)
  [ 48] pushzero ................................ <0>
  [ 49] pushzero ................................ <0>
  [ 50] pushzero ................................ <0>
  [ 51] pushzero ................................ <0>
  [ 52] pusharglist 4 ........................... <0, 0, 0, 0>
  [ 54] extcall 387 ............................. <rect(0, 0, 0, 0)>
  [ 57] setprop 388 ............................. pCacheRectB = rect(0, 0, 0, 0)
  [ 60] getparam 0 .............................. <me>
  [ 62] pusharglistnoret 1 ...................... <me>
  [ 64] localcall 10 ............................ defineInk(me)
  [ 66] getparam 0 .............................. <me>
  [ 68] getparam 3 .............................. <tColor>
  [ 70] pusharglistnoret 2 ...................... <me, tColor>
  [ 72] localcall 9 ............................. setColor(me, tColor)
  [ 74] getparam 4 .............................. <tDirection>
  [ 76] setprop 389 ............................. pDirection = tDirection
  [ 79] getparam 5 .............................. <tAction>
  [ 81] setprop 390 ............................. pAction = tAction
  [ 84] getparam 5 .............................. <tAction>
  [ 86] setprop 391 ............................. pActionLh = tAction
  [ 89] getparam 5 .............................. <tAction>
  [ 91] setprop 392 ............................. pActionRh = tAction
  [ 94] pushcons 0 .............................. <EMPTY>
  [ 96] setprop 393 ............................. pMemString = EMPTY
  [ 99] pushzero ................................ <0>
  [100] setprop 394 ............................. pXFix = 0
  [103] pushzero ................................ <0>
  [104] setprop 395 ............................. pYFix = 0
  [107] pushint8 1 .............................. <1>
  [109] pusharglistnoret 1 ...................... <1>
  [111] extcall 44 .............................. return 1
  [113] ret
end

on update me
  [  0] pushzero ................................ <0>
  [  1] setlocal 0 .............................. tAnimCounter = 0
  [  3] getprop 390 ............................. <pAction>
  [  6] setlocal 1 .............................. tAction = pAction
  [  8] getprop 380 ............................. <pPart>
  [ 11] setlocal 2 .............................. tPart = pPart
  [ 13] getparam 0 .............................. <me>
  [ 15] pushsymb 401 ............................ <#pFlipList>
  [ 18] getprop 389 ............................. <pDirection>
  [ 21] pushint8 1 .............................. <1>
  [ 23] add ..................................... <pDirection + 1>
  [ 24] pusharglist 3 ........................... <me, #pFlipList, pDirection + 1>
  [ 26] objcall 104 ............................. <me.pFlipList[pDirection + 1]>
  [ 28] setlocal 3 .............................. tdir = me.pFlipList[pDirection + 1]
  [ 30] pushzero ................................ <0>
  [ 31] setprop 394 ............................. pXFix = 0
  [ 34] pushzero ................................ <0>
  [ 35] setprop 395 ............................. pYFix = 0
  [ 38] getprop 380 ............................. <pPart>
  [ 41] peek 0 .................................. case pPart of
  [ 43] pushcons 1 .............................. <"bd">
  [ 45] nteq
  [ 46] jmpifz [ 65] ............................ (case) "bd", ...
  [ 49] peek 0
  [ 51] pushcons 2 .............................. <"lg">
  [ 53] nteq
  [ 54] jmpifz [ 65] ............................ (case) ..., "lg", ...
  [ 57] peek 0
  [ 59] pushcons 3 .............................. <"sh">
  [ 61] eq
  [ 62] jmpifz [ 84] ............................ (case) ..., "sh":
  [ 65] getprop 390 ............................. <pAction>
  [ 68] pushcons 4 .............................. <"wlk">
  [ 70] eq ...................................... <pAction = "wlk">
  [ 71] jmpifz [ 81] ............................ if pAction = "wlk" then
  [ 74] getparam 0 .............................. <me>
  [ 76] getobjprop 403 .......................... <me.pAnimCounter>
  [ 79] setlocal 0 .............................. tAnimCounter = me.pAnimCounter
  [ 81] jmp [590]
  [ 84] peek 0
  [ 86] pushcons 5 .............................. <"lh">
  [ 88] nteq
  [ 89] jmpifz [100] ............................ (case) "lh", ...
  [ 92] peek 0
  [ 94] pushcons 6 .............................. <"ls">
  [ 96] eq
  [ 97] jmpifz [234] ............................ (case) ..., "ls":
  [100] getprop 389 ............................. <pDirection>
  [103] getlocal 3 .............................. <tdir>
  [105] eq ...................................... <pDirection = tdir>
  [106] jmpifz [128] ............................ if pDirection = tdir then / else
  [109] getprop 391 ............................. <pActionLh>
  [112] pusharglist 1 ........................... <pActionLh>
  [114] extcall 71 .............................. <voidp(pActionLh)>
  [116] not ..................................... <not voidp(pActionLh)>
  [117] jmpifz [125] ............................ if not voidp(pActionLh) then
  [120] getprop 391 ............................. <pActionLh>
  [123] setlocal 1 .............................. tAction = pActionLh
  [125] jmp [144]
  [128] getprop 392 ............................. <pActionRh>
  [131] pusharglist 1 ........................... <pActionRh>
  [133] extcall 71 .............................. <voidp(pActionRh)>
  [135] not ..................................... <not voidp(pActionRh)>
  [136] jmpifz [144] ............................ if not voidp(pActionRh) then
  [139] getprop 392 ............................. <pActionRh>
  [142] setlocal 1 .............................. tAction = pActionRh
  [144] getlocal 1 .............................. <tAction>
  [146] pushcons 4 .............................. <"wlk">
  [148] eq ...................................... <tAction = "wlk">
  [149] jmpifz [162] ............................ if tAction = "wlk" then / else
  [152] getparam 0 .............................. <me>
  [154] getobjprop 403 .......................... <me.pAnimCounter>
  [157] setlocal 0 .............................. tAnimCounter = me.pAnimCounter
  [159] jmp [231]
  [162] getlocal 1 .............................. <tAction>
  [164] pushcons 7 .............................. <"wav">
  [166] eq ...................................... <tAction = "wav">
  [167] jmpifz [183] ............................ if tAction = "wav" then / else
  [170] getparam 0 .............................. <me>
  [172] getobjprop 403 .......................... <me.pAnimCounter>
  [175] pushint8 2 .............................. <2>
  [177] mod ..................................... <me.pAnimCounter mod 2>
  [178] setlocal 0 .............................. tAnimCounter = me.pAnimCounter mod 2
  [180] jmp [231]
  [183] pushcons 8 .............................. <"crr">
  [185] pushcons 9 .............................. <"drk">
  [187] pushcons 10 ............................. <"ohd">
  [189] pusharglist 3 ........................... <["crr", "drk", "ohd"]>
  [191] pushlist ................................ <["crr", "drk", "ohd"]>
  [192] getlocal 1 .............................. <tAction>
  [194] pusharglist 2 ........................... <["crr", "drk", "ohd"], tAction>
  [196] objcall 404 ............................. <["crr", "drk", "ohd"].getPos(tAction)>
  [199] pushzero ................................ <0>
  [200] nteq .................................... <["crr", "drk", "ohd"].getPos(tAction) <> 0>
  [201] jmpifz [231] ............................ if ["crr", "drk", "ohd"].getPos(tAction) <> 0 then
  [204] pushint8 40 ............................. <40>
  [206] inv ..................................... <-40>
  [207] setprop 394 ............................. pXFix = -40
  [210] pushcons 11 ............................. <"r">
  [212] getprop 380 ............................. <pPart>
  [215] pushsymb 102 ............................ <#char>
  [217] pushint8 2 .............................. <2>
  [219] pusharglist 3 ........................... <pPart, #char, 2>
  [221] objcall 104 ............................. <pPart.char[2]>
  [223] joinstr ................................. <"r" & pPart.char[2]>
  [224] setlocal 2 .............................. tPart = "r" & pPart.char[2]
  [226] getprop 389 ............................. <pDirection>
  [229] setlocal 3 .............................. tdir = pDirection
  [231] jmp [590]
  [234] peek 0
  [236] pushcons 12 ............................. <"rh">
  [238] nteq
  [239] jmpifz [250] ............................ (case) "rh", ...
  [242] peek 0
  [244] pushcons 13 ............................. <"rs">
  [246] eq
  [247] jmpifz [393] ............................ (case) ..., "rs":
  [250] getprop 389 ............................. <pDirection>
  [253] getlocal 3 .............................. <tdir>
  [255] eq ...................................... <pDirection = tdir>
  [256] jmpifz [278] ............................ if pDirection = tdir then / else
  [259] getprop 392 ............................. <pActionRh>
  [262] pusharglist 1 ........................... <pActionRh>
  [264] extcall 71 .............................. <voidp(pActionRh)>
  [266] not ..................................... <not voidp(pActionRh)>
  [267] jmpifz [275] ............................ if not voidp(pActionRh) then
  [270] getprop 392 ............................. <pActionRh>
  [273] setlocal 1 .............................. tAction = pActionRh
  [275] jmp [294]
  [278] getprop 391 ............................. <pActionLh>
  [281] pusharglist 1 ........................... <pActionLh>
  [283] extcall 71 .............................. <voidp(pActionLh)>
  [285] not ..................................... <not voidp(pActionLh)>
  [286] jmpifz [294] ............................ if not voidp(pActionLh) then
  [289] getprop 391 ............................. <pActionLh>
  [292] setlocal 1 .............................. tAction = pActionLh
  [294] getlocal 1 .............................. <tAction>
  [296] pushcons 4 .............................. <"wlk">
  [298] eq ...................................... <tAction = "wlk">
  [299] jmpifz [312] ............................ if tAction = "wlk" then / else
  [302] getparam 0 .............................. <me>
  [304] getobjprop 403 .......................... <me.pAnimCounter>
  [307] setlocal 0 .............................. tAnimCounter = me.pAnimCounter
  [309] jmp [390]
  [312] getlocal 1 .............................. <tAction>
  [314] pushcons 7 .............................. <"wav">
  [316] eq ...................................... <tAction = "wav">
  [317] jmpifz [354] ............................ if tAction = "wav" then / else
  [320] getparam 0 .............................. <me>
  [322] getobjprop 403 .......................... <me.pAnimCounter>
  [325] pushint8 2 .............................. <2>
  [327] mod ..................................... <me.pAnimCounter mod 2>
  [328] setlocal 0 .............................. tAnimCounter = me.pAnimCounter mod 2
  [330] pushcons 14 ............................. <"l">
  [332] getprop 380 ............................. <pPart>
  [335] pushsymb 102 ............................ <#char>
  [337] pushint8 2 .............................. <2>
  [339] pusharglist 3 ........................... <pPart, #char, 2>
  [341] objcall 104 ............................. <pPart.char[2]>
  [343] joinstr ................................. <"l" & pPart.char[2]>
  [344] setlocal 2 .............................. tPart = "l" & pPart.char[2]
  [346] getprop 389 ............................. <pDirection>
  [349] setlocal 3 .............................. tdir = pDirection
  [351] jmp [390]
  [354] getlocal 1 .............................. <tAction>
  [356] pushcons 15 ............................. <"sig">
  [358] eq ...................................... <tAction = "sig">
  [359] jmpifz [390] ............................ if tAction = "sig" then
  [362] pushzero ................................ <0>
  [363] setlocal 0 .............................. tAnimCounter = 0
  [365] pushcons 14 ............................. <"l">
  [367] getprop 380 ............................. <pPart>
  [370] pushsymb 102 ............................ <#char>
  [372] pushint8 2 .............................. <2>
  [374] pusharglist 3 ........................... <pPart, #char, 2>
  [376] objcall 104 ............................. <pPart.char[2]>
  [378] joinstr ................................. <"l" & pPart.char[2]>
  [379] setlocal 2 .............................. tPart = "l" & pPart.char[2]
  [381] getprop 389 ............................. <pDirection>
  [384] setlocal 3 .............................. tdir = pDirection
  [386] pushcons 7 .............................. <"wav">
  [388] setlocal 1 .............................. tAction = "wav"
  [390] jmp [590]
  [393] peek 0
  [395] pushcons 16 ............................. <"hd">
  [397] nteq
  [398] jmpifz [409] ............................ (case) "hd", ...
  [401] peek 0
  [403] pushcons 17 ............................. <"fc">
  [405] eq
  [406] jmpifz [450] ............................ (case) ..., "fc":
  [409] getparam 0 .............................. <me>
  [411] getobjprop 405 .......................... <me.pTalking>
  [414] jmpifz [447] ............................ if me.pTalking then
  [417] getprop 390 ............................. <pAction>
  [420] pushcons 18 ............................. <"lay">
  [422] eq ...................................... <pAction = "lay">
  [423] jmpifz [433] ............................ if pAction = "lay" then / else
  [426] pushcons 19 ............................. <"lsp">
  [428] setlocal 1 .............................. tAction = "lsp"
  [430] jmp [437]
  [433] pushcons 20 ............................. <"spk">
  [435] setlocal 1 .............................. tAction = "spk"
  [437] getparam 0 .............................. <me>
  [439] getobjprop 403 .......................... <me.pAnimCounter>
  [442] pushint8 2 .............................. <2>
  [444] mod ..................................... <me.pAnimCounter mod 2>
  [445] setlocal 0 .............................. tAnimCounter = me.pAnimCounter mod 2
  [447] jmp [590]
  [450] peek 0
  [452] pushcons 21 ............................. <"ey">
  [454] eq
  [455] jmpifz [493] ............................ (case) "ey":
  [458] getparam 0 .............................. <me>
  [460] getobjprop 405 .......................... <me.pTalking>
  [463] getprop 390 ............................. <pAction>
  [466] pushcons 18 ............................. <"lay">
  [468] nteq .................................... <pAction <> "lay">
  [469] and ..................................... <me.pTalking and (pAction <> "lay")>
  [470] getparam 0 .............................. <me>
  [472] getobjprop 403 .......................... <me.pAnimCounter>
  [475] pushint8 2 .............................. <2>
  [477] mod ..................................... <me.pAnimCounter mod 2>
  [478] pushzero ................................ <0>
  [479] eq ...................................... <(me.pAnimCounter mod 2) = 0>
  [480] and ..................................... <me.pTalking and (pAction <> "lay") and ((me.pAnimCounter mod 2) = 0)>
  [481] jmpifz [490] ............................ if me.pTalking and (pAction <> "lay") and ((me.pAnimCounter mod 2) = 0) then
  [484] pushint8 1 .............................. <1>
  [486] inv ..................................... <-1>
  [487] setprop 395 ............................. pYFix = -1
  [490] jmp [590]
  [493] peek 0
  [495] pushcons 22 ............................. <"hr">
  [497] eq
  [498] jmpifz [536] ............................ (case) "hr":
  [501] getparam 0 .............................. <me>
  [503] getobjprop 405 .......................... <me.pTalking>
  [506] getparam 0 .............................. <me>
  [508] getobjprop 403 .......................... <me.pAnimCounter>
  [511] pushint8 2 .............................. <2>
  [513] mod ..................................... <me.pAnimCounter mod 2>
  [514] pushzero ................................ <0>
  [515] eq ...................................... <(me.pAnimCounter mod 2) = 0>
  [516] and ..................................... <me.pTalking and ((me.pAnimCounter mod 2) = 0)>
  [517] jmpifz [533] ............................ if me.pTalking and ((me.pAnimCounter mod 2) = 0) then
  [520] getprop 390 ............................. <pAction>
  [523] pushcons 18 ............................. <"lay">
  [525] nteq .................................... <pAction <> "lay">
  [526] jmpifz [533] ............................ if pAction <> "lay" then
  [529] pushcons 20 ............................. <"spk">
  [531] setlocal 1 .............................. tAction = "spk"
  [533] jmp [590]
  [536] peek 0
  [538] pushcons 23 ............................. <"ri">
  [540] eq
  [541] jmpifz [572] ............................ (case) "ri":
  [544] getparam 0 .............................. <me>
  [546] getobjprop 406 .......................... <me.pCarrying>
  [549] not ..................................... <not me.pCarrying>
  [550] jmpifz [559] ............................ if not me.pCarrying then
  [553] pop 1
  [555] pusharglistnoret 0 ...................... <>
  [557] extcall 44 .............................. return 
  [559] getprop 392 ............................. <pActionRh>
  [562] setlocal 1 .............................. tAction = pActionRh
  [564] getprop 389 ............................. <pDirection>
  [567] setlocal 3 .............................. tdir = pDirection
  [569] jmp [590]
  [572] peek 0
  [574] pushcons 24 ............................. <"li">
  [576] eq
  [577] jmpifz [590] ............................ (case) "li":
  [580] getprop 391 ............................. <pActionLh>
  [583] setlocal 1 .............................. tAction = pActionLh
  [585] getprop 389 ............................. <pDirection>
  [588] setlocal 3 .............................. tdir = pDirection
  [590] pop 1 ................................... end case
  [592] getparam 0 .............................. <me>
  [594] getobjprop 410 .......................... <me.pPeopleSize>
  [597] pushcons 25 ............................. <"_">
  [599] joinstr ................................. <me.pPeopleSize & "_">
  [600] getlocal 1 .............................. <tAction>
  [602] joinstr ................................. <me.pPeopleSize & "_" & tAction>
  [603] pushcons 25 ............................. <"_">
  [605] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_">
  [606] getlocal 2 .............................. <tPart>
  [608] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_" & tPart>
  [609] pushcons 25 ............................. <"_">
  [611] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_" & tPart & "_">
  [612] getprop 381 ............................. <pmodel>
  [615] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_" & tPart & "_" & pmodel>
  [616] pushcons 25 ............................. <"_">
  [618] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_" & tPart & "_" & pmodel & "_">
  [619] getlocal 3 .............................. <tdir>
  [621] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_" & tPart & "_" & pmodel & "_" & tdir>
  [622] pushcons 25 ............................. <"_">
  [624] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_" & tPart & "_" & pmodel & "_" & tdir & "_">
  [625] getlocal 0 .............................. <tAnimCounter>
  [627] joinstr ................................. <me.pPeopleSize & "_" & tAction & "_" & tPart & "_" & pmodel & "_" & tdir & "_" & tAnimCounter>
  [628] setlocal 4 .............................. tMemString = me.pPeopleSize & "_" & tAction & "_" & tPart & "_" & pmodel & "_" & tdir & "_" & tAnimCounter
  [630] getprop 393 ............................. <pMemString>
  [633] getlocal 4 .............................. <tMemString>
  [635] nteq .................................... <pMemString <> tMemString>
  [636] jmpifz [849] ............................ if pMemString <> tMemString then
  [639] getlocal 4 .............................. <tMemString>
  [641] pusharglist 1 ........................... <tMemString>
  [643] extcall 56 .............................. <getmemnum(tMemString)>
  [645] setlocal 5 .............................. tMemNum = getmemnum(tMemString)
  [647] getlocal 5 .............................. <tMemNum>
  [649] pushzero ................................ <0>
  [650] gt ...................................... <tMemNum > 0>
  [651] jmpifz [845] ............................ if tMemNum > 0 then / else
  [654] getlocal 4 .............................. <tMemString>
  [656] setprop 393 ............................. pMemString = tMemString
  [659] getlocal 5 .............................. <tMemNum>
  [661] pusharglist 1 ........................... <tMemNum>
  [663] extcall 99 .............................. <member(tMemNum)>
  [665] setlocal 6 .............................. tmember = member(tMemNum)
  [667] getlocal 6 .............................. <tmember>
  [669] getobjprop 411 .......................... <tmember.regPoint>
  [672] setlocal 7 .............................. tRegPnt = tmember.regPoint
  [674] getlocal 7 .............................. <tRegPnt>
  [676] pushint8 1 .............................. <1>
  [678] pusharglist 2 ........................... <tRegPnt, 1>
  [680] objcall 96 .............................. <tRegPnt[1]>
  [682] inv ..................................... <-tRegPnt[1]>
  [683] setlocal 8 .............................. tX = -tRegPnt[1]
  [685] getparam 0 .............................. <me>
  [687] getchainedprop 412 ...................... <me.pBuffer>
  [690] getchainedprop 387 ...................... <me.pBuffer.rect>
  [693] getobjprop 413 .......................... <me.pBuffer.rect.height>
  [696] getlocal 7 .............................. <tRegPnt>
  [698] pushint8 2 .............................. <2>
  [700] pusharglist 2 ........................... <tRegPnt, 2>
  [702] objcall 96 .............................. <tRegPnt[2]>
  [704] sub ..................................... <me.pBuffer.rect.height - tRegPnt[2]>
  [705] pushint8 10 ............................. <10>
  [707] sub ..................................... <me.pBuffer.rect.height - tRegPnt[2] - 10>
  [708] setlocal 9 .............................. tY = me.pBuffer.rect.height - tRegPnt[2] - 10
  [710] getparam 0 .............................. <me>
  [712] getparam 0 .............................. <me>
  [714] getobjprop 409 .......................... <me.pUpdateRect>
  [717] getprop 386 ............................. <pCacheRectA>
  [720] pusharglist 2 ........................... <me.pUpdateRect, pCacheRectA>
  [722] extcall 408 ............................. <union(me.pUpdateRect, pCacheRectA)>
  [725] setobjprop 409 .......................... me.pUpdateRect = union(me.pUpdateRect, pCacheRectA)
  [728] getlocal 6 .............................. <tmember>
  [730] getobjprop 129 .......................... <tmember.image>
  [732] setprop 385 ............................. pCacheImage = tmember.image
  [735] getlocal 8 .............................. <tX>
  [737] getlocal 9 .............................. <tY>
  [739] getlocal 8 .............................. <tX>
  [741] getprop 385 ............................. <pCacheImage>
  [744] getobjprop 407 .......................... <pCacheImage.width>
  [747] add ..................................... <tX + pCacheImage.width>
  [748] getlocal 9 .............................. <tY>
  [750] getprop 385 ............................. <pCacheImage>
  [753] getobjprop 413 .......................... <pCacheImage.height>
  [756] add ..................................... <tY + pCacheImage.height>
  [757] pusharglist 4 ........................... <tX, tY, tX + pCacheImage.width, tY + pCacheImage.height>
  [759] extcall 387 ............................. <rect(tX, tY, tX + pCacheImage.width, tY + pCacheImage.height)>
  [762] getprop 394 ............................. <pXFix>
  [765] getprop 395 ............................. <pYFix>
  [768] getprop 394 ............................. <pXFix>
  [771] getprop 395 ............................. <pYFix>
  [774] pusharglist 4 ........................... <[pXFix, pYFix, pXFix, pYFix]>
  [776] pushlist ................................ <[pXFix, pYFix, pXFix, pYFix]>
  [777] add ..................................... <rect(tX, tY, tX + pCacheImage.width, tY + pCacheImage.height) + [pXFix, pYFix, pXFix, pYFix]>
  [778] getparam 0 .............................. <me>
  [780] getobjprop 414 .......................... <me.pLocFix>
  [783] getparam 0 .............................. <me>
  [785] getobjprop 414 .......................... <me.pLocFix>
  [788] pusharglist 2 ........................... <me.pLocFix, me.pLocFix>
  [790] extcall 387 ............................. <rect(me.pLocFix, me.pLocFix)>
  [793] add ..................................... <rect(tX, tY, tX + pCacheImage.width, tY + pCacheImage.height) + [pXFix, pYFix, pXFix, pYFix] + rect(me.pLocFix, me.pLocFix)>
  [794] setprop 386 ............................. pCacheRectA = rect(tX, tY, tX + pCacheImage.width, tY + pCacheImage.height) + [pXFix, pYFix, pXFix, pYFix] + rect(me.pLocFix, me.pLocFix)
  [797] getprop 385 ............................. <pCacheImage>
  [800] getobjprop 387 .......................... <pCacheImage.rect>
  [803] setprop 388 ............................. pCacheRectB = pCacheImage.rect
  [806] getprop 382 ............................. <pDrawProps>
  [809] pushsymb 383 ............................ <#maskImage>
  [812] getprop 385 ............................. <pCacheImage>
  [815] pusharglist 1 ........................... <pCacheImage>
  [817] objcall 415 ............................. <pCacheImage.createMatte()>
  [820] pusharglistnoret 3 ...................... <pDrawProps, #maskImage, pCacheImage.createMatte()>
  [822] objcall 142 ............................. pDrawProps[#maskImage] = pCacheImage.createMatte()
  [824] getparam 0 .............................. <me>
  [826] getparam 0 .............................. <me>
  [828] getobjprop 409 .......................... <me.pUpdateRect>
  [831] getprop 386 ............................. <pCacheRectA>
  [834] pusharglist 2 ........................... <me.pUpdateRect, pCacheRectA>
  [836] extcall 408 ............................. <union(me.pUpdateRect, pCacheRectA)>
  [839] setobjprop 409 .......................... me.pUpdateRect = union(me.pUpdateRect, pCacheRectA)
  [842] jmp [849]
  [845] pusharglistnoret 0 ...................... <>
  [847] extcall 44 .............................. return 
  [849] getparam 0 .............................. <me>
  [851] getchainedprop 412 ...................... <me.pBuffer>
  [854] getprop 385 ............................. <pCacheImage>
  [857] getprop 386 ............................. <pCacheRectA>
  [860] getprop 388 ............................. <pCacheRectB>
  [863] getprop 382 ............................. <pDrawProps>
  [866] pusharglistnoret 5 ...................... <me.pBuffer, pCacheImage, pCacheRectA, pCacheRectB, pDrawProps>
  [868] objcall 416 ............................. me.pBuffer.copyPixels(pCacheImage, pCacheRectA, pCacheRectB, pDrawProps)
  [871] ret
end

on render me
  [  0] getprop 393 ............................. <pMemString>
  [  3] pusharglist 1 ........................... <pMemString>
  [  5] extcall 127 ............................. <memberExists(pMemString)>
  [  7] jmpifz [ 32] ............................ if memberExists(pMemString) then
  [ 10] getparam 0 .............................. <me>
  [ 12] getchainedprop 412 ...................... <me.pBuffer>
  [ 15] getprop 388 ............................. <pCacheRectB>
  [ 18] getprop 386 ............................. <pCacheRectA>
  [ 21] getprop 388 ............................. <pCacheRectB>
  [ 24] getprop 382 ............................. <pDrawProps>
  [ 27] pusharglistnoret 5 ...................... <me.pBuffer, pCacheRectB, pCacheRectA, pCacheRectB, pDrawProps>
  [ 29] objcall 416 ............................. me.pBuffer.copyPixels(pCacheRectB, pCacheRectA, pCacheRectB, pDrawProps)
  [ 32] ret
end

on setItemObj me, tmodel
  [  0] getprop 380 ............................. <pPart>
  [  3] pushcons 23 ............................. <"ri">
  [  5] eq ...................................... <pPart = "ri">
  [  6] getprop 380 ............................. <pPart>
  [  9] pushcons 24 ............................. <"li">
  [ 11] eq ...................................... <pPart = "li">
  [ 12] or ...................................... <(pPart = "ri") or (pPart = "li")>
  [ 13] jmpifz [ 21] ............................ if (pPart = "ri") or (pPart = "li") then
  [ 16] getparam 1 .............................. <tmodel>
  [ 18] setprop 381 ............................. pmodel = tmodel
  [ 21] ret
end

on defineDir me, tdir, tPart
  [  0] getparam 2 .............................. <tPart>
  [  2] pusharglist 1 ........................... <tPart>
  [  4] extcall 71 .............................. <voidp(tPart)>
  [  6] getparam 2 .............................. <tPart>
  [  8] getprop 380 ............................. <pPart>
  [ 11] eq ...................................... <tPart = pPart>
  [ 12] or ...................................... <voidp(tPart) or (tPart = pPart)>
  [ 13] jmpifz [ 21] ............................ if voidp(tPart) or (tPart = pPart) then
  [ 16] getparam 1 .............................. <tdir>
  [ 18] setprop 389 ............................. pDirection = tdir
  [ 21] ret
end

on defineDirMultiple me, tdir, tTargetPartList
  [  0] getparam 2 .............................. <tTargetPartList>
  [  2] getprop 380 ............................. <pPart>
  [  5] pusharglist 2 ........................... <tTargetPartList, pPart>
  [  7] objcall 70 .............................. <tTargetPartList.getOne(pPart)>
  [  9] jmpifz [ 17] ............................ if tTargetPartList.getOne(pPart) then
  [ 12] getparam 1 .............................. <tdir>
  [ 14] setprop 389 ............................. pDirection = tdir
  [ 17] ret
end

on defineAct me, tAct, tTargetPartList
  [  0] getprop 390 ............................. <pAction>
  [  3] pushcons 26 ............................. <"std">
  [  5] eq ...................................... <pAction = "std">
  [  6] jmpifz [ 14] ............................ if pAction = "std" then
  [  9] getparam 1 .............................. <tAct>
  [ 11] setprop 390 ............................. pAction = tAct
  [ 14] ret
end

on defineActMultiple me, tAct, tTargetPartList
  [  0] getparam 2 .............................. <tTargetPartList>
  [  2] getprop 380 ............................. <pPart>
  [  5] pusharglist 2 ........................... <tTargetPartList, pPart>
  [  7] objcall 404 ............................. <tTargetPartList.getPos(pPart)>
  [ 10] pushzero ................................ <0>
  [ 11] eq ...................................... <tTargetPartList.getPos(pPart) = 0>
  [ 12] jmpifz [ 19] ............................ if tTargetPartList.getPos(pPart) = 0 then
  [ 15] pusharglistnoret 0 ...................... <>
  [ 17] extcall 44 .............................. return 
  [ 19] getprop 390 ............................. <pAction>
  [ 22] pushcons 26 ............................. <"std">
  [ 24] eq ...................................... <pAction = "std">
  [ 25] jmpifz [ 33] ............................ if pAction = "std" then
  [ 28] getparam 1 .............................. <tAct>
  [ 30] setprop 390 ............................. pAction = tAct
  [ 33] getprop 380 ............................. <pPart>
  [ 36] pushcons 21 ............................. <"ey">
  [ 38] eq ...................................... <pPart = "ey">
  [ 39] getparam 1 .............................. <tAct>
  [ 41] pushcons 26 ............................. <"std">
  [ 43] eq ...................................... <tAct = "std">
  [ 44] and ..................................... <(pPart = "ey") and (tAct = "std")>
  [ 45] jmpifz [ 53] ............................ if (pPart = "ey") and (tAct = "std") then
  [ 48] pushcons 26 ............................. <"std">
  [ 50] setprop 390 ............................. pAction = "std"
  [ 53] ret
end

on setColor me, tColor
  [  0] getparam 1 .............................. <tColor>
  [  2] pusharglist 1 ........................... <tColor>
  [  4] extcall 71 .............................. <voidp(tColor)>
  [  6] jmpifz [ 14] ............................ if voidp(tColor) then
  [  9] pushzero ................................ <0>
  [ 10] pusharglistnoret 1 ...................... <0>
  [ 12] extcall 44 .............................. return 0
  [ 14] getparam 1 .............................. <tColor>
  [ 16] pushcons 0 .............................. <EMPTY>
  [ 18] eq ...................................... <tColor = EMPTY>
  [ 19] jmpifz [ 27] ............................ if tColor = EMPTY then
  [ 22] pushzero ................................ <0>
  [ 23] pusharglistnoret 1 ...................... <0>
  [ 25] extcall 44 .............................. return 0
  [ 27] getparam 1 .............................. <tColor>
  [ 29] getobjprop 49 ........................... <tColor.ilk>
  [ 31] pushsymb 344 ............................ <#color>
  [ 34] eq ...................................... <tColor.ilk = #color>
  [ 35] getprop 382 ............................. <pDrawProps>
  [ 38] pushsymb 58 ............................. <#ink>
  [ 40] pusharglist 2 ........................... <pDrawProps, #ink>
  [ 42] objcall 96 .............................. <pDrawProps[#ink]>
  [ 44] pushint8 36 ............................. <36>
  [ 46] nteq .................................... <pDrawProps[#ink] <> 36>
  [ 47] and ..................................... <(tColor.ilk = #color) and (pDrawProps[#ink] <> 36)>
  [ 48] jmpifz [ 66] ............................ if (tColor.ilk = #color) and (pDrawProps[#ink] <> 36) then / else
  [ 51] getprop 382 ............................. <pDrawProps>
  [ 54] pushsymb 384 ............................ <#bgColor>
  [ 57] getparam 1 .............................. <tColor>
  [ 59] pusharglistnoret 3 ...................... <pDrawProps, #bgColor, tColor>
  [ 61] objcall 142 ............................. pDrawProps[#bgColor] = tColor
  [ 63] jmp [ 90]
  [ 66] getprop 382 ............................. <pDrawProps>
  [ 69] pushsymb 384 ............................ <#bgColor>
  [ 72] pushint16 255 ........................... <255>
  [ 75] pushint16 255 ........................... <255>
  [ 78] pushint16 255 ........................... <255>
  [ 81] pusharglist 3 ........................... <255, 255, 255>
  [ 83] extcall 322 ............................. <rgb(255, 255, 255)>
  [ 86] pusharglistnoret 3 ...................... <pDrawProps, #bgColor, rgb(255, 255, 255)>
  [ 88] objcall 142 ............................. pDrawProps[#bgColor] = rgb(255, 255, 255)
  [ 90] pushint8 1 .............................. <1>
  [ 92] pusharglistnoret 1 ...................... <1>
  [ 94] extcall 44 .............................. return 1
  [ 96] ret
end

on defineInk me, tInk
  [  0] getparam 1 .............................. <tInk>
  [  2] pusharglist 1 ........................... <tInk>
  [  4] extcall 71 .............................. <voidp(tInk)>
  [  6] jmpifz [ 78] ............................ if voidp(tInk) then
  [  9] getprop 380 ............................. <pPart>
  [ 12] peek 0 .................................. case pPart of
  [ 14] pushcons 21 ............................. <"ey">
  [ 16] eq
  [ 17] jmpifz [ 27] ............................ (case) "ey":
  [ 20] pushint8 36 ............................. <36>
  [ 22] setparam 1 .............................. tInk = 36
  [ 24] jmp [ 76]
  [ 27] peek 0
  [ 29] pushcons 27 ............................. <"sd">
  [ 31] eq
  [ 32] jmpifz [ 42] ............................ (case) "sd":
  [ 35] pushint8 32 ............................. <32>
  [ 37] setparam 1 .............................. tInk = 32
  [ 39] jmp [ 76]
  [ 42] peek 0
  [ 44] pushcons 23 ............................. <"ri">
  [ 46] eq
  [ 47] jmpifz [ 57] ............................ (case) "ri":
  [ 50] pushint8 8 .............................. <8>
  [ 52] setparam 1 .............................. tInk = 8
  [ 54] jmp [ 76]
  [ 57] peek 0
  [ 59] pushcons 24 ............................. <"li">
  [ 61] eq
  [ 62] jmpifz [ 72] ............................ (case) "li":
  [ 65] pushint8 8 .............................. <8>
  [ 67] setparam 1 .............................. tInk = 8
  [ 69] jmp [ 76] ............................... (case) otherwise:
  [ 72] pushint8 41 ............................. <41>
  [ 74] setparam 1 .............................. tInk = 41
  [ 76] pop 1 ................................... end case
  [ 78] getprop 382 ............................. <pDrawProps>
  [ 81] pushsymb 58 ............................. <#ink>
  [ 83] getparam 1 .............................. <tInk>
  [ 85] pusharglistnoret 3 ...................... <pDrawProps, #ink, tInk>
  [ 87] objcall 142 ............................. pDrawProps[#ink] = tInk
  [ 89] pushint8 1 .............................. <1>
  [ 91] pusharglistnoret 1 ...................... <1>
  [ 93] extcall 44 .............................. return 1
  [ 95] ret
end

on setModel me, tmodel
  [  0] getparam 1 .............................. <tmodel>
  [  2] setprop 381 ............................. pmodel = tmodel
  [  5] ret
end

on doHandWork me, tAct
  [  0] pushcons 5 .............................. <"lh">
  [  2] pushcons 6 .............................. <"ls">
  [  4] pushcons 24 ............................. <"li">
  [  6] pushcons 12 ............................. <"rh">
  [  8] pushcons 13 ............................. <"rs">
  [ 10] pushcons 23 ............................. <"ri">
  [ 12] pusharglist 6 ........................... <["lh", "ls", "li", "rh", "rs", "ri"]>
  [ 14] pushlist ................................ <["lh", "ls", "li", "rh", "rs", "ri"]>
  [ 15] getprop 380 ............................. <pPart>
  [ 18] pusharglist 2 ........................... <["lh", "ls", "li", "rh", "rs", "ri"], pPart>
  [ 20] objcall 70 .............................. <["lh", "ls", "li", "rh", "rs", "ri"].getOne(pPart)>
  [ 22] pushzero ................................ <0>
  [ 23] nteq .................................... <["lh", "ls", "li", "rh", "rs", "ri"].getOne(pPart) <> 0>
  [ 24] jmpifz [ 32] ............................ if ["lh", "ls", "li", "rh", "rs", "ri"].getOne(pPart) <> 0 then
  [ 27] getparam 1 .............................. <tAct>
  [ 29] setprop 390 ............................. pAction = tAct
  [ 32] ret
end

on doHandWorkLeft me, tAct
  [  0] getparam 1 .............................. <tAct>
  [  2] setprop 391 ............................. pActionLh = tAct
  [  5] ret
end

on doHandWorkRight me, tAct
  [  0] getparam 1 .............................. <tAct>
  [  2] setprop 392 ............................. pActionRh = tAct
  [  5] ret
end

on layDown me
  [  0] pushcons 18 ............................. <"lay">
  [  2] setprop 390 ............................. pAction = "lay"
  [  5] ret
end

on getCurrentMember me
  [  0] getprop 393 ............................. <pMemString>
  [  3] pusharglistnoret 1 ...................... <pMemString>
  [  5] extcall 44 .............................. return pMemString
  [  7] ret
end

on getColor me
  [  0] getprop 382 ............................. <pDrawProps>
  [  3] pushsymb 384 ............................ <#bgColor>
  [  6] pusharglist 2 ........................... <pDrawProps, #bgColor>
  [  8] objcall 96 .............................. <pDrawProps[#bgColor]>
  [ 10] pusharglistnoret 1 ...................... <pDrawProps[#bgColor]>
  [ 12] extcall 44 .............................. return pDrawProps[#bgColor]
  [ 14] ret
end

on getDirection me
  [  0] getprop 389 ............................. <pDirection>
  [  3] pusharglistnoret 1 ...................... <pDirection>
  [  5] extcall 44 .............................. return pDirection
  [  7] ret
end

on getLocation me
  [  0] getprop 393 ............................. <pMemString>
  [  3] pusharglist 1 ........................... <pMemString>
  [  5] extcall 71 .............................. <voidp(pMemString)>
  [  7] jmpifz [ 15] ............................ if voidp(pMemString) then
  [ 10] pushzero ................................ <0>
  [ 11] pusharglistnoret 1 ...................... <0>
  [ 13] extcall 44 .............................. return 0
  [ 15] getprop 393 ............................. <pMemString>
  [ 18] pusharglist 1 ........................... <pMemString>
  [ 20] extcall 127 ............................. <memberExists(pMemString)>
  [ 22] not ..................................... <not memberExists(pMemString)>
  [ 23] jmpifz [ 31] ............................ if not memberExists(pMemString) then
  [ 26] pushzero ................................ <0>
  [ 27] pusharglistnoret 1 ...................... <0>
  [ 29] extcall 44 .............................. return 0
  [ 31] getprop 393 ............................. <pMemString>
  [ 34] pusharglist 1 ........................... <pMemString>
  [ 36] extcall 56 .............................. <getmemnum(pMemString)>
  [ 38] pusharglist 1 ........................... <getmemnum(pMemString)>
  [ 40] extcall 99 .............................. <member(getmemnum(pMemString))>
  [ 42] setlocal 0 .............................. tmember = member(getmemnum(pMemString))
  [ 44] getlocal 0 .............................. <tmember>
  [ 46] getobjprop 387 .......................... <tmember.rect>
  [ 49] setlocal 1 .............................. tImgRect = tmember.rect
  [ 51] getlocal 1 .............................. <tImgRect>
  [ 53] getobjprop 407 .......................... <tImgRect.width>
  [ 56] pushint8 2 .............................. <2>
  [ 58] div ..................................... <tImgRect.width / 2>
  [ 59] getlocal 1 .............................. <tImgRect>
  [ 61] getobjprop 413 .......................... <tImgRect.height>
  [ 64] pushint8 2 .............................. <2>
  [ 66] div ..................................... <tImgRect.height / 2>
  [ 67] pusharglist 2 ........................... <tImgRect.width / 2, tImgRect.height / 2>
  [ 69] extcall 59 .............................. <point(tImgRect.width / 2, tImgRect.height / 2)>
  [ 71] setlocal 2 .............................. tCntrPoint = point(tImgRect.width / 2, tImgRect.height / 2)
  [ 73] getlocal 0 .............................. <tmember>
  [ 75] getobjprop 411 .......................... <tmember.regPoint>
  [ 78] setlocal 3 .............................. tRegPoint = tmember.regPoint
  [ 80] getlocal 3 .............................. <tRegPoint>
  [ 82] pushint8 1 .............................. <1>
  [ 84] inv ..................................... <-1>
  [ 85] mul ..................................... <tRegPoint * -1>
  [ 86] getlocal 2 .............................. <tCntrPoint>
  [ 88] add ..................................... <(tRegPoint * -1) + tCntrPoint>
  [ 89] pusharglistnoret 1 ...................... <(tRegPoint * -1) + tCntrPoint>
  [ 91] extcall 44 .............................. return (tRegPoint * -1) + tCntrPoint
  [ 93] ret
end

on copyPicture me, tImg, tdir, tHumanSize, tAction, tAnimFrame
  [  0] getparam 2 .............................. <tdir>
  [  2] pusharglist 1 ........................... <tdir>
  [  4] extcall 71 .............................. <voidp(tdir)>
  [  6] jmpifz [ 13] ............................ if voidp(tdir) then
  [  9] pushcons 28 ............................. <"2">
  [ 11] setparam 2 .............................. tdir = "2"
  [ 13] getparam 3 .............................. <tHumanSize>
  [ 15] pusharglist 1 ........................... <tHumanSize>
  [ 17] extcall 71 .............................. <voidp(tHumanSize)>
  [ 19] jmpifz [ 26] ............................ if voidp(tHumanSize) then
  [ 22] pushcons 29 ............................. <"h">
  [ 24] setparam 3 .............................. tHumanSize = "h"
  [ 26] getparam 4 .............................. <tAction>
  [ 28] pusharglist 1 ........................... <tAction>
  [ 30] extcall 71 .............................. <voidp(tAction)>
  [ 32] jmpifz [ 39] ............................ if voidp(tAction) then
  [ 35] pushcons 26 ............................. <"std">
  [ 37] setparam 4 .............................. tAction = "std"
  [ 39] getparam 5 .............................. <tAnimFrame>
  [ 41] pusharglist 1 ........................... <tAnimFrame>
  [ 43] extcall 71 .............................. <voidp(tAnimFrame)>
  [ 45] jmpifz [ 52] ............................ if voidp(tAnimFrame) then
  [ 48] pushcons 30 ............................. <"0">
  [ 50] setparam 5 .............................. tAnimFrame = "0"
  [ 52] getparam 3 .............................. <tHumanSize>
  [ 54] pushcons 25 ............................. <"_">
  [ 56] joinstr ................................. <tHumanSize & "_">
  [ 57] getparam 4 .............................. <tAction>
  [ 59] joinstr ................................. <tHumanSize & "_" & tAction>
  [ 60] pushcons 25 ............................. <"_">
  [ 62] joinstr ................................. <tHumanSize & "_" & tAction & "_">
  [ 63] getprop 380 ............................. <pPart>
  [ 66] joinstr ................................. <tHumanSize & "_" & tAction & "_" & pPart>
  [ 67] pushcons 25 ............................. <"_">
  [ 69] joinstr ................................. <tHumanSize & "_" & tAction & "_" & pPart & "_">
  [ 70] getprop 381 ............................. <pmodel>
  [ 73] joinstr ................................. <tHumanSize & "_" & tAction & "_" & pPart & "_" & pmodel>
  [ 74] pushcons 25 ............................. <"_">
  [ 76] joinstr ................................. <tHumanSize & "_" & tAction & "_" & pPart & "_" & pmodel & "_">
  [ 77] getparam 2 .............................. <tdir>
  [ 79] joinstr ................................. <tHumanSize & "_" & tAction & "_" & pPart & "_" & pmodel & "_" & tdir>
  [ 80] pushcons 25 ............................. <"_">
  [ 82] joinstr ................................. <tHumanSize & "_" & tAction & "_" & pPart & "_" & pmodel & "_" & tdir & "_">
  [ 83] getparam 5 .............................. <tAnimFrame>
  [ 85] joinstr ................................. <tHumanSize & "_" & tAction & "_" & pPart & "_" & pmodel & "_" & tdir & "_" & tAnimFrame>
  [ 86] setlocal 0 .............................. tMemName = tHumanSize & "_" & tAction & "_" & pPart & "_" & pmodel & "_" & tdir & "_" & tAnimFrame
  [ 88] getlocal 0 .............................. <tMemName>
  [ 90] pusharglist 1 ........................... <tMemName>
  [ 92] extcall 127 ............................. <memberExists(tMemName)>
  [ 94] jmpifz [245] ............................ if memberExists(tMemName) then
  [ 97] getlocal 0 .............................. <tMemName>
  [ 99] pusharglist 1 ........................... <tMemName>
  [101] extcall 56 .............................. <getmemnum(tMemName)>
  [103] pusharglist 1 ........................... <getmemnum(tMemName)>
  [105] extcall 99 .............................. <member(getmemnum(tMemName))>
  [107] setlocal 1 .............................. tmember = member(getmemnum(tMemName))
  [109] getlocal 1 .............................. <tmember>
  [111] getobjprop 129 .......................... <tmember.image>
  [113] setlocal 2 .............................. tImage = tmember.image
  [115] getlocal 1 .............................. <tmember>
  [117] getobjprop 411 .......................... <tmember.regPoint>
  [120] setlocal 3 .............................. tRegPnt = tmember.regPoint
  [122] getlocal 3 .............................. <tRegPnt>
  [124] pushint8 1 .............................. <1>
  [126] pusharglist 2 ........................... <tRegPnt, 1>
  [128] objcall 96 .............................. <tRegPnt[1]>
  [130] inv ..................................... <-tRegPnt[1]>
  [131] setlocal 4 .............................. tX = -tRegPnt[1]
  [133] getparam 1 .............................. <tImg>
  [135] getchainedprop 387 ...................... <tImg.rect>
  [138] getobjprop 413 .......................... <tImg.rect.height>
  [141] getlocal 3 .............................. <tRegPnt>
  [143] pushint8 2 .............................. <2>
  [145] pusharglist 2 ........................... <tRegPnt, 2>
  [147] objcall 96 .............................. <tRegPnt[2]>
  [149] sub ..................................... <tImg.rect.height - tRegPnt[2]>
  [150] pushint8 10 ............................. <10>
  [152] sub ..................................... <tImg.rect.height - tRegPnt[2] - 10>
  [153] setlocal 5 .............................. tY = tImg.rect.height - tRegPnt[2] - 10
  [155] getlocal 4 .............................. <tX>
  [157] getlocal 5 .............................. <tY>
  [159] getlocal 4 .............................. <tX>
  [161] getlocal 2 .............................. <tImage>
  [163] getobjprop 407 .......................... <tImage.width>
  [166] add ..................................... <tX + tImage.width>
  [167] getlocal 5 .............................. <tY>
  [169] getlocal 2 .............................. <tImage>
  [171] getobjprop 413 .......................... <tImage.height>
  [174] add ..................................... <tY + tImage.height>
  [175] pusharglist 4 ........................... <tX, tY, tX + tImage.width, tY + tImage.height>
  [177] extcall 387 ............................. <rect(tX, tY, tX + tImage.width, tY + tImage.height)>
  [180] setlocal 6 .............................. tRect = rect(tX, tY, tX + tImage.width, tY + tImage.height)
  [182] getlocal 2 .............................. <tImage>
  [184] pusharglist 1 ........................... <tImage>
  [186] objcall 415 ............................. <tImage.createMatte()>
  [189] setlocal 7 .............................. tMatte = tImage.createMatte()
  [191] getparam 1 .............................. <tImg>
  [193] getlocal 2 .............................. <tImage>
  [195] getlocal 6 .............................. <tRect>
  [197] getlocal 2 .............................. <tImage>
  [199] getobjprop 387 .......................... <tImage.rect>
  [202] pushsymb 383 ............................ <#maskImage>
  [205] getlocal 7 .............................. <tMatte>
  [207] pushsymb 58 ............................. <#ink>
  [209] getprop 382 ............................. <pDrawProps>
  [212] pushsymb 58 ............................. <#ink>
  [214] pusharglist 2 ........................... <pDrawProps, #ink>
  [216] objcall 96 .............................. <pDrawProps[#ink]>
  [218] pushsymb 384 ............................ <#bgColor>
  [221] getprop 382 ............................. <pDrawProps>
  [224] pushsymb 384 ............................ <#bgColor>
  [227] pusharglist 2 ........................... <pDrawProps, #bgColor>
  [229] objcall 96 .............................. <pDrawProps[#bgColor]>
  [231] pusharglist 6 ........................... <[#maskImage: tMatte, #ink: pDrawProps[#ink], #bgColor: pDrawProps[#bgColor]]>
  [233] pushproplist ............................ <[#maskImage: tMatte, #ink: pDrawProps[#ink], #bgColor: pDrawProps[#bgColor]]>
  [234] pusharglistnoret 5 ...................... <tImg, tImage, tRect, tImage.rect, [#maskImage: tMatte, #ink: pDrawProps[#ink], #bgColor: pDrawProps[#bgColor]]>
  [236] objcall 416 ............................. tImg.copyPixels(tImage, tRect, tImage.rect, [#maskImage: tMatte, #ink: pDrawProps[#ink], #bgColor: pDrawProps[#bgColor]])
  [239] pushint8 1 .............................. <1>
  [241] pusharglistnoret 1 ...................... <1>
  [243] extcall 44 .............................. return 1
  [245] pushzero ................................ <0>
  [246] pusharglistnoret 1 ...................... <0>
  [248] extcall 44 .............................. return 0
  [250] ret
end

on reset me
  [  0] pushcons 26 ............................. <"std">
  [  2] setprop 390 ............................. pAction = "std"
  [  5] pusharglist 0 ........................... <>
  [  7] extcall 30 .............................. <VOID>
  [  9] setprop 391 ............................. pActionLh = VOID
  [ 12] pusharglist 0 ........................... <>
  [ 14] extcall 30 .............................. <VOID>
  [ 16] setprop 392 ............................. pActionRh = VOID
  [ 19] ret
end
