property m_cWindowID

on deconstruct me
  [  0] getprop 284 ............................. <m_cWindowID>
  [  3] pusharglist 1 ........................... <m_cWindowID>
  [  5] extcall 47 .............................. <windowExists(m_cWindowID)>
  [  7] jmpifz [ 24] ............................ if windowExists(m_cWindowID) then / else
  [ 10] getprop 284 ............................. <m_cWindowID>
  [ 13] pusharglist 1 ........................... <m_cWindowID>
  [ 15] extcall 48 .............................. <removeWindow(m_cWindowID)>
  [ 17] pusharglistnoret 1 ...................... <removeWindow(m_cWindowID)>
  [ 19] extcall 44 .............................. return removeWindow(m_cWindowID)
  [ 21] jmp [ 30]
  [ 24] pushint8 1 .............................. <1>
  [ 26] pusharglistnoret 1 ...................... <1>
  [ 28] extcall 44 .............................. return 1
  [ 30] ret
end

on setWord me, tWord
  [  0] getparam 1 .............................. <tWord>
  [  2] getobjprop 49 ........................... <tWord.ilk>
  [  4] pushsymb 147 ............................ <#string>
  [  6] nteq .................................... <tWord.ilk <> #string>
  [  7] jmpifz [ 25] ............................ if tWord.ilk <> #string then
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 0 .............................. <"String expected!">
  [ 14] pushsymb 282 ............................ <#setWord>
  [ 17] pusharglist 3 ........................... <me, "String expected!", #setWord>
  [ 19] extcall 106 ............................. <error(me, "String expected!", #setWord)>
  [ 21] pusharglistnoret 1 ...................... <error(me, "String expected!", #setWord)>
  [ 23] extcall 44 .............................. return error(me, "String expected!", #setWord)
  [ 25] pushcons 1 .............................. <"lang_test_wnd">
  [ 27] setprop 284 ............................. m_cWindowID = "lang_test_wnd"
  [ 30] getprop 284 ............................. <m_cWindowID>
  [ 33] pusharglist 1 ........................... <m_cWindowID>
  [ 35] extcall 47 .............................. <windowExists(m_cWindowID)>
  [ 37] not ..................................... <not windowExists(m_cWindowID)>
  [ 38] jmpifz [ 66] ............................ if not windowExists(m_cWindowID) then
  [ 41] getprop 284 ............................. <m_cWindowID>
  [ 44] pusharglist 1 ........................... <m_cWindowID>
  [ 46] extcall 79 .............................. <createWindow(m_cWindowID)>
  [ 48] not ..................................... <not createWindow(m_cWindowID)>
  [ 49] jmpifz [ 66] ............................ if not createWindow(m_cWindowID) then
  [ 52] getparam 0 .............................. <me>
  [ 54] pushcons 2 .............................. <"Failed to create window!">
  [ 56] pushsymb 1 .............................. <#construct>
  [ 58] pusharglist 3 ........................... <me, "Failed to create window!", #construct>
  [ 60] extcall 106 ............................. <error(me, "Failed to create window!", #construct)>
  [ 62] pusharglistnoret 1 ...................... <error(me, "Failed to create window!", #construct)>
  [ 64] extcall 44 .............................. return error(me, "Failed to create window!", #construct)
  [ 66] getprop 284 ............................. <m_cWindowID>
  [ 69] pusharglist 1 ........................... <m_cWindowID>
  [ 71] extcall 75 .............................. <getWindow(m_cWindowID)>
  [ 73] setlocal 0 .............................. tWndObj = getWindow(m_cWindowID)
  [ 75] getlocal 0 .............................. <tWndObj>
  [ 77] pushcons 3 .............................. <"habbo_simple.window">
  [ 79] pusharglistnoret 2 ...................... <tWndObj, "habbo_simple.window">
  [ 81] objcall 80 .............................. tWndObj.merge("habbo_simple.window")
  [ 83] getlocal 0 .............................. <tWndObj>
  [ 85] pushcons 4 .............................. <"habbo_lang_test.window">
  [ 87] pusharglistnoret 2 ...................... <tWndObj, "habbo_lang_test.window">
  [ 89] objcall 80 .............................. tWndObj.merge("habbo_lang_test.window")
  [ 91] getlocal 0 .............................. <tWndObj>
  [ 93] getparam 0 .............................. <me>
  [ 95] pusharglist 1 ........................... <me>
  [ 97] objcall 42 .............................. <me.getID()>
  [ 99] pusharglistnoret 2 ...................... <tWndObj, me.getID()>
  [101] objcall 81 .............................. tWndObj.registerClient(me.getID())
  [103] getlocal 0 .............................. <tWndObj>
  [105] pushsymb 264 ............................ <#eventProc>
  [108] getparam 0 .............................. <me>
  [110] pusharglist 1 ........................... <me>
  [112] objcall 42 .............................. <me.getID()>
  [114] pushsymb 0 .............................. <#mouseUp>
  [116] pusharglistnoret 4 ...................... <tWndObj, #eventProc, me.getID(), #mouseUp>
  [118] objcall 63 .............................. tWndObj.registerProcedure(#eventProc, me.getID(), #mouseUp)
  [120] getlocal 0 .............................. <tWndObj>
  [122] pushsymb 264 ............................ <#eventProc>
  [125] getparam 0 .............................. <me>
  [127] pusharglist 1 ........................... <me>
  [129] objcall 42 .............................. <me.getID()>
  [131] pushsymb 87 ............................. <#keyDown>
  [133] pusharglistnoret 4 ...................... <tWndObj, #eventProc, me.getID(), #keyDown>
  [135] objcall 63 .............................. tWndObj.registerProcedure(#eventProc, me.getID(), #keyDown)
  [137] getlocal 0 .............................. <tWndObj>
  [139] pushcons 5 .............................. <"lang_test_example">
  [141] pusharglist 2 ........................... <tWndObj, "lang_test_example">
  [143] objcall 82 .............................. <tWndObj.getElement("lang_test_example")>
  [145] getparam 1 .............................. <tWord>
  [147] pusharglistnoret 2 ...................... <tWndObj.getElement("lang_test_example"), tWord>
  [149] objcall 90 .............................. tWndObj.getElement("lang_test_example").setText(tWord)
  [151] getlocal 0 .............................. <tWndObj>
  [153] pusharglistnoret 1 ...................... <tWndObj>
  [155] objcall 276 ............................. tWndObj.center()
  [158] pushcons 6 .............................. <"lang_test_text">
  [160] pushcons 7 .............................. <"lang_test_text_2">
  [162] pusharglist 1 ........................... <"lang_test_text_2">
  [164] extcall 27 .............................. <getText("lang_test_text_2")>
  [166] pusharglistnoret 2 ...................... <"lang_test_text", getText("lang_test_text_2")>
  [168] extcall 90 .............................. setText("lang_test_text", getText("lang_test_text_2"))
  [170] ret
end

on testWord me
  [  0] getprop 284 ............................. <m_cWindowID>
  [  3] pusharglist 1 ........................... <m_cWindowID>
  [  5] extcall 75 .............................. <getWindow(m_cWindowID)>
  [  7] pushcons 8 .............................. <"lang_test_field">
  [  9] pusharglist 2 ........................... <getWindow(m_cWindowID), "lang_test_field">
  [ 11] objcall 82 .............................. <getWindow(m_cWindowID).getElement("lang_test_field")>
  [ 13] pusharglist 1 ........................... <getWindow(m_cWindowID).getElement("lang_test_field")>
  [ 15] objcall 27 .............................. <getWindow(m_cWindowID).getElement("lang_test_field").getText()>
  [ 17] setlocal 0 .............................. tWord = getWindow(m_cWindowID).getElement("lang_test_field").getText()
  [ 19] getlocal 0 .............................. <tWord>
  [ 21] pushcons 9 .............................. <EMPTY>
  [ 23] eq ...................................... <tWord = EMPTY>
  [ 24] jmpifz [ 32] ............................ if tWord = EMPTY then
  [ 27] pushzero ................................ <0>
  [ 28] pusharglistnoret 1 ...................... <0>
  [ 30] extcall 44 .............................. return 0
  [ 32] pushcons 10 ............................. <"connection.info.id">
  [ 34] pusharglist 1 ........................... <"connection.info.id">
  [ 36] extcall 149 ............................. <getVariable("connection.info.id")>
  [ 38] pusharglist 1 ........................... <getVariable("connection.info.id")>
  [ 40] extcall 187 ............................. <connectionExists(getVariable("connection.info.id"))>
  [ 42] jmpifz [ 68] ............................ if connectionExists(getVariable("connection.info.id")) then
  [ 45] pushcons 10 ............................. <"connection.info.id">
  [ 47] pusharglist 1 ........................... <"connection.info.id">
  [ 49] extcall 149 ............................. <getVariable("connection.info.id")>
  [ 51] pusharglist 1 ........................... <getVariable("connection.info.id")>
  [ 53] extcall 148 ............................. <getConnection(getVariable("connection.info.id"))>
  [ 55] pushcons 11 ............................. <"LANGCHECK">
  [ 57] pushsymb 147 ............................ <#string>
  [ 59] getlocal 0 .............................. <tWord>
  [ 61] pusharglist 2 ........................... <[#string: tWord]>
  [ 63] pushproplist ............................ <[#string: tWord]>
  [ 64] pusharglistnoret 3 ...................... <getConnection(getVariable("connection.info.id")), "LANGCHECK", [#string: tWord]>
  [ 66] objcall 150 ............................. getConnection(getVariable("connection.info.id")).send("LANGCHECK", [#string: tWord])
  [ 68] getparam 0 .............................. <me>
  [ 70] pusharglist 1 ........................... <me>
  [ 72] objcall 42 .............................. <me.getID()>
  [ 74] pusharglistnoret 1 ...................... <me.getID()>
  [ 76] extcall 270 ............................. removeObject(me.getID())
  [ 79] ret
end

on eventProc me, tEvent, tElemID
  [  0] getparam 1 .............................. <tEvent>
  [  2] peek 0 .................................. case tEvent of
  [  4] pushsymb 0 .............................. <#mouseUp>
  [  6] eq
  [  7] jmpifz [ 36] ............................ (case) #mouseUp:
  [ 10] getparam 2 .............................. <tElemID>
  [ 12] pushcons 12 ............................. <"ok">
  [ 14] eq ...................................... <tElemID = "ok">
  [ 15] jmpifz [ 33] ............................ if tElemID = "ok" then
  [ 18] getparam 0 .............................. <me>
  [ 20] pusharglistnoret 1 ...................... <me>
  [ 22] objcall 283 ............................. me.testWord()
  [ 25] pop 1
  [ 27] pushint8 1 .............................. <1>
  [ 29] pusharglistnoret 1 ...................... <1>
  [ 31] extcall 44 .............................. return 1
  [ 33] jmp [ 79]
  [ 36] peek 0
  [ 38] pushsymb 87 ............................. <#keyDown>
  [ 40] eq
  [ 41] jmpifz [ 79] ............................ (case) #keyDown:
  [ 44] pusharglist 0 ........................... <>
  [ 46] thebuiltin 169 .......................... <the key>
  [ 48] pushcons 13 ............................. <RETURN>
  [ 50] eq ...................................... <the key = RETURN>
  [ 51] jmpifz [ 72] ............................ if the key = RETURN then / else
  [ 54] getparam 0 .............................. <me>
  [ 56] pusharglistnoret 1 ...................... <me>
  [ 58] objcall 283 ............................. me.testWord()
  [ 61] pop 1
  [ 63] pushint8 1 .............................. <1>
  [ 65] pusharglistnoret 1 ...................... <1>
  [ 67] extcall 44 .............................. return 1
  [ 69] jmp [ 79]
  [ 72] pop 1
  [ 74] pushzero ................................ <0>
  [ 75] pusharglistnoret 1 ...................... <0>
  [ 77] extcall 44 .............................. return 0
  [ 79] pop 1 ................................... end case
  [ 81] ret
end
