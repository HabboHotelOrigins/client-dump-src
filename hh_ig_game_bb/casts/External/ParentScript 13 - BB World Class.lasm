property pTileImages, pEmptyTileImage, pTileImageRect, pPriorityTaskList, pSecondaryTaskList, pPriorityTilesPerUpdate, pSecondaryTilesPerUpdate, pWorldReady, pGeometry, pGeometryCache, pSprite, pBuffer, pMember, pOrigMemberName

on construct me
  [  0] pushint8 8 .............................. <8>
  [  2] setprop 231 ............................. pPriorityTilesPerUpdate = 8
  [  4] pushint8 2 .............................. <2>
  [  6] setprop 232 ............................. pSecondaryTilesPerUpdate = 2
  [  8] pusharglist 0 ........................... <[]>
  [ 10] pushlist ................................ <[]>
  [ 11] setprop 233 ............................. pPriorityTaskList = []
  [ 13] pusharglist 0 ........................... <[]>
  [ 15] pushlist ................................ <[]>
  [ 16] setprop 234 ............................. pSecondaryTaskList = []
  [ 18] pushzero ................................ <0>
  [ 19] setprop 235 ............................. pWorldReady = 0
  [ 21] pushsymb 167 ............................ <#room_interface>
  [ 23] pusharglist 1 ........................... <#room_interface>
  [ 25] extcall 166 ............................. <getObject(#room_interface)>
  [ 27] pusharglist 1 ........................... <getObject(#room_interface)>
  [ 29] objcall 168 ............................. <getObject(#room_interface).getGeometry()>
  [ 31] setprop 54 .............................. pGeometry = getObject(#room_interface).getGeometry()
  [ 33] pusharglist 0 ........................... <[]>
  [ 35] pushlist ................................ <[]>
  [ 36] setprop 236 ............................. pTileImages = []
  [ 38] pushint8 1 .............................. <1>
  [ 40] setlocal 0
  [ 42] getlocal 0
  [ 44] pushint8 4 .............................. <4>
  [ 46] lteq
  [ 47] jmpifz [116] ............................ repeat with tTeamId = 1 to 4
  [ 50] pusharglist 0 ........................... <[]>
  [ 52] pushlist ................................ <[]>
  [ 53] setlocal 1 .............................. tTemp = []
  [ 55] pushint8 1 .............................. <1>
  [ 57] setlocal 2
  [ 59] getlocal 2
  [ 61] pushint8 4 .............................. <4>
  [ 63] lteq
  [ 64] jmpifz [ 99] ............................ repeat with tstate = 1 to 4
  [ 67] getlocal 1 .............................. <tTemp>
  [ 69] pushcons 0 .............................. <"tile">
  [ 71] getlocal 0 .............................. <tTeamId>
  [ 73] joinstr ................................. <"tile" & tTeamId>
  [ 74] pushcons 1 .............................. <"_">
  [ 76] joinstr ................................. <"tile" & tTeamId & "_">
  [ 77] getlocal 2 .............................. <tstate>
  [ 79] joinstr ................................. <"tile" & tTeamId & "_" & tstate>
  [ 80] pusharglist 1 ........................... <"tile" & tTeamId & "_" & tstate>
  [ 82] extcall 91 .............................. <member("tile" & tTeamId & "_" & tstate)>
  [ 84] getobjprop 44 ........................... <member("tile" & tTeamId & "_" & tstate).image>
  [ 86] pusharglistnoret 2 ...................... <tTemp, member("tile" & tTeamId & "_" & tstate).image>
  [ 88] objcall 136 ............................. tTemp.add(member("tile" & tTeamId & "_" & tstate).image)
  [ 90] pushint8 1
  [ 92] getlocal 2
  [ 94] add
  [ 95] setlocal 2
  [ 97] endrepeat [ 59]
  [ 99] getprop 236 ............................. <pTileImages>
  [101] getlocal 1 .............................. <tTemp>
  [103] pusharglistnoret 2 ...................... <pTileImages, tTemp>
  [105] objcall 136 ............................. pTileImages.add(tTemp)
  [107] pushint8 1
  [109] getlocal 0
  [111] add
  [112] setlocal 0
  [114] endrepeat [ 42]
  [116] pushcons 2 .............................. <"tile0">
  [118] pusharglist 1 ........................... <"tile0">
  [120] extcall 238 ............................. <getmemnum("tile0")>
  [122] pusharglist 1 ........................... <getmemnum("tile0")>
  [124] extcall 91 .............................. <member(getmemnum("tile0"))>
  [126] getobjprop 44 ........................... <member(getmemnum("tile0")).image>
  [128] setprop 237 ............................. pEmptyTileImage = member(getmemnum("tile0")).image
  [130] getprop 237 ............................. <pEmptyTileImage>
  [132] getobjprop 45 ........................... <pEmptyTileImage.rect>
  [134] setprop 239 ............................. pTileImageRect = pEmptyTileImage.rect
  [136] pusharglist 0 ........................... <[]>
  [138] pushlist ................................ <[]>
  [139] setprop 240 ............................. pGeometryCache = []
  [141] pushint8 1 .............................. <1>
  [143] pusharglistnoret 1 ...................... <1>
  [145] extcall 28 .............................. return 1
  [147] ret
end

on deconstruct me
  [  0] pusharglist 0 ........................... <>
  [  2] extcall 116 ............................. <VOID>
  [  4] setprop 54 .............................. pGeometry = VOID
  [  6] pusharglist 0 ........................... <[]>
  [  8] pushlist ................................ <[]>
  [  9] setprop 236 ............................. pTileImages = []
  [ 11] pusharglist 0 ........................... <[]>
  [ 13] pushlist ................................ <[]>
  [ 14] setprop 237 ............................. pEmptyTileImage = []
  [ 16] pusharglist 0 ........................... <[]>
  [ 18] pushlist ................................ <[]>
  [ 19] setprop 240 ............................. pGeometryCache = []
  [ 21] getparam 0 .............................. <me>
  [ 23] pusharglist 1 ........................... <me>
  [ 25] objcall 245 ............................. <me.getID()>
  [ 27] pusharglistnoret 1 ...................... <me.getID()>
  [ 29] extcall 244 ............................. removeUpdate(me.getID())
  [ 31] getparam 0 .............................. <me>
  [ 33] pusharglistnoret 1 ...................... <me>
  [ 35] objcall 230 ............................. me.clearAll()
  [ 37] ret
end

on Refresh me, tTopic, tdata
  [  0] getparam 1 .............................. <tTopic>
  [  2] peek 0 .................................. case tTopic of
  [  4] pushsymb 246 ............................ <#fullgamestatus_tiles>
  [  6] eq
  [  7] jmpifz [ 39] ............................ (case) #fullgamestatus_tiles:
  [ 10] getparam 0 .............................. <me>
  [ 12] pusharglistnoret 1 ...................... <me>
  [ 14] objcall 229 ............................. me.initBuffer()
  [ 16] getparam 0 .............................. <me>
  [ 18] pusharglist 1 ........................... <me>
  [ 20] objcall 245 ............................. <me.getID()>
  [ 22] pusharglistnoret 1 ...................... <me.getID()>
  [ 24] extcall 247 ............................. receiveUpdate(me.getID())
  [ 26] getparam 0 .............................. <me>
  [ 28] pushsymb 248 ............................ <#gamestatus_flood>
  [ 30] getparam 2 .............................. <tdata>
  [ 32] pusharglistnoret 3 ...................... <me, #gamestatus_flood, tdata>
  [ 34] objcall 13 .............................. me.Refresh(#gamestatus_flood, tdata)
  [ 36] jmp [194]
  [ 39] peek 0
  [ 41] pushsymb 249 ............................ <#gamereset>
  [ 43] eq
  [ 44] jmpifz [ 66] ............................ (case) #gamereset:
  [ 47] getparam 0 .............................. <me>
  [ 49] pusharglistnoret 1 ...................... <me>
  [ 51] objcall 229 ............................. me.initBuffer()
  [ 53] getparam 0 .............................. <me>
  [ 55] pusharglist 1 ........................... <me>
  [ 57] objcall 245 ............................. <me.getID()>
  [ 59] pusharglistnoret 1 ...................... <me.getID()>
  [ 61] extcall 247 ............................. receiveUpdate(me.getID())
  [ 63] jmp [194]
  [ 66] peek 0
  [ 68] pushsymb 250 ............................ <#world_ready>
  [ 70] eq
  [ 71] jmpifz [ 81] ............................ (case) #world_ready:
  [ 74] pushint8 1 .............................. <1>
  [ 76] setprop 235 ............................. pWorldReady = 1
  [ 78] jmp [194]
  [ 81] peek 0
  [ 83] pushsymb 251 ............................ <#gamestatus_tiles>
  [ 85] eq
  [ 86] jmpifz [143] ............................ (case) #gamestatus_tiles:
  [ 89] getparam 2 .............................. <tdata>
  [ 91] peek 0
  [ 93] pusharglist 1
  [ 95] extcall 30
  [ 97] pushint8 1
  [ 99] peek 0
  [101] peek 2
  [103] lteq
  [104] jmpifz [138] ............................ repeat with tTileProps in tdata
  [107] peek 2
  [109] peek 1
  [111] pusharglist 2
  [113] extcall 31
  [115] setlocal 0
  [117] getprop 233 ............................. <pPriorityTaskList>
  [119] getlocal 0 .............................. <tTileProps>
  [121] pusharglistnoret 2 ...................... <pPriorityTaskList, tTileProps>
  [123] objcall 136 ............................. pPriorityTaskList.add(tTileProps)
  [125] getparam 0 .............................. <me>
  [127] getlocal 0 .............................. <tTileProps>
  [129] pusharglistnoret 2 ...................... <me, tTileProps>
  [131] objcall 227 ............................. me.removeSecondaryTask(tTileProps)
  [133] pushint8 1
  [135] add
  [136] endrepeat [ 99]
  [138] pop 3
  [140] jmp [194]
  [143] peek 0
  [145] pushsymb 248 ............................ <#gamestatus_flood>
  [147] eq
  [148] jmpifz [194] ............................ (case) #gamestatus_flood:
  [151] getparam 2 .............................. <tdata>
  [153] peek 0
  [155] pusharglist 1
  [157] extcall 30
  [159] pushint8 1
  [161] peek 0
  [163] peek 2
  [165] lteq
  [166] jmpifz [192] ............................ repeat with tTileProps in tdata
  [169] peek 2
  [171] peek 1
  [173] pusharglist 2
  [175] extcall 31
  [177] setlocal 0
  [179] getprop 234 ............................. <pSecondaryTaskList>
  [181] getlocal 0 .............................. <tTileProps>
  [183] pusharglistnoret 2 ...................... <pSecondaryTaskList, tTileProps>
  [185] objcall 136 ............................. pSecondaryTaskList.add(tTileProps)
  [187] pushint8 1
  [189] add
  [190] endrepeat [161]
  [192] pop 3
  [194] pop 1 ................................... end case
  [196] ret
end

on update me
  [  0] getprop 235 ............................. <pWorldReady>
  [  2] pushzero ................................ <0>
  [  3] eq ...................................... <pWorldReady = 0>
  [  4] jmpifz [ 12] ............................ if pWorldReady = 0 then
  [  7] pushzero ................................ <0>
  [  8] pusharglistnoret 1 ...................... <0>
  [ 10] extcall 28 .............................. return 0
  [ 12] getprop 233 ............................. <pPriorityTaskList>
  [ 14] getobjprop 30 ........................... <pPriorityTaskList.count>
  [ 16] pushzero ................................ <0>
  [ 17] eq ...................................... <pPriorityTaskList.count = 0>
  [ 18] jmpifz [101] ............................ if pPriorityTaskList.count = 0 then / else
  [ 21] getprop 234 ............................. <pSecondaryTaskList>
  [ 23] getobjprop 30 ........................... <pSecondaryTaskList.count>
  [ 25] pushzero ................................ <0>
  [ 26] eq ...................................... <pSecondaryTaskList.count = 0>
  [ 27] jmpifz [ 36] ............................ if pSecondaryTaskList.count = 0 then
  [ 30] pushint8 1 .............................. <1>
  [ 32] pusharglistnoret 1 ...................... <1>
  [ 34] extcall 28 .............................. return 1
  [ 36] pushint8 1 .............................. <1>
  [ 38] setlocal 0
  [ 40] getlocal 0
  [ 42] getprop 232 ............................. <pSecondaryTilesPerUpdate>
  [ 44] lteq
  [ 45] jmpifz [ 98] ............................ repeat with tTilesToRender = 1 to pSecondaryTilesPerUpdate
  [ 48] getprop 234 ............................. <pSecondaryTaskList>
  [ 50] getobjprop 30 ........................... <pSecondaryTaskList.count>
  [ 52] pushzero ................................ <0>
  [ 53] eq ...................................... <pSecondaryTaskList.count = 0>
  [ 54] jmpifz [ 63] ............................ if pSecondaryTaskList.count = 0 then
  [ 57] pushint8 1 .............................. <1>
  [ 59] pusharglistnoret 1 ...................... <1>
  [ 61] extcall 28 .............................. return 1
  [ 63] getprop 234 ............................. <pSecondaryTaskList>
  [ 65] pushint8 1 .............................. <1>
  [ 67] pusharglist 2 ........................... <pSecondaryTaskList, 1>
  [ 69] objcall 31 .............................. <pSecondaryTaskList[1]>
  [ 71] setlocal 1 .............................. tProps = pSecondaryTaskList[1]
  [ 73] getprop 234 ............................. <pSecondaryTaskList>
  [ 75] pushint8 1 .............................. <1>
  [ 77] pusharglistnoret 2 ...................... <pSecondaryTaskList, 1>
  [ 79] objcall 86 .............................. pSecondaryTaskList.deleteAt(1)
  [ 81] getparam 0 .............................. <me>
  [ 83] getlocal 1 .............................. <tProps>
  [ 85] pusharglistnoret 2 ...................... <me, tProps>
  [ 87] objcall 7 ............................... me.render(tProps)
  [ 89] pushint8 1
  [ 91] getlocal 0
  [ 93] add
  [ 94] setlocal 0
  [ 96] endrepeat [ 40]
  [ 98] jmp [167]
  [101] pushint8 1 .............................. <1>
  [103] setlocal 0
  [105] getlocal 0
  [107] getprop 231 ............................. <pPriorityTilesPerUpdate>
  [109] lteq
  [110] jmpifz [167] ............................ repeat with tTilesToRender = 1 to pPriorityTilesPerUpdate
  [113] getprop 233 ............................. <pPriorityTaskList>
  [115] pushint8 1 .............................. <1>
  [117] pusharglist 2 ........................... <pPriorityTaskList, 1>
  [119] objcall 31 .............................. <pPriorityTaskList[1]>
  [121] setlocal 1 .............................. tProps = pPriorityTaskList[1]
  [123] getprop 233 ............................. <pPriorityTaskList>
  [125] pushint8 1 .............................. <1>
  [127] pusharglistnoret 2 ...................... <pPriorityTaskList, 1>
  [129] objcall 86 .............................. pPriorityTaskList.deleteAt(1)
  [131] getparam 0 .............................. <me>
  [133] getlocal 1 .............................. <tProps>
  [135] pusharglistnoret 2 ...................... <me, tProps>
  [137] objcall 7 ............................... me.render(tProps)
  [139] getprop 233 ............................. <pPriorityTaskList>
  [141] getobjprop 30 ........................... <pPriorityTaskList.count>
  [143] pushzero ................................ <0>
  [144] eq ...................................... <pPriorityTaskList.count = 0>
  [145] jmpifz [158] ............................ if pPriorityTaskList.count = 0 then
  [148] getparam 0 .............................. <me>
  [150] pusharglist 1 ........................... <me>
  [152] objcall 6 ............................... <me.update()>
  [154] pusharglistnoret 1 ...................... <me.update()>
  [156] extcall 28 .............................. return me.update()
  [158] pushint8 1
  [160] getlocal 0
  [162] add
  [163] setlocal 0
  [165] endrepeat [105]
  [167] pushint8 1 .............................. <1>
  [169] pusharglistnoret 1 ...................... <1>
  [171] extcall 28 .............................. return 1
  [173] ret
end

on removeSecondaryTask me, tProps
  [  0] getparam 1 .............................. <tProps>
  [  2] pushsymb 60 ............................. <#x>
  [  4] pusharglist 2 ........................... <tProps, #x>
  [  6] objcall 31 .............................. <tProps[#x]>
  [  8] setlocal 0 .............................. tLocX = tProps[#x]
  [ 10] getparam 1 .............................. <tProps>
  [ 12] pushsymb 61 ............................. <#y>
  [ 14] pusharglist 2 ........................... <tProps, #y>
  [ 16] objcall 31 .............................. <tProps[#y]>
  [ 18] setlocal 1 .............................. tLocY = tProps[#y]
  [ 20] pushint8 1 .............................. <1>
  [ 22] setlocal 2
  [ 24] getlocal 2
  [ 26] getprop 234 ............................. <pSecondaryTaskList>
  [ 28] getobjprop 30 ........................... <pSecondaryTaskList.count>
  [ 30] lteq
  [ 31] jmpifz [ 93] ............................ repeat with i = 1 to pSecondaryTaskList.count
  [ 34] getprop 234 ............................. <pSecondaryTaskList>
  [ 36] getlocal 2 .............................. <i>
  [ 38] pusharglist 2 ........................... <pSecondaryTaskList, i>
  [ 40] objcall 31 .............................. <pSecondaryTaskList[i]>
  [ 42] setlocal 3 .............................. tItem = pSecondaryTaskList[i]
  [ 44] getlocal 3 .............................. <tItem>
  [ 46] pushsymb 60 ............................. <#x>
  [ 48] pusharglist 2 ........................... <tItem, #x>
  [ 50] objcall 31 .............................. <tItem[#x]>
  [ 52] getlocal 0 .............................. <tLocX>
  [ 54] eq ...................................... <tItem[#x] = tLocX>
  [ 55] getlocal 3 .............................. <tItem>
  [ 57] pushsymb 61 ............................. <#y>
  [ 59] pusharglist 2 ........................... <tItem, #y>
  [ 61] objcall 31 .............................. <tItem[#y]>
  [ 63] getlocal 1 .............................. <tLocY>
  [ 65] eq ...................................... <tItem[#y] = tLocY>
  [ 66] and ..................................... <(tItem[#x] = tLocX) and (tItem[#y] = tLocY)>
  [ 67] jmpifz [ 84] ............................ if (tItem[#x] = tLocX) and (tItem[#y] = tLocY) then
  [ 70] getprop 234 ............................. <pSecondaryTaskList>
  [ 72] getlocal 2 .............................. <i>
  [ 74] pusharglistnoret 2 ...................... <pSecondaryTaskList, i>
  [ 76] objcall 86 .............................. pSecondaryTaskList.deleteAt(i)
  [ 78] pushint8 1 .............................. <1>
  [ 80] pusharglistnoret 1 ...................... <1>
  [ 82] extcall 28 .............................. return 1
  [ 84] pushint8 1
  [ 86] getlocal 2
  [ 88] add
  [ 89] setlocal 2
  [ 91] endrepeat [ 24]
  [ 93] pushint8 1 .............................. <1>
  [ 95] pusharglistnoret 1 ...................... <1>
  [ 97] extcall 28 .............................. return 1
  [ 99] ret
end

on render me, tProps
  [  0] getparam 1 .............................. <tProps>
  [  2] pusharglist 1 ........................... <tProps>
  [  4] extcall 129 ............................. <ilk(tProps)>
  [  6] pushsymb 255 ............................ <#propList>
  [  8] eq ...................................... <ilk(tProps) = #propList>
  [  9] not ..................................... <not (ilk(tProps) = #propList)>
  [ 10] jmpifz [ 18] ............................ if not (ilk(tProps) = #propList) then
  [ 13] pushzero ................................ <0>
  [ 14] pusharglistnoret 1 ...................... <0>
  [ 16] extcall 28 .............................. return 0
  [ 18] getparam 1 .............................. <tProps>
  [ 20] pushsymb 256 ............................ <#jumps>
  [ 23] pusharglist 2 ........................... <tProps, #jumps>
  [ 25] objcall 31 .............................. <tProps[#jumps]>
  [ 27] setlocal 0 .............................. tstate = tProps[#jumps]
  [ 29] getparam 1 .............................. <tProps>
  [ 31] pushsymb 257 ............................ <#teamId>
  [ 34] pusharglist 2 ........................... <tProps, #teamId>
  [ 36] objcall 31 .............................. <tProps[#teamId]>
  [ 38] setlocal 1 .............................. tTeamId = tProps[#teamId]
  [ 40] getlocal 0 .............................. <tstate>
  [ 42] pushzero ................................ <0>
  [ 43] lteq .................................... <tstate <= 0>
  [ 44] jmpifz [ 54] ............................ if tstate <= 0 then / else
  [ 47] getprop 237 ............................. <pEmptyTileImage>
  [ 49] setlocal 2 .............................. tImage = pEmptyTileImage
  [ 51] jmp [103]
  [ 54] getlocal 0 .............................. <tstate>
  [ 56] getprop 236 ............................. <pTileImages>
  [ 58] getlocal 1 .............................. <tTeamId>
  [ 60] pusharglist 2 ........................... <pTileImages, tTeamId>
  [ 62] objcall 31 .............................. <pTileImages[tTeamId]>
  [ 64] getobjprop 30 ........................... <pTileImages[tTeamId].count>
  [ 66] gt ...................................... <tstate > pTileImages[tTeamId].count>
  [ 67] jmpifz [ 87] ............................ if tstate > pTileImages[tTeamId].count then
  [ 70] getparam 0 .............................. <me>
  [ 72] pushcons 3 .............................. <"Invalid state on tile:">
  [ 74] getparam 1 .............................. <tProps>
  [ 76] joinpadstr .............................. <"Invalid state on tile:" && tProps>
  [ 77] pushsymb 7 .............................. <#render>
  [ 79] pusharglist 3 ........................... <me, "Invalid state on tile:" && tProps, #render>
  [ 81] extcall 173 ............................. <error(me, "Invalid state on tile:" && tProps, #render)>
  [ 83] pusharglistnoret 1 ...................... <error(me, "Invalid state on tile:" && tProps, #render)>
  [ 85] extcall 28 .............................. return error(me, "Invalid state on tile:" && tProps, #render)
  [ 87] getprop 236 ............................. <pTileImages>
  [ 89] getlocal 1 .............................. <tTeamId>
  [ 91] pusharglist 2 ........................... <pTileImages, tTeamId>
  [ 93] objcall 31 .............................. <pTileImages[tTeamId]>
  [ 95] getlocal 0 .............................. <tstate>
  [ 97] pusharglist 2 ........................... <pTileImages[tTeamId], tstate>
  [ 99] objcall 31 .............................. <pTileImages[tTeamId][tstate]>
  [101] setlocal 2 .............................. tImage = pTileImages[tTeamId][tstate]
  [103] getlocal 2 .............................. <tImage>
  [105] pusharglist 0 ........................... <>
  [107] extcall 116 ............................. <VOID>
  [109] eq ...................................... <tImage = VOID>
  [110] jmpifz [118] ............................ if tImage = VOID then
  [113] pushzero ................................ <0>
  [114] pusharglistnoret 1 ...................... <0>
  [116] extcall 28 .............................. return 0
  [118] getparam 0 .............................. <me>
  [120] getparam 1 .............................. <tProps>
  [122] pushsymb 60 ............................. <#x>
  [124] pusharglist 2 ........................... <tProps, #x>
  [126] objcall 31 .............................. <tProps[#x]>
  [128] getparam 1 .............................. <tProps>
  [130] pushsymb 61 ............................. <#y>
  [132] pusharglist 2 ........................... <tProps, #y>
  [134] objcall 31 .............................. <tProps[#y]>
  [136] pusharglist 3 ........................... <me, tProps[#x], tProps[#y]>
  [138] objcall 228 ............................. <me.getTileRect(tProps[#x], tProps[#y])>
  [140] setlocal 3 .............................. tTargetRect = me.getTileRect(tProps[#x], tProps[#y])
  [142] pushint8 2 .............................. <2>
  [144] pusharglist 1 ........................... <2>
  [146] extcall 258 ............................. <random(2)>
  [149] pushint8 1 .............................. <1>
  [151] eq ...................................... <random(2) = 1>
  [152] jmpifz [188] ............................ if random(2) = 1 then / else
  [155] getprop 93 .............................. <pBuffer>
  [157] getlocal 2 .............................. <tImage>
  [159] getlocal 3 .............................. <tTargetRect>
  [161] getlocal 2 .............................. <tImage>
  [163] getobjprop 45 ........................... <tImage.rect>
  [165] pushsymb 50 ............................. <#ink>
  [167] pushint8 36 ............................. <36>
  [169] pushsymb 259 ............................ <#paletteRef>
  [172] pushcons 4 .............................. <"bb_colors_1">
  [174] pusharglist 1 ........................... <"bb_colors_1">
  [176] extcall 91 .............................. <member("bb_colors_1")>
  [178] pusharglist 4 ........................... <[#ink: 36, #paletteRef: member("bb_colors_1")]>
  [180] pushproplist ............................ <[#ink: 36, #paletteRef: member("bb_colors_1")]>
  [181] pusharglistnoret 5 ...................... <pBuffer, tImage, tTargetRect, tImage.rect, [#ink: 36, #paletteRef: member("bb_colors_1")]>
  [183] objcall 105 ............................. pBuffer.copyPixels(tImage, tTargetRect, tImage.rect, [#ink: 36, #paletteRef: member("bb_colors_1")])
  [185] jmp [209]
  [188] getprop 93 .............................. <pBuffer>
  [190] getlocal 2 .............................. <tImage>
  [192] getlocal 3 .............................. <tTargetRect>
  [194] getlocal 2 .............................. <tImage>
  [196] getobjprop 45 ........................... <tImage.rect>
  [198] pushsymb 50 ............................. <#ink>
  [200] pushint8 36 ............................. <36>
  [202] pusharglist 2 ........................... <[#ink: 36]>
  [204] pushproplist ............................ <[#ink: 36]>
  [205] pusharglistnoret 5 ...................... <pBuffer, tImage, tTargetRect, tImage.rect, [#ink: 36]>
  [207] objcall 105 ............................. pBuffer.copyPixels(tImage, tTargetRect, tImage.rect, [#ink: 36])
  [209] pushint8 1 .............................. <1>
  [211] pusharglistnoret 1 ...................... <1>
  [213] extcall 28 .............................. return 1
  [215] ret
end

on getTileRect me, tX, tY
  [  0] getparam 1 .............................. <tX>
  [  2] pushint8 1 .............................. <1>
  [  4] add ..................................... <tX + 1>
  [  5] setlocal 0 .............................. tIndexX = tX + 1
  [  7] getparam 2 .............................. <tY>
  [  9] pushint8 1 .............................. <1>
  [ 11] add ..................................... <tY + 1>
  [ 12] setlocal 1 .............................. tIndexY = tY + 1
  [ 14] getprop 240 ............................. <pGeometryCache>
  [ 16] getobjprop 30 ........................... <pGeometryCache.count>
  [ 18] getlocal 1 .............................. <tIndexY>
  [ 20] gteq .................................... <pGeometryCache.count >= tIndexY>
  [ 21] jmpifz [104] ............................ if pGeometryCache.count >= tIndexY then / else
  [ 24] getprop 240 ............................. <pGeometryCache>
  [ 26] getlocal 1 .............................. <tIndexY>
  [ 28] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 30] objcall 31 .............................. <pGeometryCache[tIndexY]>
  [ 32] pushzero ................................ <0>
  [ 33] eq ...................................... <pGeometryCache[tIndexY] = 0>
  [ 34] jmpifz [ 48] ............................ if pGeometryCache[tIndexY] = 0 then
  [ 37] getprop 240 ............................. <pGeometryCache>
  [ 39] getlocal 1 .............................. <tIndexY>
  [ 41] pusharglist 0 ........................... <[]>
  [ 43] pushlist ................................ <[]>
  [ 44] pusharglistnoret 3 ...................... <pGeometryCache, tIndexY, []>
  [ 46] objcall 123 ............................. pGeometryCache[tIndexY] = []
  [ 48] getprop 240 ............................. <pGeometryCache>
  [ 50] getlocal 1 .............................. <tIndexY>
  [ 52] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 54] objcall 31 .............................. <pGeometryCache[tIndexY]>
  [ 56] getobjprop 30 ........................... <pGeometryCache[tIndexY].count>
  [ 58] getlocal 0 .............................. <tIndexX>
  [ 60] gteq .................................... <pGeometryCache[tIndexY].count >= tIndexX>
  [ 61] jmpifz [101] ............................ if pGeometryCache[tIndexY].count >= tIndexX then
  [ 64] getprop 240 ............................. <pGeometryCache>
  [ 66] getlocal 1 .............................. <tIndexY>
  [ 68] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 70] objcall 31 .............................. <pGeometryCache[tIndexY]>
  [ 72] getlocal 0 .............................. <tIndexX>
  [ 74] pusharglist 2 ........................... <pGeometryCache[tIndexY], tIndexX>
  [ 76] objcall 31 .............................. <pGeometryCache[tIndexY][tIndexX]>
  [ 78] pushzero ................................ <0>
  [ 79] nteq .................................... <pGeometryCache[tIndexY][tIndexX] <> 0>
  [ 80] jmpifz [101] ............................ if pGeometryCache[tIndexY][tIndexX] <> 0 then
  [ 83] getprop 240 ............................. <pGeometryCache>
  [ 85] getlocal 1 .............................. <tIndexY>
  [ 87] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 89] objcall 31 .............................. <pGeometryCache[tIndexY]>
  [ 91] getlocal 0 .............................. <tIndexX>
  [ 93] pusharglist 2 ........................... <pGeometryCache[tIndexY], tIndexX>
  [ 95] objcall 31 .............................. <pGeometryCache[tIndexY][tIndexX]>
  [ 97] pusharglistnoret 1 ...................... <pGeometryCache[tIndexY][tIndexX]>
  [ 99] extcall 28 .............................. return pGeometryCache[tIndexY][tIndexX]
  [101] jmp [115]
  [104] getprop 240 ............................. <pGeometryCache>
  [106] getlocal 1 .............................. <tIndexY>
  [108] pusharglist 0 ........................... <[]>
  [110] pushlist ................................ <[]>
  [111] pusharglistnoret 3 ...................... <pGeometryCache, tIndexY, []>
  [113] objcall 123 ............................. pGeometryCache[tIndexY] = []
  [115] pushfloat32 0.0 ......................... <0.0>
  [120] setlocal 2 .............................. tHeight = 0.0
  [122] getparam 0 .............................. <me>
  [124] pusharglist 1 ........................... <me>
  [126] objcall 201 ............................. <me.getGameSystem()>
  [128] setlocal 3 .............................. tGameSystem = me.getGameSystem()
  [130] getlocal 3 .............................. <tGameSystem>
  [132] pushzero ................................ <0>
  [133] eq ...................................... <tGameSystem = 0>
  [134] jmpifz [142] ............................ if tGameSystem = 0 then
  [137] pushzero ................................ <0>
  [138] pusharglistnoret 1 ...................... <0>
  [140] extcall 28 .............................. return 0
  [142] getlocal 3 .............................. <tGameSystem>
  [144] pusharglist 1 ........................... <tGameSystem>
  [146] objcall 262 ............................. <tGameSystem.getWorld()>
  [149] setlocal 4 .............................. tWorld = tGameSystem.getWorld()
  [151] getlocal 4 .............................. <tWorld>
  [153] getparam 1 .............................. <tX>
  [155] getparam 2 .............................. <tY>
  [157] pusharglist 3 ........................... <tWorld, tX, tY>
  [159] objcall 263 ............................. <tWorld.getTile(tX, tY)>
  [162] setlocal 5 .............................. tTile = tWorld.getTile(tX, tY)
  [164] getlocal 5 .............................. <tTile>
  [166] pushzero ................................ <0>
  [167] nteq .................................... <tTile <> 0>
  [168] jmpifz [228] ............................ if tTile <> 0 then / else
  [171] getlocal 5 .............................. <tTile>
  [173] pusharglist 1 ........................... <tTile>
  [175] objcall 264 ............................. <tTile.getType()>
  [178] pusharglist 1 ........................... <tTile.getType()>
  [180] extcall 181 ............................. <integer(tTile.getType())>
  [182] setlocal 6 .............................. ttype = integer(tTile.getType())
  [184] getlocal 6 .............................. <ttype>
  [186] pusharglist 1 ........................... <ttype>
  [188] extcall 265 ............................. <integerp(ttype)>
  [191] jmpifz [201] ............................ if integerp(ttype) then / else
  [194] getlocal 6 .............................. <ttype>
  [196] setlocal 2 .............................. tHeight = ttype
  [198] jmp [225]
  [201] getparam 0 .............................. <me>
  [203] pushcons 5 .............................. <"Invalid tile height:">
  [205] getparam 1 .............................. <tX>
  [207] joinpadstr .............................. <"Invalid tile height:" && tX>
  [208] getparam 2 .............................. <tY>
  [210] joinpadstr .............................. <"Invalid tile height:" && tX && tY>
  [211] getlocal 6 .............................. <ttype>
  [213] joinpadstr .............................. <"Invalid tile height:" && tX && tY && ttype>
  [214] pushsymb 266 ............................ <#getTileProperties>
  [217] pusharglist 3 ........................... <me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties>
  [219] extcall 173 ............................. <error(me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties)>
  [221] pusharglistnoret 1 ...................... <error(me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties)>
  [223] extcall 28 .............................. return error(me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties)
  [225] jmp [249]
  [228] getparam 0 .............................. <me>
  [230] pushcons 6 .............................. <"Invalid tile coordinates:">
  [232] getparam 1 .............................. <tX>
  [234] joinpadstr .............................. <"Invalid tile coordinates:" && tX>
  [235] getparam 2 .............................. <tY>
  [237] joinpadstr .............................. <"Invalid tile coordinates:" && tX && tY>
  [238] pushsymb 266 ............................ <#getTileProperties>
  [241] pusharglist 3 ........................... <me, "Invalid tile coordinates:" && tX && tY, #getTileProperties>
  [243] extcall 173 ............................. <error(me, "Invalid tile coordinates:" && tX && tY, #getTileProperties)>
  [245] pusharglistnoret 1 ...................... <error(me, "Invalid tile coordinates:" && tX && tY, #getTileProperties)>
  [247] extcall 28 .............................. return error(me, "Invalid tile coordinates:" && tX && tY, #getTileProperties)
  [249] getprop 54 .............................. <pGeometry>
  [251] getparam 1 .............................. <tX>
  [253] getparam 2 .............................. <tY>
  [255] getlocal 2 .............................. <tHeight>
  [257] pusharglist 4 ........................... <pGeometry, tX, tY, tHeight>
  [259] objcall 58 .............................. <pGeometry.getScreenCoordinate(tX, tY, tHeight)>
  [261] setlocal 7 .............................. tScreenLoc = pGeometry.getScreenCoordinate(tX, tY, tHeight)
  [263] getprop 98 .............................. <pSprite>
  [265] pusharglist 0 ........................... <>
  [267] extcall 116 ............................. <VOID>
  [269] eq ...................................... <pSprite = VOID>
  [270] jmpifz [278] ............................ if pSprite = VOID then
  [273] pushzero ................................ <0>
  [274] pusharglistnoret 1 ...................... <0>
  [276] extcall 28 .............................. return 0
  [278] getlocal 7 .............................. <tScreenLoc>
  [280] pushint8 1 .............................. <1>
  [282] getlocal 7 .............................. <tScreenLoc>
  [284] pushint8 1 .............................. <1>
  [286] pusharglist 2 ........................... <tScreenLoc, 1>
  [288] objcall 31 .............................. <tScreenLoc[1]>
  [290] getprop 98 .............................. <pSprite>
  [292] getobjprop 267 .......................... <pSprite.left>
  [295] sub ..................................... <tScreenLoc[1] - pSprite.left>
  [296] pushint8 2 .............................. <2>
  [298] add ..................................... <tScreenLoc[1] - pSprite.left + 2>
  [299] pusharglistnoret 3 ...................... <tScreenLoc, 1, tScreenLoc[1] - pSprite.left + 2>
  [301] objcall 123 ............................. tScreenLoc[1] = tScreenLoc[1] - pSprite.left + 2
  [303] getlocal 7 .............................. <tScreenLoc>
  [305] pushint8 2 .............................. <2>
  [307] getlocal 7 .............................. <tScreenLoc>
  [309] pushint8 2 .............................. <2>
  [311] pusharglist 2 ........................... <tScreenLoc, 2>
  [313] objcall 31 .............................. <tScreenLoc[2]>
  [315] getprop 98 .............................. <pSprite>
  [317] getobjprop 268 .......................... <pSprite.top>
  [320] sub ..................................... <tScreenLoc[2] - pSprite.top>
  [321] getprop 239 ............................. <pTileImageRect>
  [323] getobjprop 95 ........................... <pTileImageRect.height>
  [325] pushint8 2 .............................. <2>
  [327] div ..................................... <pTileImageRect.height / 2>
  [328] sub ..................................... <tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2)>
  [329] pushint8 1 .............................. <1>
  [331] sub ..................................... <tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2) - 1>
  [332] pusharglistnoret 3 ...................... <tScreenLoc, 2, tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2) - 1>
  [334] objcall 123 ............................. tScreenLoc[2] = tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2) - 1
  [336] getprop 239 ............................. <pTileImageRect>
  [338] getlocal 7 .............................. <tScreenLoc>
  [340] pushint8 1 .............................. <1>
  [342] pusharglist 2 ........................... <tScreenLoc, 1>
  [344] objcall 31 .............................. <tScreenLoc[1]>
  [346] getlocal 7 .............................. <tScreenLoc>
  [348] pushint8 2 .............................. <2>
  [350] pusharglist 2 ........................... <tScreenLoc, 2>
  [352] objcall 31 .............................. <tScreenLoc[2]>
  [354] getlocal 7 .............................. <tScreenLoc>
  [356] pushint8 1 .............................. <1>
  [358] pusharglist 2 ........................... <tScreenLoc, 1>
  [360] objcall 31 .............................. <tScreenLoc[1]>
  [362] getlocal 7 .............................. <tScreenLoc>
  [364] pushint8 2 .............................. <2>
  [366] pusharglist 2 ........................... <tScreenLoc, 2>
  [368] objcall 31 .............................. <tScreenLoc[2]>
  [370] pusharglist 4 ........................... <tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2]>
  [372] extcall 45 .............................. <rect(tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2])>
  [374] add ..................................... <pTileImageRect + rect(tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2])>
  [375] setlocal 8 .............................. tTargetRect = pTileImageRect + rect(tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2])
  [377] getprop 240 ............................. <pGeometryCache>
  [379] getlocal 1 .............................. <tIndexY>
  [381] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [383] objcall 31 .............................. <pGeometryCache[tIndexY]>
  [385] getlocal 0 .............................. <tIndexX>
  [387] getlocal 8 .............................. <tTargetRect>
  [389] pusharglistnoret 3 ...................... <pGeometryCache[tIndexY], tIndexX, tTargetRect>
  [391] objcall 123 ............................. pGeometryCache[tIndexY][tIndexX] = tTargetRect
  [393] getlocal 8 .............................. <tTargetRect>
  [395] pusharglistnoret 1 ...................... <tTargetRect>
  [397] extcall 28 .............................. return tTargetRect
  [399] ret
end

on initBuffer me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setprop 233 ............................. pPriorityTaskList = []
  [  5] pusharglist 0 ........................... <[]>
  [  7] pushlist ................................ <[]>
  [  8] setprop 234 ............................. pSecondaryTaskList = []
  [ 10] pushcons 7 .............................. <"bin_image">
  [ 12] setlocal 0 .............................. tName = "bin_image"
  [ 14] getlocal 0 .............................. <tName>
  [ 16] pusharglist 1 ........................... <tName>
  [ 18] extcall 238 ............................. <getmemnum(tName)>
  [ 20] pusharglist 1 ........................... <getmemnum(tName)>
  [ 22] extcall 91 .............................. <member(getmemnum(tName))>
  [ 24] setprop 43 .............................. pMember = member(getmemnum(tName))
  [ 26] pushsymb 167 ............................ <#room_interface>
  [ 28] pusharglist 1 ........................... <#room_interface>
  [ 30] extcall 166 ............................. <getObject(#room_interface)>
  [ 32] pusharglist 1 ........................... <getObject(#room_interface)>
  [ 34] objcall 275 ............................. <getObject(#room_interface).getRoomVisualizer()>
  [ 37] setlocal 1 .............................. tVisObj = getObject(#room_interface).getRoomVisualizer()
  [ 39] getlocal 1 .............................. <tVisObj>
  [ 41] pushzero ................................ <0>
  [ 42] eq ...................................... <tVisObj = 0>
  [ 43] jmpifz [ 60] ............................ if tVisObj = 0 then
  [ 46] getparam 0 .............................. <me>
  [ 48] pushcons 8 .............................. <"Room visualizer not found.">
  [ 50] pushsymb 229 ............................ <#initBuffer>
  [ 52] pusharglist 3 ........................... <me, "Room visualizer not found.", #initBuffer>
  [ 54] extcall 173 ............................. <error(me, "Room visualizer not found.", #initBuffer)>
  [ 56] pusharglistnoret 1 ...................... <error(me, "Room visualizer not found.", #initBuffer)>
  [ 58] extcall 28 .............................. return error(me, "Room visualizer not found.", #initBuffer)
  [ 60] getlocal 1 .............................. <tVisObj>
  [ 62] pushcons 9 .............................. <"floor">
  [ 64] pusharglist 2 ........................... <tVisObj, "floor">
  [ 66] objcall 276 ............................. <tVisObj.getSprById("floor")>
  [ 69] setprop 98 .............................. pSprite = tVisObj.getSprById("floor")
  [ 71] getprop 98 .............................. <pSprite>
  [ 73] pushzero ................................ <0>
  [ 74] eq ...................................... <pSprite = 0>
  [ 75] jmpifz [ 92] ............................ if pSprite = 0 then
  [ 78] getparam 0 .............................. <me>
  [ 80] pushcons 10 ............................. <"Arena floor not found.">
  [ 82] pushsymb 229 ............................ <#initBuffer>
  [ 84] pusharglist 3 ........................... <me, "Arena floor not found.", #initBuffer>
  [ 86] extcall 173 ............................. <error(me, "Arena floor not found.", #initBuffer)>
  [ 88] pusharglistnoret 1 ...................... <error(me, "Arena floor not found.", #initBuffer)>
  [ 90] extcall 28 .............................. return error(me, "Arena floor not found.", #initBuffer)
  [ 92] getprop 277 ............................. <pOrigMemberName>
  [ 95] pusharglist 0 ........................... <>
  [ 97] extcall 116 ............................. <VOID>
  [ 99] eq ...................................... <pOrigMemberName = VOID>
  [100] jmpifz [113] ............................ if pOrigMemberName = VOID then
  [103] getprop 98 .............................. <pSprite>
  [105] getchainedprop 91 ....................... <pSprite.member>
  [107] getobjprop 278 .......................... <pSprite.member.name>
  [110] setprop 277 ............................. pOrigMemberName = pSprite.member.name
  [113] getprop 277 ............................. <pOrigMemberName>
  [116] pusharglist 1 ........................... <pOrigMemberName>
  [118] extcall 238 ............................. <getmemnum(pOrigMemberName)>
  [120] pusharglist 1 ........................... <getmemnum(pOrigMemberName)>
  [122] extcall 91 .............................. <member(getmemnum(pOrigMemberName))>
  [124] setlocal 2 .............................. tOrigMember = member(getmemnum(pOrigMemberName))
  [126] getlocal 2 .............................. <tOrigMember>
  [128] getobjprop 44 ........................... <tOrigMember.image>
  [130] setlocal 3 .............................. tImg = tOrigMember.image
  [132] getprop 43 .............................. <pMember>
  [134] getlocal 3 .............................. <tImg>
  [136] getobjprop 94 ........................... <tImg.width>
  [138] getlocal 3 .............................. <tImg>
  [140] getobjprop 95 ........................... <tImg.height>
  [142] pushint8 8 .............................. <8>
  [144] pusharglist 3 ........................... <tImg.width, tImg.height, 8>
  [146] extcall 44 .............................. <image(tImg.width, tImg.height, 8)>
  [148] setobjprop 44 ........................... pMember.image = image(tImg.width, tImg.height, 8)
  [150] getprop 43 .............................. <pMember>
  [152] getlocal 2 .............................. <tOrigMember>
  [154] getobjprop 259 .......................... <tOrigMember.paletteRef>
  [157] setobjprop 259 .......................... pMember.paletteRef = tOrigMember.paletteRef
  [160] getprop 43 .............................. <pMember>
  [162] getchainedprop 44 ....................... <pMember.image>
  [164] getlocal 3 .............................. <tImg>
  [166] getlocal 3 .............................. <tImg>
  [168] getobjprop 45 ........................... <tImg.rect>
  [170] getlocal 3 .............................. <tImg>
  [172] getobjprop 45 ........................... <tImg.rect>
  [174] pusharglistnoret 4 ...................... <pMember.image, tImg, tImg.rect, tImg.rect>
  [176] objcall 105 ............................. pMember.image.copyPixels(tImg, tImg.rect, tImg.rect)
  [178] getprop 43 .............................. <pMember>
  [180] getlocal 2 .............................. <tOrigMember>
  [182] getobjprop 97 ........................... <tOrigMember.regPoint>
  [184] setobjprop 97 ........................... pMember.regPoint = tOrigMember.regPoint
  [186] getprop 43 .............................. <pMember>
  [188] getobjprop 44 ........................... <pMember.image>
  [190] setprop 93 .............................. pBuffer = pMember.image
  [192] getprop 98 .............................. <pSprite>
  [194] getprop 43 .............................. <pMember>
  [196] pusharglistnoret 2 ...................... <pSprite, pMember>
  [198] objcall 279 ............................. pSprite.setMember(pMember)
  [201] ret
end

on clearAll me
  [  0] getprop 43 .............................. <pMember>
  [  2] getobjprop 129 .......................... <pMember.ilk>
  [  4] pushsymb 91 ............................. <#member>
  [  6] eq ...................................... <pMember.ilk = #member>
  [  7] jmpifz [ 24] ............................ if pMember.ilk = #member then
  [ 10] getprop 43 .............................. <pMember>
  [ 12] pushint8 1 .............................. <1>
  [ 14] pushint8 1 .............................. <1>
  [ 16] pushint8 8 .............................. <8>
  [ 18] pusharglist 3 ........................... <1, 1, 8>
  [ 20] extcall 44 .............................. <image(1, 1, 8)>
  [ 22] setobjprop 44 ........................... pMember.image = image(1, 1, 8)
  [ 24] pusharglist 0 ........................... <>
  [ 26] extcall 116 ............................. <VOID>
  [ 28] setprop 93 .............................. pBuffer = VOID
  [ 30] pusharglist 0 ........................... <>
  [ 32] extcall 116 ............................. <VOID>
  [ 34] setprop 43 .............................. pMember = VOID
  [ 36] pushint8 1 .............................. <1>
  [ 38] pusharglistnoret 1 ...................... <1>
  [ 40] extcall 28 .............................. return 1
  [ 42] ret
end
