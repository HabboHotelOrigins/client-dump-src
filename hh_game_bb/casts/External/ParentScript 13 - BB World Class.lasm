property pTileImages, pEmptyTileImage, pTileImageRect, pPriorityTaskList, pSecondaryTaskList, pPriorityTilesPerUpdate, pSecondaryTilesPerUpdate, pWorldReady, pGeometry, pGeometryCache, pSprite, pBuffer, pMember, pOrigMemberName

on construct me
  [  0] pushint8 8 .............................. <8>
  [  2] setprop 165 ............................. pPriorityTilesPerUpdate = 8
  [  4] pushint8 2 .............................. <2>
  [  6] setprop 1228 ............................ pSecondaryTilesPerUpdate = 2
  [  9] pusharglist 0 ........................... <[]>
  [ 11] pushlist ................................ <[]>
  [ 12] setprop 166 ............................. pPriorityTaskList = []
  [ 14] pusharglist 0 ........................... <[]>
  [ 16] pushlist ................................ <[]>
  [ 17] setprop 167 ............................. pSecondaryTaskList = []
  [ 19] pushzero ................................ <0>
  [ 20] setprop 1257 ............................ pWorldReady = 0
  [ 23] pushsymb 156 ............................ <#room_interface>
  [ 25] pusharglist 1 ........................... <#room_interface>
  [ 27] extcall 153 ............................. <getObject(#room_interface)>
  [ 29] pusharglist 1 ........................... <getObject(#room_interface)>
  [ 31] objcall 169 ............................. <getObject(#room_interface).getGeometry()>
  [ 33] setprop 168 ............................. pGeometry = getObject(#room_interface).getGeometry()
  [ 35] pusharglist 0 ........................... <[]>
  [ 37] pushlist ................................ <[]>
  [ 38] setprop 170 ............................. pTileImages = []
  [ 40] pushint8 1 .............................. <1>
  [ 42] setlocal 0
  [ 44] getlocal 0
  [ 46] pushint8 4 .............................. <4>
  [ 48] lteq
  [ 49] jmpifz [118] ............................ repeat with tTeamId = 1 to 4
  [ 52] pusharglist 0 ........................... <[]>
  [ 54] pushlist ................................ <[]>
  [ 55] setlocal 1 .............................. tTemp = []
  [ 57] pushint8 1 .............................. <1>
  [ 59] setlocal 2
  [ 61] getlocal 2
  [ 63] pushint8 4 .............................. <4>
  [ 65] lteq
  [ 66] jmpifz [101] ............................ repeat with tstate = 1 to 4
  [ 69] getlocal 1 .............................. <tTemp>
  [ 71] pushcons 0 .............................. <"tile">
  [ 73] getlocal 0 .............................. <tTeamId>
  [ 75] joinstr ................................. <"tile" & tTeamId>
  [ 76] pushcons 1 .............................. <"_">
  [ 78] joinstr ................................. <"tile" & tTeamId & "_">
  [ 79] getlocal 2 .............................. <tstate>
  [ 81] joinstr ................................. <"tile" & tTeamId & "_" & tstate>
  [ 82] pusharglist 1 ........................... <"tile" & tTeamId & "_" & tstate>
  [ 84] extcall 171 ............................. <member("tile" & tTeamId & "_" & tstate)>
  [ 86] getobjprop 172 .......................... <member("tile" & tTeamId & "_" & tstate).image>
  [ 88] pusharglistnoret 2 ...................... <tTemp, member("tile" & tTeamId & "_" & tstate).image>
  [ 90] objcall 173 ............................. tTemp.add(member("tile" & tTeamId & "_" & tstate).image)
  [ 92] pushint8 1
  [ 94] getlocal 2
  [ 96] add
  [ 97] setlocal 2
  [ 99] endrepeat [ 61]
  [101] getprop 170 ............................. <pTileImages>
  [103] getlocal 1 .............................. <tTemp>
  [105] pusharglistnoret 2 ...................... <pTileImages, tTemp>
  [107] objcall 173 ............................. pTileImages.add(tTemp)
  [109] pushint8 1
  [111] getlocal 0
  [113] add
  [114] setlocal 0
  [116] endrepeat [ 44]
  [118] pushcons 2 .............................. <"tile0">
  [120] pusharglist 1 ........................... <"tile0">
  [122] extcall 175 ............................. <getmemnum("tile0")>
  [124] pusharglist 1 ........................... <getmemnum("tile0")>
  [126] extcall 171 ............................. <member(getmemnum("tile0"))>
  [128] getobjprop 172 .......................... <member(getmemnum("tile0")).image>
  [130] setprop 174 ............................. pEmptyTileImage = member(getmemnum("tile0")).image
  [132] getprop 174 ............................. <pEmptyTileImage>
  [134] getobjprop 177 .......................... <pEmptyTileImage.rect>
  [136] setprop 176 ............................. pTileImageRect = pEmptyTileImage.rect
  [138] pusharglist 0 ........................... <[]>
  [140] pushlist ................................ <[]>
  [141] setprop 178 ............................. pGeometryCache = []
  [143] pushint8 1 .............................. <1>
  [145] pusharglistnoret 1 ...................... <1>
  [147] extcall 13 .............................. return 1
  [149] ret
end

on deconstruct me
  [  0] pusharglist 0 ........................... <>
  [  2] extcall 43 .............................. <VOID>
  [  4] setprop 168 ............................. pGeometry = VOID
  [  6] pusharglist 0 ........................... <[]>
  [  8] pushlist ................................ <[]>
  [  9] setprop 170 ............................. pTileImages = []
  [ 11] pusharglist 0 ........................... <[]>
  [ 13] pushlist ................................ <[]>
  [ 14] setprop 174 ............................. pEmptyTileImage = []
  [ 16] pusharglist 0 ........................... <[]>
  [ 18] pushlist ................................ <[]>
  [ 19] setprop 178 ............................. pGeometryCache = []
  [ 21] getparam 0 .............................. <me>
  [ 23] pusharglist 1 ........................... <me>
  [ 25] objcall 25 .............................. <me.getID()>
  [ 27] pusharglistnoret 1 ...................... <me.getID()>
  [ 29] extcall 183 ............................. removeUpdate(me.getID())
  [ 31] getparam 0 .............................. <me>
  [ 33] pusharglistnoret 1 ...................... <me>
  [ 35] objcall 164 ............................. me.clearAll()
  [ 37] ret
end

on Refresh me, tTopic, tdata
  [  0] getparam 1 .............................. <tTopic>
  [  2] peek 0 .................................. case tTopic of
  [  4] pushsymb 184 ............................ <#fullgamestatus_tiles>
  [  6] eq
  [  7] jmpifz [ 39] ............................ (case) #fullgamestatus_tiles:
  [ 10] getparam 0 .............................. <me>
  [ 12] pusharglistnoret 1 ...................... <me>
  [ 14] objcall 163 ............................. me.initBuffer()
  [ 16] getparam 0 .............................. <me>
  [ 18] pusharglist 1 ........................... <me>
  [ 20] objcall 25 .............................. <me.getID()>
  [ 22] pusharglistnoret 1 ...................... <me.getID()>
  [ 24] extcall 185 ............................. receiveUpdate(me.getID())
  [ 26] getparam 0 .............................. <me>
  [ 28] pushsymb 186 ............................ <#gamestatus_flood>
  [ 30] getparam 2 .............................. <tdata>
  [ 32] pusharglistnoret 3 ...................... <me, #gamestatus_flood, tdata>
  [ 34] objcall 111 ............................. me.Refresh(#gamestatus_flood, tdata)
  [ 36] jmp [196]
  [ 39] peek 0
  [ 41] pushsymb 145 ............................ <#gamereset>
  [ 43] eq
  [ 44] jmpifz [ 66] ............................ (case) #gamereset:
  [ 47] getparam 0 .............................. <me>
  [ 49] pusharglistnoret 1 ...................... <me>
  [ 51] objcall 163 ............................. me.initBuffer()
  [ 53] getparam 0 .............................. <me>
  [ 55] pusharglist 1 ........................... <me>
  [ 57] objcall 25 .............................. <me.getID()>
  [ 59] pusharglistnoret 1 ...................... <me.getID()>
  [ 61] extcall 185 ............................. receiveUpdate(me.getID())
  [ 63] jmp [196]
  [ 66] peek 0
  [ 68] pushsymb 1258 ........................... <#world_ready>
  [ 71] eq
  [ 72] jmpifz [ 83] ............................ (case) #world_ready:
  [ 75] pushint8 1 .............................. <1>
  [ 77] setprop 1257 ............................ pWorldReady = 1
  [ 80] jmp [196]
  [ 83] peek 0
  [ 85] pushsymb 187 ............................ <#gamestatus_tiles>
  [ 87] eq
  [ 88] jmpifz [145] ............................ (case) #gamestatus_tiles:
  [ 91] getparam 2 .............................. <tdata>
  [ 93] peek 0
  [ 95] pusharglist 1
  [ 97] extcall 20
  [ 99] pushint8 1
  [101] peek 0
  [103] peek 2
  [105] lteq
  [106] jmpifz [140] ............................ repeat with tTileProps in tdata
  [109] peek 2
  [111] peek 1
  [113] pusharglist 2
  [115] extcall 18
  [117] setlocal 0
  [119] getprop 166 ............................. <pPriorityTaskList>
  [121] getlocal 0 .............................. <tTileProps>
  [123] pusharglistnoret 2 ...................... <pPriorityTaskList, tTileProps>
  [125] objcall 173 ............................. pPriorityTaskList.add(tTileProps)
  [127] getparam 0 .............................. <me>
  [129] getlocal 0 .............................. <tTileProps>
  [131] pusharglistnoret 2 ...................... <me, tTileProps>
  [133] objcall 160 ............................. me.removeSecondaryTask(tTileProps)
  [135] pushint8 1
  [137] add
  [138] endrepeat [101]
  [140] pop 3
  [142] jmp [196]
  [145] peek 0
  [147] pushsymb 186 ............................ <#gamestatus_flood>
  [149] eq
  [150] jmpifz [196] ............................ (case) #gamestatus_flood:
  [153] getparam 2 .............................. <tdata>
  [155] peek 0
  [157] pusharglist 1
  [159] extcall 20
  [161] pushint8 1
  [163] peek 0
  [165] peek 2
  [167] lteq
  [168] jmpifz [194] ............................ repeat with tTileProps in tdata
  [171] peek 2
  [173] peek 1
  [175] pusharglist 2
  [177] extcall 18
  [179] setlocal 0
  [181] getprop 167 ............................. <pSecondaryTaskList>
  [183] getlocal 0 .............................. <tTileProps>
  [185] pusharglistnoret 2 ...................... <pSecondaryTaskList, tTileProps>
  [187] objcall 173 ............................. pSecondaryTaskList.add(tTileProps)
  [189] pushint8 1
  [191] add
  [192] endrepeat [163]
  [194] pop 3
  [196] pop 1 ................................... end case
  [198] ret
end

on update me
  [  0] getprop 1257 ............................ <pWorldReady>
  [  3] pushzero ................................ <0>
  [  4] eq ...................................... <pWorldReady = 0>
  [  5] jmpifz [ 13] ............................ if pWorldReady = 0 then
  [  8] pushzero ................................ <0>
  [  9] pusharglistnoret 1 ...................... <0>
  [ 11] extcall 13 .............................. return 0
  [ 13] getprop 166 ............................. <pPriorityTaskList>
  [ 15] getobjprop 20 ........................... <pPriorityTaskList.count>
  [ 17] pushzero ................................ <0>
  [ 18] eq ...................................... <pPriorityTaskList.count = 0>
  [ 19] jmpifz [103] ............................ if pPriorityTaskList.count = 0 then / else
  [ 22] getprop 167 ............................. <pSecondaryTaskList>
  [ 24] getobjprop 20 ........................... <pSecondaryTaskList.count>
  [ 26] pushzero ................................ <0>
  [ 27] eq ...................................... <pSecondaryTaskList.count = 0>
  [ 28] jmpifz [ 37] ............................ if pSecondaryTaskList.count = 0 then
  [ 31] pushint8 1 .............................. <1>
  [ 33] pusharglistnoret 1 ...................... <1>
  [ 35] extcall 13 .............................. return 1
  [ 37] pushint8 1 .............................. <1>
  [ 39] setlocal 0
  [ 41] getlocal 0
  [ 43] getprop 1228 ............................ <pSecondaryTilesPerUpdate>
  [ 46] lteq
  [ 47] jmpifz [100] ............................ repeat with tTilesToRender = 1 to pSecondaryTilesPerUpdate
  [ 50] getprop 167 ............................. <pSecondaryTaskList>
  [ 52] getobjprop 20 ........................... <pSecondaryTaskList.count>
  [ 54] pushzero ................................ <0>
  [ 55] eq ...................................... <pSecondaryTaskList.count = 0>
  [ 56] jmpifz [ 65] ............................ if pSecondaryTaskList.count = 0 then
  [ 59] pushint8 1 .............................. <1>
  [ 61] pusharglistnoret 1 ...................... <1>
  [ 63] extcall 13 .............................. return 1
  [ 65] getprop 167 ............................. <pSecondaryTaskList>
  [ 67] pushint8 1 .............................. <1>
  [ 69] pusharglist 2 ........................... <pSecondaryTaskList, 1>
  [ 71] objcall 18 .............................. <pSecondaryTaskList[1]>
  [ 73] setlocal 1 .............................. tProps = pSecondaryTaskList[1]
  [ 75] getprop 167 ............................. <pSecondaryTaskList>
  [ 77] pushint8 1 .............................. <1>
  [ 79] pusharglistnoret 2 ...................... <pSecondaryTaskList, 1>
  [ 81] objcall 67 .............................. pSecondaryTaskList.deleteAt(1)
  [ 83] getparam 0 .............................. <me>
  [ 85] getlocal 1 .............................. <tProps>
  [ 87] pusharglistnoret 2 ...................... <me, tProps>
  [ 89] objcall 161 ............................. me.render(tProps)
  [ 91] pushint8 1
  [ 93] getlocal 0
  [ 95] add
  [ 96] setlocal 0
  [ 98] endrepeat [ 41]
  [100] jmp [169]
  [103] pushint8 1 .............................. <1>
  [105] setlocal 0
  [107] getlocal 0
  [109] getprop 165 ............................. <pPriorityTilesPerUpdate>
  [111] lteq
  [112] jmpifz [169] ............................ repeat with tTilesToRender = 1 to pPriorityTilesPerUpdate
  [115] getprop 166 ............................. <pPriorityTaskList>
  [117] pushint8 1 .............................. <1>
  [119] pusharglist 2 ........................... <pPriorityTaskList, 1>
  [121] objcall 18 .............................. <pPriorityTaskList[1]>
  [123] setlocal 1 .............................. tProps = pPriorityTaskList[1]
  [125] getprop 166 ............................. <pPriorityTaskList>
  [127] pushint8 1 .............................. <1>
  [129] pusharglistnoret 2 ...................... <pPriorityTaskList, 1>
  [131] objcall 67 .............................. pPriorityTaskList.deleteAt(1)
  [133] getparam 0 .............................. <me>
  [135] getlocal 1 .............................. <tProps>
  [137] pusharglistnoret 2 ...................... <me, tProps>
  [139] objcall 161 ............................. me.render(tProps)
  [141] getprop 166 ............................. <pPriorityTaskList>
  [143] getobjprop 20 ........................... <pPriorityTaskList.count>
  [145] pushzero ................................ <0>
  [146] eq ...................................... <pPriorityTaskList.count = 0>
  [147] jmpifz [160] ............................ if pPriorityTaskList.count = 0 then
  [150] getparam 0 .............................. <me>
  [152] pusharglist 1 ........................... <me>
  [154] objcall 51 .............................. <me.update()>
  [156] pusharglistnoret 1 ...................... <me.update()>
  [158] extcall 13 .............................. return me.update()
  [160] pushint8 1
  [162] getlocal 0
  [164] add
  [165] setlocal 0
  [167] endrepeat [107]
  [169] pushint8 1 .............................. <1>
  [171] pusharglistnoret 1 ...................... <1>
  [173] extcall 13 .............................. return 1
  [175] ret
end

on removeSecondaryTask me, tProps
  [  0] getparam 1 .............................. <tProps>
  [  2] pushsymb 10 ............................. <#x>
  [  4] pusharglist 2 ........................... <tProps, #x>
  [  6] objcall 18 .............................. <tProps[#x]>
  [  8] setlocal 0 .............................. tLocX = tProps[#x]
  [ 10] getparam 1 .............................. <tProps>
  [ 12] pushsymb 11 ............................. <#y>
  [ 14] pusharglist 2 ........................... <tProps, #y>
  [ 16] objcall 18 .............................. <tProps[#y]>
  [ 18] setlocal 1 .............................. tLocY = tProps[#y]
  [ 20] pushint8 1 .............................. <1>
  [ 22] setlocal 2
  [ 24] getlocal 2
  [ 26] getprop 167 ............................. <pSecondaryTaskList>
  [ 28] getobjprop 20 ........................... <pSecondaryTaskList.count>
  [ 30] lteq
  [ 31] jmpifz [ 93] ............................ repeat with i = 1 to pSecondaryTaskList.count
  [ 34] getprop 167 ............................. <pSecondaryTaskList>
  [ 36] getlocal 2 .............................. <i>
  [ 38] pusharglist 2 ........................... <pSecondaryTaskList, i>
  [ 40] objcall 18 .............................. <pSecondaryTaskList[i]>
  [ 42] setlocal 3 .............................. tItem = pSecondaryTaskList[i]
  [ 44] getlocal 3 .............................. <tItem>
  [ 46] pushsymb 10 ............................. <#x>
  [ 48] pusharglist 2 ........................... <tItem, #x>
  [ 50] objcall 18 .............................. <tItem[#x]>
  [ 52] getlocal 0 .............................. <tLocX>
  [ 54] eq ...................................... <tItem[#x] = tLocX>
  [ 55] getlocal 3 .............................. <tItem>
  [ 57] pushsymb 11 ............................. <#y>
  [ 59] pusharglist 2 ........................... <tItem, #y>
  [ 61] objcall 18 .............................. <tItem[#y]>
  [ 63] getlocal 1 .............................. <tLocY>
  [ 65] eq ...................................... <tItem[#y] = tLocY>
  [ 66] and ..................................... <(tItem[#x] = tLocX) and (tItem[#y] = tLocY)>
  [ 67] jmpifz [ 84] ............................ if (tItem[#x] = tLocX) and (tItem[#y] = tLocY) then
  [ 70] getprop 167 ............................. <pSecondaryTaskList>
  [ 72] getlocal 2 .............................. <i>
  [ 74] pusharglistnoret 2 ...................... <pSecondaryTaskList, i>
  [ 76] objcall 67 .............................. pSecondaryTaskList.deleteAt(i)
  [ 78] pushint8 1 .............................. <1>
  [ 80] pusharglistnoret 1 ...................... <1>
  [ 82] extcall 13 .............................. return 1
  [ 84] pushint8 1
  [ 86] getlocal 2
  [ 88] add
  [ 89] setlocal 2
  [ 91] endrepeat [ 24]
  [ 93] pushint8 1 .............................. <1>
  [ 95] pusharglistnoret 1 ...................... <1>
  [ 97] extcall 13 .............................. return 1
  [ 99] ret
end

on render me, tProps
  [  0] getparam 1 .............................. <tProps>
  [  2] pusharglist 1 ........................... <tProps>
  [  4] extcall 85 .............................. <ilk(tProps)>
  [  6] pushsymb 86 ............................. <#propList>
  [  8] eq ...................................... <ilk(tProps) = #propList>
  [  9] not ..................................... <not (ilk(tProps) = #propList)>
  [ 10] jmpifz [ 18] ............................ if not (ilk(tProps) = #propList) then
  [ 13] pushzero ................................ <0>
  [ 14] pusharglistnoret 1 ...................... <0>
  [ 16] extcall 13 .............................. return 0
  [ 18] getparam 1 .............................. <tProps>
  [ 20] pushsymb 194 ............................ <#jumps>
  [ 22] pusharglist 2 ........................... <tProps, #jumps>
  [ 24] objcall 18 .............................. <tProps[#jumps]>
  [ 26] setlocal 0 .............................. tstate = tProps[#jumps]
  [ 28] getparam 1 .............................. <tProps>
  [ 30] pushsymb 195 ............................ <#teamId>
  [ 32] pusharglist 2 ........................... <tProps, #teamId>
  [ 34] objcall 18 .............................. <tProps[#teamId]>
  [ 36] pushint8 1 .............................. <1>
  [ 38] add ..................................... <tProps[#teamId] + 1>
  [ 39] setlocal 1 .............................. tTeamId = tProps[#teamId] + 1
  [ 41] getlocal 0 .............................. <tstate>
  [ 43] pushzero ................................ <0>
  [ 44] lteq .................................... <tstate <= 0>
  [ 45] jmpifz [ 55] ............................ if tstate <= 0 then / else
  [ 48] getprop 174 ............................. <pEmptyTileImage>
  [ 50] setlocal 2 .............................. tImage = pEmptyTileImage
  [ 52] jmp [104]
  [ 55] getlocal 0 .............................. <tstate>
  [ 57] getprop 170 ............................. <pTileImages>
  [ 59] getlocal 1 .............................. <tTeamId>
  [ 61] pusharglist 2 ........................... <pTileImages, tTeamId>
  [ 63] objcall 18 .............................. <pTileImages[tTeamId]>
  [ 65] getobjprop 20 ........................... <pTileImages[tTeamId].count>
  [ 67] gt ...................................... <tstate > pTileImages[tTeamId].count>
  [ 68] jmpifz [ 88] ............................ if tstate > pTileImages[tTeamId].count then
  [ 71] getparam 0 .............................. <me>
  [ 73] pushcons 3 .............................. <"Invalid state on tile:">
  [ 75] getparam 1 .............................. <tProps>
  [ 77] joinpadstr .............................. <"Invalid state on tile:" && tProps>
  [ 78] pushsymb 161 ............................ <#render>
  [ 80] pusharglist 3 ........................... <me, "Invalid state on tile:" && tProps, #render>
  [ 82] extcall 19 .............................. <error(me, "Invalid state on tile:" && tProps, #render)>
  [ 84] pusharglistnoret 1 ...................... <error(me, "Invalid state on tile:" && tProps, #render)>
  [ 86] extcall 13 .............................. return error(me, "Invalid state on tile:" && tProps, #render)
  [ 88] getprop 170 ............................. <pTileImages>
  [ 90] getlocal 1 .............................. <tTeamId>
  [ 92] pusharglist 2 ........................... <pTileImages, tTeamId>
  [ 94] objcall 18 .............................. <pTileImages[tTeamId]>
  [ 96] getlocal 0 .............................. <tstate>
  [ 98] pusharglist 2 ........................... <pTileImages[tTeamId], tstate>
  [100] objcall 18 .............................. <pTileImages[tTeamId][tstate]>
  [102] setlocal 2 .............................. tImage = pTileImages[tTeamId][tstate]
  [104] getlocal 2 .............................. <tImage>
  [106] pusharglist 0 ........................... <>
  [108] extcall 43 .............................. <VOID>
  [110] eq ...................................... <tImage = VOID>
  [111] jmpifz [119] ............................ if tImage = VOID then
  [114] pushzero ................................ <0>
  [115] pusharglistnoret 1 ...................... <0>
  [117] extcall 13 .............................. return 0
  [119] getparam 0 .............................. <me>
  [121] getparam 1 .............................. <tProps>
  [123] pushsymb 10 ............................. <#x>
  [125] pusharglist 2 ........................... <tProps, #x>
  [127] objcall 18 .............................. <tProps[#x]>
  [129] getparam 1 .............................. <tProps>
  [131] pushsymb 11 ............................. <#y>
  [133] pusharglist 2 ........................... <tProps, #y>
  [135] objcall 18 .............................. <tProps[#y]>
  [137] pusharglist 3 ........................... <me, tProps[#x], tProps[#y]>
  [139] objcall 916 ............................. <me.getTileRect(tProps[#x], tProps[#y])>
  [142] setlocal 3 .............................. tTargetRect = me.getTileRect(tProps[#x], tProps[#y])
  [144] pushint8 2 .............................. <2>
  [146] pusharglist 1 ........................... <2>
  [148] extcall 1065 ............................ <random(2)>
  [151] pushint8 1 .............................. <1>
  [153] eq ...................................... <random(2) = 1>
  [154] jmpifz [190] ............................ if random(2) = 1 then / else
  [157] getprop 196 ............................. <pBuffer>
  [159] getlocal 2 .............................. <tImage>
  [161] getlocal 3 .............................. <tTargetRect>
  [163] getlocal 2 .............................. <tImage>
  [165] getobjprop 177 .......................... <tImage.rect>
  [167] pushsymb 197 ............................ <#ink>
  [169] pushint8 36 ............................. <36>
  [171] pushsymb 718 ............................ <#paletteRef>
  [174] pushcons 4 .............................. <"bb_colors_1">
  [176] pusharglist 1 ........................... <"bb_colors_1">
  [178] extcall 171 ............................. <member("bb_colors_1")>
  [180] pusharglist 4 ........................... <[#ink: 36, #paletteRef: member("bb_colors_1")]>
  [182] pushproplist ............................ <[#ink: 36, #paletteRef: member("bb_colors_1")]>
  [183] pusharglistnoret 5 ...................... <pBuffer, tImage, tTargetRect, tImage.rect, [#ink: 36, #paletteRef: member("bb_colors_1")]>
  [185] objcall 198 ............................. pBuffer.copyPixels(tImage, tTargetRect, tImage.rect, [#ink: 36, #paletteRef: member("bb_colors_1")])
  [187] jmp [211]
  [190] getprop 196 ............................. <pBuffer>
  [192] getlocal 2 .............................. <tImage>
  [194] getlocal 3 .............................. <tTargetRect>
  [196] getlocal 2 .............................. <tImage>
  [198] getobjprop 177 .......................... <tImage.rect>
  [200] pushsymb 197 ............................ <#ink>
  [202] pushint8 36 ............................. <36>
  [204] pusharglist 2 ........................... <[#ink: 36]>
  [206] pushproplist ............................ <[#ink: 36]>
  [207] pusharglistnoret 5 ...................... <pBuffer, tImage, tTargetRect, tImage.rect, [#ink: 36]>
  [209] objcall 198 ............................. pBuffer.copyPixels(tImage, tTargetRect, tImage.rect, [#ink: 36])
  [211] pushint8 1 .............................. <1>
  [213] pusharglistnoret 1 ...................... <1>
  [215] extcall 13 .............................. return 1
  [217] ret
end

on getTileRect me, tX, tY
  [  0] getparam 1 .............................. <tX>
  [  2] pushint8 1 .............................. <1>
  [  4] add ..................................... <tX + 1>
  [  5] setlocal 0 .............................. tIndexX = tX + 1
  [  7] getparam 2 .............................. <tY>
  [  9] pushint8 1 .............................. <1>
  [ 11] add ..................................... <tY + 1>
  [ 12] setlocal 1 .............................. tIndexY = tY + 1
  [ 14] getprop 178 ............................. <pGeometryCache>
  [ 16] getobjprop 20 ........................... <pGeometryCache.count>
  [ 18] getlocal 1 .............................. <tIndexY>
  [ 20] gteq .................................... <pGeometryCache.count >= tIndexY>
  [ 21] jmpifz [104] ............................ if pGeometryCache.count >= tIndexY then / else
  [ 24] getprop 178 ............................. <pGeometryCache>
  [ 26] getlocal 1 .............................. <tIndexY>
  [ 28] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 30] objcall 18 .............................. <pGeometryCache[tIndexY]>
  [ 32] pushzero ................................ <0>
  [ 33] eq ...................................... <pGeometryCache[tIndexY] = 0>
  [ 34] jmpifz [ 48] ............................ if pGeometryCache[tIndexY] = 0 then
  [ 37] getprop 178 ............................. <pGeometryCache>
  [ 39] getlocal 1 .............................. <tIndexY>
  [ 41] pusharglist 0 ........................... <[]>
  [ 43] pushlist ................................ <[]>
  [ 44] pusharglistnoret 3 ...................... <pGeometryCache, tIndexY, []>
  [ 46] objcall 21 .............................. pGeometryCache[tIndexY] = []
  [ 48] getprop 178 ............................. <pGeometryCache>
  [ 50] getlocal 1 .............................. <tIndexY>
  [ 52] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 54] objcall 18 .............................. <pGeometryCache[tIndexY]>
  [ 56] getobjprop 20 ........................... <pGeometryCache[tIndexY].count>
  [ 58] getlocal 0 .............................. <tIndexX>
  [ 60] gteq .................................... <pGeometryCache[tIndexY].count >= tIndexX>
  [ 61] jmpifz [101] ............................ if pGeometryCache[tIndexY].count >= tIndexX then
  [ 64] getprop 178 ............................. <pGeometryCache>
  [ 66] getlocal 1 .............................. <tIndexY>
  [ 68] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 70] objcall 18 .............................. <pGeometryCache[tIndexY]>
  [ 72] getlocal 0 .............................. <tIndexX>
  [ 74] pusharglist 2 ........................... <pGeometryCache[tIndexY], tIndexX>
  [ 76] objcall 18 .............................. <pGeometryCache[tIndexY][tIndexX]>
  [ 78] pushzero ................................ <0>
  [ 79] nteq .................................... <pGeometryCache[tIndexY][tIndexX] <> 0>
  [ 80] jmpifz [101] ............................ if pGeometryCache[tIndexY][tIndexX] <> 0 then
  [ 83] getprop 178 ............................. <pGeometryCache>
  [ 85] getlocal 1 .............................. <tIndexY>
  [ 87] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [ 89] objcall 18 .............................. <pGeometryCache[tIndexY]>
  [ 91] getlocal 0 .............................. <tIndexX>
  [ 93] pusharglist 2 ........................... <pGeometryCache[tIndexY], tIndexX>
  [ 95] objcall 18 .............................. <pGeometryCache[tIndexY][tIndexX]>
  [ 97] pusharglistnoret 1 ...................... <pGeometryCache[tIndexY][tIndexX]>
  [ 99] extcall 13 .............................. return pGeometryCache[tIndexY][tIndexX]
  [101] jmp [115]
  [104] getprop 178 ............................. <pGeometryCache>
  [106] getlocal 1 .............................. <tIndexY>
  [108] pusharglist 0 ........................... <[]>
  [110] pushlist ................................ <[]>
  [111] pusharglistnoret 3 ...................... <pGeometryCache, tIndexY, []>
  [113] objcall 21 .............................. pGeometryCache[tIndexY] = []
  [115] pushfloat32 0.0 ......................... <0.0>
  [120] setlocal 2 .............................. tHeight = 0.0
  [122] getparam 0 .............................. <me>
  [124] pusharglist 1 ........................... <me>
  [126] objcall 24 .............................. <me.getGameSystem()>
  [128] setlocal 3 .............................. tGameSystem = me.getGameSystem()
  [130] getlocal 3 .............................. <tGameSystem>
  [132] pushzero ................................ <0>
  [133] eq ...................................... <tGameSystem = 0>
  [134] jmpifz [142] ............................ if tGameSystem = 0 then
  [137] pushzero ................................ <0>
  [138] pusharglistnoret 1 ...................... <0>
  [140] extcall 13 .............................. return 0
  [142] getlocal 3 .............................. <tGameSystem>
  [144] pusharglist 1 ........................... <tGameSystem>
  [146] objcall 48 .............................. <tGameSystem.getWorld()>
  [148] setlocal 4 .............................. tWorld = tGameSystem.getWorld()
  [150] getlocal 4 .............................. <tWorld>
  [152] getparam 1 .............................. <tX>
  [154] getparam 2 .............................. <tY>
  [156] pusharglist 3 ........................... <tWorld, tX, tY>
  [158] objcall 94 .............................. <tWorld.getTile(tX, tY)>
  [160] setlocal 5 .............................. tTile = tWorld.getTile(tX, tY)
  [162] getlocal 5 .............................. <tTile>
  [164] pushzero ................................ <0>
  [165] nteq .................................... <tTile <> 0>
  [166] jmpifz [223] ............................ if tTile <> 0 then / else
  [169] getlocal 5 .............................. <tTile>
  [171] pusharglist 1 ........................... <tTile>
  [173] objcall 96 .............................. <tTile.getType()>
  [175] pusharglist 1 ........................... <tTile.getType()>
  [177] extcall 95 .............................. <integer(tTile.getType())>
  [179] setlocal 6 .............................. ttype = integer(tTile.getType())
  [181] getlocal 6 .............................. <ttype>
  [183] pusharglist 1 ........................... <ttype>
  [185] extcall 97 .............................. <integerp(ttype)>
  [187] jmpifz [197] ............................ if integerp(ttype) then / else
  [190] getlocal 6 .............................. <ttype>
  [192] setlocal 2 .............................. tHeight = ttype
  [194] jmp [220]
  [197] getparam 0 .............................. <me>
  [199] pushcons 5 .............................. <"Invalid tile height:">
  [201] getparam 1 .............................. <tX>
  [203] joinpadstr .............................. <"Invalid tile height:" && tX>
  [204] getparam 2 .............................. <tY>
  [206] joinpadstr .............................. <"Invalid tile height:" && tX && tY>
  [207] getlocal 6 .............................. <ttype>
  [209] joinpadstr .............................. <"Invalid tile height:" && tX && tY && ttype>
  [210] pushsymb 201 ............................ <#getTileProperties>
  [212] pusharglist 3 ........................... <me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties>
  [214] extcall 19 .............................. <error(me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties)>
  [216] pusharglistnoret 1 ...................... <error(me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties)>
  [218] extcall 13 .............................. return error(me, "Invalid tile height:" && tX && tY && ttype, #getTileProperties)
  [220] jmp [243]
  [223] getparam 0 .............................. <me>
  [225] pushcons 6 .............................. <"Invalid tile coordinates:">
  [227] getparam 1 .............................. <tX>
  [229] joinpadstr .............................. <"Invalid tile coordinates:" && tX>
  [230] getparam 2 .............................. <tY>
  [232] joinpadstr .............................. <"Invalid tile coordinates:" && tX && tY>
  [233] pushsymb 201 ............................ <#getTileProperties>
  [235] pusharglist 3 ........................... <me, "Invalid tile coordinates:" && tX && tY, #getTileProperties>
  [237] extcall 19 .............................. <error(me, "Invalid tile coordinates:" && tX && tY, #getTileProperties)>
  [239] pusharglistnoret 1 ...................... <error(me, "Invalid tile coordinates:" && tX && tY, #getTileProperties)>
  [241] extcall 13 .............................. return error(me, "Invalid tile coordinates:" && tX && tY, #getTileProperties)
  [243] getprop 168 ............................. <pGeometry>
  [245] getparam 1 .............................. <tX>
  [247] getparam 2 .............................. <tY>
  [249] getlocal 2 .............................. <tHeight>
  [251] pusharglist 4 ........................... <pGeometry, tX, tY, tHeight>
  [253] objcall 202 ............................. <pGeometry.getScreenCoordinate(tX, tY, tHeight)>
  [255] setlocal 7 .............................. tScreenLoc = pGeometry.getScreenCoordinate(tX, tY, tHeight)
  [257] getprop 46 .............................. <pSprite>
  [259] pusharglist 0 ........................... <>
  [261] extcall 43 .............................. <VOID>
  [263] eq ...................................... <pSprite = VOID>
  [264] jmpifz [272] ............................ if pSprite = VOID then
  [267] pushzero ................................ <0>
  [268] pusharglistnoret 1 ...................... <0>
  [270] extcall 13 .............................. return 0
  [272] getlocal 7 .............................. <tScreenLoc>
  [274] pushint8 1 .............................. <1>
  [276] getlocal 7 .............................. <tScreenLoc>
  [278] pushint8 1 .............................. <1>
  [280] pusharglist 2 ........................... <tScreenLoc, 1>
  [282] objcall 18 .............................. <tScreenLoc[1]>
  [284] getprop 46 .............................. <pSprite>
  [286] getobjprop 203 .......................... <pSprite.left>
  [288] sub ..................................... <tScreenLoc[1] - pSprite.left>
  [289] pushint8 2 .............................. <2>
  [291] add ..................................... <tScreenLoc[1] - pSprite.left + 2>
  [292] pusharglistnoret 3 ...................... <tScreenLoc, 1, tScreenLoc[1] - pSprite.left + 2>
  [294] objcall 21 .............................. tScreenLoc[1] = tScreenLoc[1] - pSprite.left + 2
  [296] getlocal 7 .............................. <tScreenLoc>
  [298] pushint8 2 .............................. <2>
  [300] getlocal 7 .............................. <tScreenLoc>
  [302] pushint8 2 .............................. <2>
  [304] pusharglist 2 ........................... <tScreenLoc, 2>
  [306] objcall 18 .............................. <tScreenLoc[2]>
  [308] getprop 46 .............................. <pSprite>
  [310] getobjprop 204 .......................... <pSprite.top>
  [312] sub ..................................... <tScreenLoc[2] - pSprite.top>
  [313] getprop 176 ............................. <pTileImageRect>
  [315] getobjprop 205 .......................... <pTileImageRect.height>
  [317] pushint8 2 .............................. <2>
  [319] div ..................................... <pTileImageRect.height / 2>
  [320] sub ..................................... <tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2)>
  [321] pushint8 1 .............................. <1>
  [323] sub ..................................... <tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2) - 1>
  [324] pusharglistnoret 3 ...................... <tScreenLoc, 2, tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2) - 1>
  [326] objcall 21 .............................. tScreenLoc[2] = tScreenLoc[2] - pSprite.top - (pTileImageRect.height / 2) - 1
  [328] getprop 176 ............................. <pTileImageRect>
  [330] getlocal 7 .............................. <tScreenLoc>
  [332] pushint8 1 .............................. <1>
  [334] pusharglist 2 ........................... <tScreenLoc, 1>
  [336] objcall 18 .............................. <tScreenLoc[1]>
  [338] getlocal 7 .............................. <tScreenLoc>
  [340] pushint8 2 .............................. <2>
  [342] pusharglist 2 ........................... <tScreenLoc, 2>
  [344] objcall 18 .............................. <tScreenLoc[2]>
  [346] getlocal 7 .............................. <tScreenLoc>
  [348] pushint8 1 .............................. <1>
  [350] pusharglist 2 ........................... <tScreenLoc, 1>
  [352] objcall 18 .............................. <tScreenLoc[1]>
  [354] getlocal 7 .............................. <tScreenLoc>
  [356] pushint8 2 .............................. <2>
  [358] pusharglist 2 ........................... <tScreenLoc, 2>
  [360] objcall 18 .............................. <tScreenLoc[2]>
  [362] pusharglist 4 ........................... <tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2]>
  [364] extcall 177 ............................. <rect(tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2])>
  [366] add ..................................... <pTileImageRect + rect(tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2])>
  [367] setlocal 8 .............................. tTargetRect = pTileImageRect + rect(tScreenLoc[1], tScreenLoc[2], tScreenLoc[1], tScreenLoc[2])
  [369] getprop 178 ............................. <pGeometryCache>
  [371] getlocal 1 .............................. <tIndexY>
  [373] pusharglist 2 ........................... <pGeometryCache, tIndexY>
  [375] objcall 18 .............................. <pGeometryCache[tIndexY]>
  [377] getlocal 0 .............................. <tIndexX>
  [379] getlocal 8 .............................. <tTargetRect>
  [381] pusharglistnoret 3 ...................... <pGeometryCache[tIndexY], tIndexX, tTargetRect>
  [383] objcall 21 .............................. pGeometryCache[tIndexY][tIndexX] = tTargetRect
  [385] getlocal 8 .............................. <tTargetRect>
  [387] pusharglistnoret 1 ...................... <tTargetRect>
  [389] extcall 13 .............................. return tTargetRect
  [391] ret
end

on initBuffer me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setprop 166 ............................. pPriorityTaskList = []
  [  5] pusharglist 0 ........................... <[]>
  [  7] pushlist ................................ <[]>
  [  8] setprop 167 ............................. pSecondaryTaskList = []
  [ 10] pushcons 7 .............................. <"bin_image">
  [ 12] setlocal 0 .............................. tName = "bin_image"
  [ 14] getlocal 0 .............................. <tName>
  [ 16] pusharglist 1 ........................... <tName>
  [ 18] extcall 175 ............................. <getmemnum(tName)>
  [ 20] pusharglist 1 ........................... <getmemnum(tName)>
  [ 22] extcall 171 ............................. <member(getmemnum(tName))>
  [ 24] setprop 213 ............................. pMember = member(getmemnum(tName))
  [ 26] pushsymb 156 ............................ <#room_interface>
  [ 28] pusharglist 1 ........................... <#room_interface>
  [ 30] extcall 153 ............................. <getObject(#room_interface)>
  [ 32] pusharglist 1 ........................... <getObject(#room_interface)>
  [ 34] objcall 216 ............................. <getObject(#room_interface).getRoomVisualizer()>
  [ 36] setlocal 1 .............................. tVisObj = getObject(#room_interface).getRoomVisualizer()
  [ 38] getlocal 1 .............................. <tVisObj>
  [ 40] pushzero ................................ <0>
  [ 41] eq ...................................... <tVisObj = 0>
  [ 42] jmpifz [ 59] ............................ if tVisObj = 0 then
  [ 45] getparam 0 .............................. <me>
  [ 47] pushcons 8 .............................. <"Room visualizer not found.">
  [ 49] pushsymb 163 ............................ <#initBuffer>
  [ 51] pusharglist 3 ........................... <me, "Room visualizer not found.", #initBuffer>
  [ 53] extcall 19 .............................. <error(me, "Room visualizer not found.", #initBuffer)>
  [ 55] pusharglistnoret 1 ...................... <error(me, "Room visualizer not found.", #initBuffer)>
  [ 57] extcall 13 .............................. return error(me, "Room visualizer not found.", #initBuffer)
  [ 59] getlocal 1 .............................. <tVisObj>
  [ 61] pushcons 9 .............................. <"floor">
  [ 63] pusharglist 2 ........................... <tVisObj, "floor">
  [ 65] objcall 217 ............................. <tVisObj.getSprById("floor")>
  [ 67] setprop 46 .............................. pSprite = tVisObj.getSprById("floor")
  [ 69] getprop 46 .............................. <pSprite>
  [ 71] pushzero ................................ <0>
  [ 72] eq ...................................... <pSprite = 0>
  [ 73] jmpifz [ 90] ............................ if pSprite = 0 then
  [ 76] getparam 0 .............................. <me>
  [ 78] pushcons 10 ............................. <"Arena floor not found.">
  [ 80] pushsymb 163 ............................ <#initBuffer>
  [ 82] pusharglist 3 ........................... <me, "Arena floor not found.", #initBuffer>
  [ 84] extcall 19 .............................. <error(me, "Arena floor not found.", #initBuffer)>
  [ 86] pusharglistnoret 1 ...................... <error(me, "Arena floor not found.", #initBuffer)>
  [ 88] extcall 13 .............................. return error(me, "Arena floor not found.", #initBuffer)
  [ 90] getprop 1030 ............................ <pOrigMemberName>
  [ 93] pusharglist 0 ........................... <>
  [ 95] extcall 43 .............................. <VOID>
  [ 97] eq ...................................... <pOrigMemberName = VOID>
  [ 98] jmpifz [110] ............................ if pOrigMemberName = VOID then
  [101] getprop 46 .............................. <pSprite>
  [103] getchainedprop 171 ...................... <pSprite.member>
  [105] getobjprop 224 .......................... <pSprite.member.name>
  [107] setprop 1030 ............................ pOrigMemberName = pSprite.member.name
  [110] getprop 1030 ............................ <pOrigMemberName>
  [113] pusharglist 1 ........................... <pOrigMemberName>
  [115] extcall 175 ............................. <getmemnum(pOrigMemberName)>
  [117] pusharglist 1 ........................... <getmemnum(pOrigMemberName)>
  [119] extcall 171 ............................. <member(getmemnum(pOrigMemberName))>
  [121] setlocal 2 .............................. tOrigMember = member(getmemnum(pOrigMemberName))
  [123] getlocal 2 .............................. <tOrigMember>
  [125] getobjprop 172 .......................... <tOrigMember.image>
  [127] setlocal 3 .............................. tImg = tOrigMember.image
  [129] getprop 213 ............................. <pMember>
  [131] getlocal 3 .............................. <tImg>
  [133] getobjprop 218 .......................... <tImg.width>
  [135] getlocal 3 .............................. <tImg>
  [137] getobjprop 205 .......................... <tImg.height>
  [139] pushint8 8 .............................. <8>
  [141] pusharglist 3 ........................... <tImg.width, tImg.height, 8>
  [143] extcall 172 ............................. <image(tImg.width, tImg.height, 8)>
  [145] setobjprop 172 .......................... pMember.image = image(tImg.width, tImg.height, 8)
  [147] getprop 213 ............................. <pMember>
  [149] getlocal 2 .............................. <tOrigMember>
  [151] getobjprop 718 .......................... <tOrigMember.paletteRef>
  [154] setobjprop 718 .......................... pMember.paletteRef = tOrigMember.paletteRef
  [157] getprop 213 ............................. <pMember>
  [159] getchainedprop 172 ...................... <pMember.image>
  [161] getlocal 3 .............................. <tImg>
  [163] getlocal 3 .............................. <tImg>
  [165] getobjprop 177 .......................... <tImg.rect>
  [167] getlocal 3 .............................. <tImg>
  [169] getobjprop 177 .......................... <tImg.rect>
  [171] pusharglistnoret 4 ...................... <pMember.image, tImg, tImg.rect, tImg.rect>
  [173] objcall 198 ............................. pMember.image.copyPixels(tImg, tImg.rect, tImg.rect)
  [175] getprop 213 ............................. <pMember>
  [177] getlocal 2 .............................. <tOrigMember>
  [179] getobjprop 219 .......................... <tOrigMember.regPoint>
  [181] setobjprop 219 .......................... pMember.regPoint = tOrigMember.regPoint
  [183] getprop 213 ............................. <pMember>
  [185] getobjprop 172 .......................... <pMember.image>
  [187] setprop 196 ............................. pBuffer = pMember.image
  [189] getprop 46 .............................. <pSprite>
  [191] getprop 213 ............................. <pMember>
  [193] pusharglistnoret 2 ...................... <pSprite, pMember>
  [195] objcall 220 ............................. pSprite.setMember(pMember)
  [197] ret
end

on clearAll me
  [  0] getprop 213 ............................. <pMember>
  [  2] getobjprop 85 ........................... <pMember.ilk>
  [  4] pushsymb 171 ............................ <#member>
  [  6] eq ...................................... <pMember.ilk = #member>
  [  7] jmpifz [ 24] ............................ if pMember.ilk = #member then
  [ 10] getprop 213 ............................. <pMember>
  [ 12] pushint8 1 .............................. <1>
  [ 14] pushint8 1 .............................. <1>
  [ 16] pushint8 8 .............................. <8>
  [ 18] pusharglist 3 ........................... <1, 1, 8>
  [ 20] extcall 172 ............................. <image(1, 1, 8)>
  [ 22] setobjprop 172 .......................... pMember.image = image(1, 1, 8)
  [ 24] pusharglist 0 ........................... <>
  [ 26] extcall 43 .............................. <VOID>
  [ 28] setprop 196 ............................. pBuffer = VOID
  [ 30] pusharglist 0 ........................... <>
  [ 32] extcall 43 .............................. <VOID>
  [ 34] setprop 213 ............................. pMember = VOID
  [ 36] pushint8 1 .............................. <1>
  [ 38] pusharglistnoret 1 ...................... <1>
  [ 40] extcall 13 .............................. return 1
  [ 42] ret
end
