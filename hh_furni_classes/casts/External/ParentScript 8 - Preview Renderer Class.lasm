property pPossibleParts

on construct me
  [  0] pushcons 0 .............................. <"preview_rendered">
  [  2] pushsymb 12 ............................. <#bitmap>
  [  4] pusharglistnoret 2 ...................... <"preview_rendered", #bitmap>
  [  6] extcall 11 .............................. createMember("preview_rendered", #bitmap)
  [  8] pushcons 1 .............................. <"a">
  [ 10] pushcons 2 .............................. <"b">
  [ 12] pushcons 3 .............................. <"c">
  [ 14] pushcons 4 .............................. <"d">
  [ 16] pushcons 5 .............................. <"e">
  [ 18] pushcons 6 .............................. <"f">
  [ 20] pushcons 7 .............................. <"g">
  [ 22] pushcons 8 .............................. <"h">
  [ 24] pushcons 9 .............................. <"i">
  [ 26] pushcons 10 ............................. <"j">
  [ 28] pushcons 11 ............................. <"k">
  [ 30] pushcons 12 ............................. <"l">
  [ 32] pusharglist 12 .......................... <["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]>
  [ 34] pushlist ................................ <["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]>
  [ 35] setprop 13 .............................. pPossibleParts = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]
  [ 37] pushint8 1 .............................. <1>
  [ 39] pusharglistnoret 1 ...................... <1>
  [ 41] extcall 14 .............................. return 1
  [ 43] ret
end

on deconstruct me
  [  0] pushcons 0 .............................. <"preview_rendered">
  [  2] pusharglistnoret 1 ...................... <"preview_rendered">
  [  4] extcall 16 .............................. removeMember("preview_rendered")
  [  6] pushint8 1 .............................. <1>
  [  8] pusharglistnoret 1 ...................... <1>
  [ 10] extcall 14 .............................. return 1
  [ 12] ret
end

on getPreviewMember me, tImage
  [  0] getparam 1 .............................. <tImage>
  [  2] pusharglist 0 ........................... <>
  [  4] extcall 17 .............................. <VOID>
  [  6] eq ...................................... <tImage = VOID>
  [  7] jmpifz [ 15] ............................ if tImage = VOID then
  [ 10] pushzero ................................ <0>
  [ 11] pusharglistnoret 1 ...................... <0>
  [ 13] extcall 14 .............................. return 0
  [ 15] pushcons 0 .............................. <"preview_rendered">
  [ 17] pusharglist 1 ........................... <"preview_rendered">
  [ 19] extcall 18 .............................. <getmemnum("preview_rendered")>
  [ 21] setlocal 0 .............................. tMemNum = getmemnum("preview_rendered")
  [ 23] getlocal 0 .............................. <tMemNum>
  [ 25] pusharglist 1 ........................... <tMemNum>
  [ 27] extcall 19 .............................. <member(tMemNum)>
  [ 29] getparam 1 .............................. <tImage>
  [ 31] setobjprop 20 ........................... member(tMemNum).image = tImage
  [ 33] getlocal 0 .............................. <tMemNum>
  [ 35] pusharglistnoret 1 ...................... <tMemNum>
  [ 37] extcall 14 .............................. return tMemNum
  [ 39] ret
end

on solveClass me, tClass, tMemStr
  [  0] getparam 1 .............................. <tClass>
  [  2] setlocal 0 .............................. tName = tClass
  [  4] getlocal 0 .............................. <tName>
  [  6] pushcons 13 ............................. <"*">
  [  8] containsstr ............................. <tName contains "*">
  [  9] jmpifz [ 62] ............................ if tName contains "*" then / else
  [ 12] getlocal 0 .............................. <tName>
  [ 14] pushcons 14 ............................. <"_small">
  [ 16] joinstr ................................. <tName & "_small">
  [ 17] setlocal 1 .............................. tSmallMem = tName & "_small"
  [ 19] getlocal 0 .............................. <tName>
  [ 21] pushsymb 23 ............................. <#char>
  [ 23] pushint8 1 .............................. <1>
  [ 25] pushcons 13 ............................. <"*">
  [ 27] getlocal 0 .............................. <tName>
  [ 29] pusharglist 2 ........................... <"*", tName>
  [ 31] extcall 24 .............................. <offset("*", tName)>
  [ 33] pushint8 1 .............................. <1>
  [ 35] sub ..................................... <offset("*", tName) - 1>
  [ 36] pusharglist 4 ........................... <tName, #char, 1, offset("*", tName) - 1>
  [ 38] objcall 25 .............................. <tName.char[1..offset("*", tName) - 1]>
  [ 40] setlocal 0 .............................. tName = tName.char[1..offset("*", tName) - 1]
  [ 42] getlocal 1 .............................. <tSmallMem>
  [ 44] pusharglist 1 ........................... <tSmallMem>
  [ 46] extcall 26 .............................. <memberExists(tSmallMem)>
  [ 48] not ..................................... <not memberExists(tSmallMem)>
  [ 49] jmpifz [ 59] ............................ if not memberExists(tSmallMem) then
  [ 52] getlocal 0 .............................. <tName>
  [ 54] pushcons 14 ............................. <"_small">
  [ 56] joinstr ................................. <tName & "_small">
  [ 57] setlocal 1 .............................. tSmallMem = tName & "_small"
  [ 59] jmp [ 69]
  [ 62] getparam 1 .............................. <tClass>
  [ 64] pushcons 14 ............................. <"_small">
  [ 66] joinstr ................................. <tClass & "_small">
  [ 67] setlocal 1 .............................. tSmallMem = tClass & "_small"
  [ 69] getparam 2 .............................. <tMemStr>
  [ 71] pusharglist 0 ........................... <>
  [ 73] extcall 17 .............................. <VOID>
  [ 75] eq ...................................... <tMemStr = VOID>
  [ 76] jmpifz [ 83] ............................ if tMemStr = VOID then
  [ 79] pushcons 15 ............................. <EMPTY>
  [ 81] setparam 2 .............................. tMemStr = EMPTY
  [ 83] getlocal 1 .............................. <tSmallMem>
  [ 85] pusharglist 1 ........................... <tSmallMem>
  [ 87] extcall 26 .............................. <memberExists(tSmallMem)>
  [ 89] jmpifz [101] ............................ if memberExists(tSmallMem) then / else
  [ 92] getlocal 1 .............................. <tSmallMem>
  [ 94] pusharglistnoret 1 ...................... <tSmallMem>
  [ 96] extcall 14 .............................. return tSmallMem
  [ 98] jmp [125]
  [101] getparam 2 .............................. <tMemStr>
  [103] pusharglist 1 ........................... <tMemStr>
  [105] extcall 26 .............................. <memberExists(tMemStr)>
  [107] jmpifz [119] ............................ if memberExists(tMemStr) then / else
  [110] getparam 2 .............................. <tMemStr>
  [112] pusharglistnoret 1 ...................... <tMemStr>
  [114] extcall 14 .............................. return tMemStr
  [116] jmp [125]
  [119] pushcons 16 ............................. <"no_icon_small">
  [121] pusharglistnoret 1 ...................... <"no_icon_small">
  [123] extcall 14 .............................. return "no_icon_small"
  [125] ret
end

on solveColorList me, tpartColors
  [  0] getparam 1 .............................. <tpartColors>
  [  2] pushcons 15 ............................. <EMPTY>
  [  4] eq ...................................... <tpartColors = EMPTY>
  [  5] getparam 1 .............................. <tpartColors>
  [  7] pusharglist 1 ........................... <tpartColors>
  [  9] extcall 31 .............................. <voidp(tpartColors)>
  [ 11] or ...................................... <(tpartColors = EMPTY) or voidp(tpartColors)>
  [ 12] jmpifz [ 19] ............................ if (tpartColors = EMPTY) or voidp(tpartColors) then
  [ 15] pushcons 17 ............................. <"0,0,0">
  [ 17] setparam 1 .............................. tpartColors = "0,0,0"
  [ 19] pusharglist 0 ........................... <[]>
  [ 21] pushlist ................................ <[]>
  [ 22] setlocal 0 .............................. tPartList = []
  [ 24] getmovieprop 32 ......................... <the itemDelimiter>
  [ 26] setlocal 1 .............................. tDelim = the itemDelimiter
  [ 28] pushcons 18 ............................. <",">
  [ 30] setmovieprop 32 ......................... the itemDelimiter = ","
  [ 32] pushint8 1 .............................. <1>
  [ 34] setlocal 2
  [ 36] getlocal 2
  [ 38] getparam 1 .............................. <tpartColors>
  [ 40] pushsymb 33 ............................. <#item>
  [ 42] pusharglist 2 ........................... <tpartColors, #item>
  [ 44] objcall 34 .............................. <tpartColors.item.count>
  [ 46] lteq
  [ 47] jmpifz [ 79] ............................ repeat with i = 1 to tpartColors.item.count
  [ 50] getlocal 0 .............................. <tPartList>
  [ 52] getparam 1 .............................. <tpartColors>
  [ 54] pushsymb 33 ............................. <#item>
  [ 56] getlocal 2 .............................. <i>
  [ 58] pusharglist 3 ........................... <tpartColors, #item, i>
  [ 60] objcall 25 .............................. <tpartColors.item[i]>
  [ 62] pusharglist 1 ........................... <tpartColors.item[i]>
  [ 64] extcall 35 .............................. <string(tpartColors.item[i])>
  [ 66] pusharglistnoret 2 ...................... <tPartList, string(tpartColors.item[i])>
  [ 68] objcall 36 .............................. tPartList.add(string(tpartColors.item[i]))
  [ 70] pushint8 1
  [ 72] getlocal 2
  [ 74] add
  [ 75] setlocal 2
  [ 77] endrepeat [ 36]
  [ 79] getlocal 0 .............................. <tPartList>
  [ 81] getobjprop 34 ........................... <tPartList.count>
  [ 83] setlocal 3
  [ 85] getlocal 3
  [ 87] pushint8 4 .............................. <4>
  [ 89] lteq
  [ 90] jmpifz [110] ............................ repeat with j = tPartList.count to 4
  [ 93] getlocal 0 .............................. <tPartList>
  [ 95] pushcons 19 ............................. <"*ffffff">
  [ 97] pusharglistnoret 2 ...................... <tPartList, "*ffffff">
  [ 99] objcall 36 .............................. tPartList.add("*ffffff")
  [101] pushint8 1
  [103] getlocal 3
  [105] add
  [106] setlocal 3
  [108] endrepeat [ 85]
  [110] getlocal 1 .............................. <tDelim>
  [112] setmovieprop 32 ......................... the itemDelimiter = tDelim
  [114] getlocal 0 .............................. <tPartList>
  [116] pusharglistnoret 1 ...................... <tPartList>
  [118] extcall 14 .............................. return tPartList
  [120] ret
end

on renderPreviewImage me, tMemStr, tColorList, tColorListToSolve, tClass
  [  0] getparam 1 .............................. <tMemStr>
  [  2] pusharglist 0 ........................... <>
  [  4] extcall 17 .............................. <VOID>
  [  6] eq ...................................... <tMemStr = VOID>
  [  7] jmpifz [ 22] ............................ if tMemStr = VOID then
  [ 10] getparam 0 .............................. <me>
  [ 12] getparam 4 .............................. <tClass>
  [ 14] getparam 1 .............................. <tMemStr>
  [ 16] pusharglist 3 ........................... <me, tClass, tMemStr>
  [ 18] objcall 3 ............................... <me.solveClass(tClass, tMemStr)>
  [ 20] setparam 1 .............................. tMemStr = me.solveClass(tClass, tMemStr)
  [ 22] getparam 1 .............................. <tMemStr>
  [ 24] pusharglist 1 ........................... <tMemStr>
  [ 26] extcall 18 .............................. <getmemnum(tMemStr)>
  [ 28] pushzero ................................ <0>
  [ 29] eq ...................................... <getmemnum(tMemStr) = 0>
  [ 30] jmpifz [ 45] ............................ if getmemnum(tMemStr) = 0 then
  [ 33] getparam 0 .............................. <me>
  [ 35] getparam 4 .............................. <tClass>
  [ 37] getparam 1 .............................. <tMemStr>
  [ 39] pusharglist 3 ........................... <me, tClass, tMemStr>
  [ 41] objcall 3 ............................... <me.solveClass(tClass, tMemStr)>
  [ 43] setparam 1 .............................. tMemStr = me.solveClass(tClass, tMemStr)
  [ 45] getparam 3 .............................. <tColorListToSolve>
  [ 47] pusharglist 0 ........................... <>
  [ 49] extcall 17 .............................. <VOID>
  [ 51] nteq .................................... <tColorListToSolve <> VOID>
  [ 52] jmpifz [ 65] ............................ if tColorListToSolve <> VOID then
  [ 55] getparam 0 .............................. <me>
  [ 57] getparam 3 .............................. <tColorListToSolve>
  [ 59] pusharglist 2 ........................... <me, tColorListToSolve>
  [ 61] objcall 4 ............................... <me.solveColorList(tColorListToSolve)>
  [ 63] setparam 2 .............................. tColorList = me.solveColorList(tColorListToSolve)
  [ 65] getparam 0 .............................. <me>
  [ 67] getparam 1 .............................. <tMemStr>
  [ 69] pusharglist 2 ........................... <me, tMemStr>
  [ 71] objcall 7 ............................... <me.doLayersExist(tMemStr)>
  [ 73] not ..................................... <not me.doLayersExist(tMemStr)>
  [ 74] jmpifz [217] ............................ if not me.doLayersExist(tMemStr) then
  [ 77] getparam 1 .............................. <tMemStr>
  [ 79] pusharglist 1 ........................... <tMemStr>
  [ 81] extcall 18 .............................. <getmemnum(tMemStr)>
  [ 83] pushzero ................................ <0>
  [ 84] eq ...................................... <getmemnum(tMemStr) = 0>
  [ 85] jmpifz [104] ............................ if getmemnum(tMemStr) = 0 then
  [ 88] pushcons 16 ............................. <"no_icon_small">
  [ 90] pusharglist 1 ........................... <"no_icon_small">
  [ 92] extcall 18 .............................. <getmemnum("no_icon_small")>
  [ 94] pusharglist 1 ........................... <getmemnum("no_icon_small")>
  [ 96] extcall 19 .............................. <member(getmemnum("no_icon_small"))>
  [ 98] getobjprop 20 ........................... <member(getmemnum("no_icon_small")).image>
  [100] pusharglistnoret 1 ...................... <member(getmemnum("no_icon_small")).image>
  [102] extcall 14 .............................. return member(getmemnum("no_icon_small")).image
  [104] getparam 0 .............................. <me>
  [106] getparam 1 .............................. <tMemStr>
  [108] getparam 2 .............................. <tColorList>
  [110] pusharglist 3 ........................... <me, tMemStr, tColorList>
  [112] objcall 6 ............................... <me.getSmallsColor(tMemStr, tColorList)>
  [114] setlocal 0 .............................. tColor = me.getSmallsColor(tMemStr, tColorList)
  [116] getparam 1 .............................. <tMemStr>
  [118] pusharglist 1 ........................... <tMemStr>
  [120] extcall 18 .............................. <getmemnum(tMemStr)>
  [122] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [124] extcall 19 .............................. <member(getmemnum(tMemStr))>
  [126] pusharglist 1 ........................... <member(getmemnum(tMemStr))>
  [128] extcall 42 .............................. <ilk(member(getmemnum(tMemStr)))>
  [130] pushsymb 19 ............................. <#member>
  [132] nteq .................................... <ilk(member(getmemnum(tMemStr))) <> #member>
  [133] jmpifz [141] ............................ if ilk(member(getmemnum(tMemStr))) <> #member then
  [136] pushzero ................................ <0>
  [137] pusharglistnoret 1 ...................... <0>
  [139] extcall 14 .............................. return 0
  [141] getparam 1 .............................. <tMemStr>
  [143] pusharglist 1 ........................... <tMemStr>
  [145] extcall 18 .............................. <getmemnum(tMemStr)>
  [147] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [149] extcall 19 .............................. <member(getmemnum(tMemStr))>
  [151] getobjprop 127 .......................... <member(getmemnum(tMemStr)).type>
  [153] pushsymb 12 ............................. <#bitmap>
  [155] nteq .................................... <member(getmemnum(tMemStr)).type <> #bitmap>
  [156] jmpifz [164] ............................ if member(getmemnum(tMemStr)).type <> #bitmap then
  [159] pushzero ................................ <0>
  [160] pusharglistnoret 1 ...................... <0>
  [162] extcall 14 .............................. return 0
  [164] getlocal 0 .............................. <tColor>
  [166] pushzero ................................ <0>
  [167] eq ...................................... <tColor = 0>
  [168] getlocal 0 .............................. <tColor>
  [170] pushcons 15 ............................. <EMPTY>
  [172] eq ...................................... <tColor = EMPTY>
  [173] or ...................................... <(tColor = 0) or (tColor = EMPTY)>
  [174] jmpifz [193] ............................ if (tColor = 0) or (tColor = EMPTY) then
  [177] getparam 1 .............................. <tMemStr>
  [179] pusharglist 1 ........................... <tMemStr>
  [181] extcall 18 .............................. <getmemnum(tMemStr)>
  [183] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [185] extcall 19 .............................. <member(getmemnum(tMemStr))>
  [187] getobjprop 20 ........................... <member(getmemnum(tMemStr)).image>
  [189] pusharglistnoret 1 ...................... <member(getmemnum(tMemStr)).image>
  [191] extcall 14 .............................. return member(getmemnum(tMemStr)).image
  [193] getparam 0 .............................. <me>
  [195] getparam 1 .............................. <tMemStr>
  [197] pusharglist 1 ........................... <tMemStr>
  [199] extcall 18 .............................. <getmemnum(tMemStr)>
  [201] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [203] extcall 19 .............................. <member(getmemnum(tMemStr))>
  [205] getobjprop 20 ........................... <member(getmemnum(tMemStr)).image>
  [207] getlocal 0 .............................. <tColor>
  [209] pusharglist 3 ........................... <me, member(getmemnum(tMemStr)).image, tColor>
  [211] objcall 10 .............................. <me.applyDarkenColor(member(getmemnum(tMemStr)).image, tColor)>
  [213] pusharglistnoret 1 ...................... <me.applyDarkenColor(member(getmemnum(tMemStr)).image, tColor)>
  [215] extcall 14 .............................. return me.applyDarkenColor(member(getmemnum(tMemStr)).image, tColor)
  [217] getparam 1 .............................. <tMemStr>
  [219] pusharglist 1 ........................... <tMemStr>
  [221] extcall 18 .............................. <getmemnum(tMemStr)>
  [223] pushzero ................................ <0>
  [224] eq ...................................... <getmemnum(tMemStr) = 0>
  [225] jmpifz [233] ............................ if getmemnum(tMemStr) = 0 then
  [228] pushzero ................................ <0>
  [229] pusharglistnoret 1 ...................... <0>
  [231] extcall 14 .............................. return 0
  [233] getparam 1 .............................. <tMemStr>
  [235] pusharglist 1 ........................... <tMemStr>
  [237] extcall 18 .............................. <getmemnum(tMemStr)>
  [239] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [241] extcall 19 .............................. <member(getmemnum(tMemStr))>
  [243] setlocal 1 .............................. tMem = member(getmemnum(tMemStr))
  [245] pushint8 50 ............................. <50>
  [247] pushint8 50 ............................. <50>
  [249] pusharglist 2 ........................... <50, 50>
  [251] extcall 43 .............................. <point(50, 50)>
  [253] setlocal 2 .............................. tOffset = point(50, 50)
  [255] getlocal 2 .............................. <tOffset>
  [257] getobjprop 45 ........................... <tOffset.locH>
  [259] getlocal 2 .............................. <tOffset>
  [261] getobjprop 46 ........................... <tOffset.locV>
  [263] getlocal 1 .............................. <tMem>
  [265] getchainedprop 44 ....................... <tMem.rect>
  [267] getobjprop 47 ........................... <tMem.rect.width>
  [269] getlocal 2 .............................. <tOffset>
  [271] getobjprop 45 ........................... <tOffset.locH>
  [273] add ..................................... <tMem.rect.width + tOffset.locH>
  [274] getlocal 1 .............................. <tMem>
  [276] getchainedprop 44 ....................... <tMem.rect>
  [278] getobjprop 48 ........................... <tMem.rect.height>
  [280] getlocal 2 .............................. <tOffset>
  [282] getobjprop 46 ........................... <tOffset.locV>
  [284] add ..................................... <tMem.rect.height + tOffset.locV>
  [285] pusharglist 4 ........................... <tOffset.locH, tOffset.locV, tMem.rect.width + tOffset.locH, tMem.rect.height + tOffset.locV>
  [287] extcall 44 .............................. <rect(tOffset.locH, tOffset.locV, tMem.rect.width + tOffset.locH, tMem.rect.height + tOffset.locV)>
  [289] setlocal 3 .............................. tRect = rect(tOffset.locH, tOffset.locV, tMem.rect.width + tOffset.locH, tMem.rect.height + tOffset.locV)
  [291] getlocal 1 .............................. <tMem>
  [293] getchainedprop 44 ....................... <tMem.rect>
  [295] getobjprop 47 ........................... <tMem.rect.width>
  [297] getlocal 2 .............................. <tOffset>
  [299] getobjprop 45 ........................... <tOffset.locH>
  [301] pushint8 2 .............................. <2>
  [303] mul ..................................... <tOffset.locH * 2>
  [304] add ..................................... <tMem.rect.width + (tOffset.locH * 2)>
  [305] getlocal 1 .............................. <tMem>
  [307] getchainedprop 44 ....................... <tMem.rect>
  [309] getobjprop 48 ........................... <tMem.rect.height>
  [311] getlocal 2 .............................. <tOffset>
  [313] getobjprop 46 ........................... <tOffset.locV>
  [315] pushint8 2 .............................. <2>
  [317] mul ..................................... <tOffset.locV * 2>
  [318] add ..................................... <tMem.rect.height + (tOffset.locV * 2)>
  [319] pushint8 32 ............................. <32>
  [321] pusharglist 3 ........................... <tMem.rect.width + (tOffset.locH * 2), tMem.rect.height + (tOffset.locV * 2), 32>
  [323] extcall 20 .............................. <image(tMem.rect.width + (tOffset.locH * 2), tMem.rect.height + (tOffset.locV * 2), 32)>
  [325] setlocal 4 .............................. tRendered = image(tMem.rect.width + (tOffset.locH * 2), tMem.rect.height + (tOffset.locV * 2), 32)
  [327] getlocal 4 .............................. <tRendered>
  [329] getlocal 1 .............................. <tMem>
  [331] getobjprop 20 ........................... <tMem.image>
  [333] getlocal 3 .............................. <tRect>
  [335] getlocal 1 .............................. <tMem>
  [337] getobjprop 44 ........................... <tMem.rect>
  [339] pusharglistnoret 4 ...................... <tRendered, tMem.image, tRect, tMem.rect>
  [341] objcall 49 .............................. tRendered.copyPixels(tMem.image, tRect, tMem.rect)
  [343] pushint8 1 .............................. <1>
  [345] setlocal 5
  [347] getlocal 5
  [349] getprop 13 .............................. <pPossibleParts>
  [351] getobjprop 34 ........................... <pPossibleParts.count>
  [353] lteq
  [354] jmpifz [405] ............................ repeat with i = 1 to pPossibleParts.count
  [357] getparam 1 .............................. <tMemStr>
  [359] pushcons 20 ............................. <"_">
  [361] joinstr ................................. <tMemStr & "_">
  [362] getprop 13 .............................. <pPossibleParts>
  [364] getlocal 5 .............................. <i>
  [366] pusharglist 2 ........................... <pPossibleParts, i>
  [368] objcall 50 .............................. <pPossibleParts[i]>
  [370] joinstr ................................. <tMemStr & "_" & pPossibleParts[i]>
  [371] pusharglist 1 ........................... <tMemStr & "_" & pPossibleParts[i]>
  [373] extcall 26 .............................. <memberExists(tMemStr & "_" & pPossibleParts[i])>
  [375] jmpifz [396] ............................ if memberExists(tMemStr & "_" & pPossibleParts[i]) then
  [378] getparam 0 .............................. <me>
  [380] getlocal 4 .............................. <tRendered>
  [382] getlocal 5 .............................. <i>
  [384] getparam 1 .............................. <tMemStr>
  [386] getparam 2 .............................. <tColorList>
  [388] getlocal 2 .............................. <tOffset>
  [390] pusharglist 6 ........................... <me, tRendered, i, tMemStr, tColorList, tOffset>
  [392] objcall 9 ............................... <me.addLayerToImage(tRendered, i, tMemStr, tColorList, tOffset)>
  [394] setlocal 4 .............................. tRendered = me.addLayerToImage(tRendered, i, tMemStr, tColorList, tOffset)
  [396] pushint8 1
  [398] getlocal 5
  [400] add
  [401] setlocal 5
  [403] endrepeat [347]
  [405] getlocal 4 .............................. <tRendered>
  [407] pushzero ................................ <0>
  [408] eq ...................................... <tRendered = 0>
  [409] jmpifz [417] ............................ if tRendered = 0 then
  [412] pushzero ................................ <0>
  [413] pusharglistnoret 1 ...................... <0>
  [415] extcall 14 .............................. return 0
  [417] getlocal 4 .............................. <tRendered>
  [419] pusharglist 1 ........................... <tRendered>
  [421] objcall 51 .............................. <tRendered.trimWhiteSpace()>
  [423] setlocal 4 .............................. tRendered = tRendered.trimWhiteSpace()
  [425] getlocal 4 .............................. <tRendered>
  [427] pusharglistnoret 1 ...................... <tRendered>
  [429] extcall 14 .............................. return tRendered
  [431] ret
end

on getSmallsColor me, tMemStr, tColorList
  [  0] getparam 0 .............................. <me>
  [  2] getparam 2 .............................. <tColorList>
  [  4] pusharglist 2 ........................... <me, tColorList>
  [  6] objcall 8 ............................... <me.getLastColor(tColorList)>
  [  8] setlocal 0 .............................. tColor = me.getLastColor(tColorList)
  [ 10] getlocal 0 .............................. <tColor>
  [ 12] pushcons 21 ............................. <"ffffff">
  [ 14] eq ...................................... <tColor = "ffffff">
  [ 15] getparam 1 .............................. <tMemStr>
  [ 17] pushcons 13 ............................. <"*">
  [ 19] containsstr ............................. <tMemStr contains "*">
  [ 20] or ...................................... <(tColor = "ffffff") or (tMemStr contains "*")>
  [ 21] jmpifz [ 29] ............................ if (tColor = "ffffff") or (tMemStr contains "*") then
  [ 24] pushzero ................................ <0>
  [ 25] pusharglistnoret 1 ...................... <0>
  [ 27] extcall 14 .............................. return 0
  [ 29] getlocal 0 .............................. <tColor>
  [ 31] pusharglistnoret 1 ...................... <tColor>
  [ 33] extcall 14 .............................. return tColor
  [ 35] ret
end

on doLayersExist me, tMemStr
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getprop 13 .............................. <pPossibleParts>
  [  8] getobjprop 34 ........................... <pPossibleParts.count>
  [ 10] lteq
  [ 11] jmpifz [ 50] ............................ repeat with i = 1 to pPossibleParts.count
  [ 14] getparam 1 .............................. <tMemStr>
  [ 16] pushcons 20 ............................. <"_">
  [ 18] joinstr ................................. <tMemStr & "_">
  [ 19] getprop 13 .............................. <pPossibleParts>
  [ 21] getlocal 0 .............................. <i>
  [ 23] pusharglist 2 ........................... <pPossibleParts, i>
  [ 25] objcall 50 .............................. <pPossibleParts[i]>
  [ 27] joinstr ................................. <tMemStr & "_" & pPossibleParts[i]>
  [ 28] pusharglist 1 ........................... <tMemStr & "_" & pPossibleParts[i]>
  [ 30] extcall 26 .............................. <memberExists(tMemStr & "_" & pPossibleParts[i])>
  [ 32] jmpifz [ 41] ............................ if memberExists(tMemStr & "_" & pPossibleParts[i]) then
  [ 35] pushint8 1 .............................. <1>
  [ 37] pusharglistnoret 1 ...................... <1>
  [ 39] extcall 14 .............................. return 1
  [ 41] pushint8 1
  [ 43] getlocal 0
  [ 45] add
  [ 46] setlocal 0
  [ 48] endrepeat [  4]
  [ 50] pushzero ................................ <0>
  [ 51] pusharglistnoret 1 ...................... <0>
  [ 53] extcall 14 .............................. return 0
  [ 55] ret
end

on getLastColor me, tColorList
  [  0] pushcons 21 ............................. <"ffffff">
  [  2] setlocal 0 .............................. tColor = "ffffff"
  [  4] getparam 1 .............................. <tColorList>
  [  6] getobjprop 42 ........................... <tColorList.ilk>
  [  8] pushsymb 59 ............................. <#list>
  [ 10] eq ...................................... <tColorList.ilk = #list>
  [ 11] jmpifz [ 92] ............................ if tColorList.ilk = #list then
  [ 14] pushint8 1 .............................. <1>
  [ 16] setlocal 1
  [ 18] getlocal 1
  [ 20] getparam 1 .............................. <tColorList>
  [ 22] getobjprop 34 ........................... <tColorList.count>
  [ 24] lteq
  [ 25] jmpifz [ 92] ............................ repeat with i = 1 to tColorList.count
  [ 28] getparam 1 .............................. <tColorList>
  [ 30] getlocal 1 .............................. <i>
  [ 32] pusharglist 2 ........................... <tColorList, i>
  [ 34] objcall 50 .............................. <tColorList[i]>
  [ 36] pushcons 21 ............................. <"ffffff">
  [ 38] containsstr ............................. <tColorList[i] contains "ffffff">
  [ 39] getparam 1 .............................. <tColorList>
  [ 41] getlocal 1 .............................. <i>
  [ 43] pusharglist 2 ........................... <tColorList, i>
  [ 45] objcall 50 .............................. <tColorList[i]>
  [ 47] pushcons 22 ............................. <"0">
  [ 49] eq ...................................... <tColorList[i] = "0">
  [ 50] or ...................................... <(tColorList[i] contains "ffffff") or (tColorList[i] = "0")>
  [ 51] getparam 1 .............................. <tColorList>
  [ 53] getlocal 1 .............................. <i>
  [ 55] pusharglist 2 ........................... <tColorList, i>
  [ 57] objcall 50 .............................. <tColorList[i]>
  [ 59] pushcons 23 ............................. <"null">
  [ 61] eq ...................................... <tColorList[i] = "null">
  [ 62] or ...................................... <(tColorList[i] contains "ffffff") or (tColorList[i] = "0") or (tColorList[i] = "null")>
  [ 63] jmpifz [ 73] ............................ if (tColorList[i] contains "ffffff") or (tColorList[i] = "0") or (tColorList[i] = "null") then
  [ 66] pusharglistnoret 0 ...................... <>
  [ 68] extcall 60 .............................. nothing()
  [ 70] jmp [ 83] ............................... next repeat
  [ 73] getparam 1 .............................. <tColorList>
  [ 75] getlocal 1 .............................. <i>
  [ 77] pusharglist 2 ........................... <tColorList, i>
  [ 79] objcall 50 .............................. <tColorList[i]>
  [ 81] setlocal 0 .............................. tColor = tColorList[i]
  [ 83] pushint8 1
  [ 85] getlocal 1
  [ 87] add
  [ 88] setlocal 1
  [ 90] endrepeat [ 18]
  [ 92] getlocal 0 .............................. <tColor>
  [ 94] pusharglistnoret 1 ...................... <tColor>
  [ 96] extcall 14 .............................. return tColor
  [ 98] ret
end

on addLayerToImage me, tImg, tNum, tMemStr, tColorList, tOffset
  [  0] getprop 13 .............................. <pPossibleParts>
  [  2] getparam 2 .............................. <tNum>
  [  4] pusharglist 2 ........................... <pPossibleParts, tNum>
  [  6] objcall 50 .............................. <pPossibleParts[tNum]>
  [  8] setlocal 0 .............................. tAbc = pPossibleParts[tNum]
  [ 10] getparam 4 .............................. <tColorList>
  [ 12] pusharglist 0 ........................... <>
  [ 14] extcall 17 .............................. <VOID>
  [ 16] eq ...................................... <tColorList = VOID>
  [ 17] jmpifz [ 25] ............................ if tColorList = VOID then
  [ 20] pusharglist 0 ........................... <[]>
  [ 22] pushlist ................................ <[]>
  [ 23] setparam 4 .............................. tColorList = []
  [ 25] getparam 4 .............................. <tColorList>
  [ 27] getobjprop 34 ........................... <tColorList.count>
  [ 29] getparam 2 .............................. <tNum>
  [ 31] lt ...................................... <tColorList.count < tNum>
  [ 32] jmpifz [ 42] ............................ if tColorList.count < tNum then / else
  [ 35] pushcons 21 ............................. <"ffffff">
  [ 37] setlocal 1 .............................. tColor = "ffffff"
  [ 39] jmp [ 52]
  [ 42] getparam 4 .............................. <tColorList>
  [ 44] getparam 2 .............................. <tNum>
  [ 46] pusharglist 2 ........................... <tColorList, tNum>
  [ 48] objcall 50 .............................. <tColorList[tNum]>
  [ 50] setlocal 1 .............................. tColor = tColorList[tNum]
  [ 52] getparam 3 .............................. <tMemStr>
  [ 54] pushcons 20 ............................. <"_">
  [ 56] joinstr ................................. <tMemStr & "_">
  [ 57] getlocal 0 .............................. <tAbc>
  [ 59] joinstr ................................. <tMemStr & "_" & tAbc>
  [ 60] pusharglist 1 ........................... <tMemStr & "_" & tAbc>
  [ 62] extcall 18 .............................. <getmemnum(tMemStr & "_" & tAbc)>
  [ 64] pusharglist 1 ........................... <getmemnum(tMemStr & "_" & tAbc)>
  [ 66] extcall 19 .............................. <member(getmemnum(tMemStr & "_" & tAbc))>
  [ 68] setlocal 2 .............................. tmember = member(getmemnum(tMemStr & "_" & tAbc))
  [ 70] getlocal 2 .............................. <tmember>
  [ 72] pusharglist 1 ........................... <tmember>
  [ 74] extcall 42 .............................. <ilk(tmember)>
  [ 76] pushsymb 19 ............................. <#member>
  [ 78] nteq .................................... <ilk(tmember) <> #member>
  [ 79] jmpifz [117] ............................ if ilk(tmember) <> #member then
  [ 82] getparam 0 .............................. <me>
  [ 84] pushcons 24 ............................. <"Member was not found">
  [ 86] getparam 3 .............................. <tMemStr>
  [ 88] joinpadstr .............................. <"Member was not found" && tMemStr>
  [ 89] pushcons 20 ............................. <"_">
  [ 91] joinstr ................................. <"Member was not found" && tMemStr & "_">
  [ 92] getlocal 0 .............................. <tAbc>
  [ 94] joinstr ................................. <"Member was not found" && tMemStr & "_" & tAbc>
  [ 95] pushsymb 9 .............................. <#addLayerToImage>
  [ 97] pushsymb 62 ............................. <#minor>
  [ 99] pusharglistnoret 4 ...................... <me, "Member was not found" && tMemStr & "_" & tAbc, #addLayerToImage, #minor>
  [101] extcall 61 .............................. error(me, "Member was not found" && tMemStr & "_" & tAbc, #addLayerToImage, #minor)
  [103] pushint8 1 .............................. <1>
  [105] pushint8 1 .............................. <1>
  [107] pushint8 32 ............................. <32>
  [109] pusharglist 3 ........................... <1, 1, 32>
  [111] extcall 20 .............................. <image(1, 1, 32)>
  [113] pusharglistnoret 1 ...................... <image(1, 1, 32)>
  [115] extcall 14 .............................. return image(1, 1, 32)
  [117] getlocal 2 .............................. <tmember>
  [119] getobjprop 20 ........................... <tmember.image>
  [121] setlocal 3 .............................. tImg2 = tmember.image
  [123] getlocal 2 .............................. <tmember>
  [125] getobjprop 63 ........................... <tmember.regPoint>
  [127] getparam 3 .............................. <tMemStr>
  [129] pusharglist 1 ........................... <tMemStr>
  [131] extcall 18 .............................. <getmemnum(tMemStr)>
  [133] pusharglist 1 ........................... <getmemnum(tMemStr)>
  [135] extcall 19 .............................. <member(getmemnum(tMemStr))>
  [137] getobjprop 63 ........................... <member(getmemnum(tMemStr)).regPoint>
  [139] sub ..................................... <tmember.regPoint - member(getmemnum(tMemStr)).regPoint>
  [140] setlocal 4 .............................. tRegp = tmember.regPoint - member(getmemnum(tMemStr)).regPoint
  [142] getlocal 4 .............................. <tRegp>
  [144] getparam 5 .............................. <tOffset>
  [146] sub ..................................... <tRegp - tOffset>
  [147] setlocal 4 .............................. tRegp = tRegp - tOffset
  [149] getlocal 3 .............................. <tImg2>
  [151] getobjprop 44 ........................... <tImg2.rect>
  [153] getlocal 4 .............................. <tRegp>
  [155] pushint8 1 .............................. <1>
  [157] pusharglist 2 ........................... <tRegp, 1>
  [159] objcall 50 .............................. <tRegp[1]>
  [161] getlocal 4 .............................. <tRegp>
  [163] pushint8 2 .............................. <2>
  [165] pusharglist 2 ........................... <tRegp, 2>
  [167] objcall 50 .............................. <tRegp[2]>
  [169] getlocal 4 .............................. <tRegp>
  [171] pushint8 1 .............................. <1>
  [173] pusharglist 2 ........................... <tRegp, 1>
  [175] objcall 50 .............................. <tRegp[1]>
  [177] getlocal 4 .............................. <tRegp>
  [179] pushint8 2 .............................. <2>
  [181] pusharglist 2 ........................... <tRegp, 2>
  [183] objcall 50 .............................. <tRegp[2]>
  [185] pusharglist 4 ........................... <tRegp[1], tRegp[2], tRegp[1], tRegp[2]>
  [187] extcall 44 .............................. <rect(tRegp[1], tRegp[2], tRegp[1], tRegp[2])>
  [189] sub ..................................... <tImg2.rect - rect(tRegp[1], tRegp[2], tRegp[1], tRegp[2])>
  [190] setlocal 5 .............................. tRect = tImg2.rect - rect(tRegp[1], tRegp[2], tRegp[1], tRegp[2])
  [192] getlocal 3 .............................. <tImg2>
  [194] pusharglist 1 ........................... <tImg2>
  [196] objcall 64 .............................. <tImg2.createMatte()>
  [198] setlocal 6 .............................. tMatte = tImg2.createMatte()
  [200] getlocal 1 .............................. <tColor>
  [202] pusharglist 1 ........................... <tColor>
  [204] extcall 65 .............................. <rgb(tColor)>
  [206] setlocal 7 .............................. tColorObj = rgb(tColor)
  [208] getparam 1 .............................. <tImg>
  [210] getlocal 3 .............................. <tImg2>
  [212] getlocal 5 .............................. <tRect>
  [214] getlocal 3 .............................. <tImg2>
  [216] getobjprop 44 ........................... <tImg2.rect>
  [218] pushsymb 66 ............................. <#ink>
  [220] pushint8 41 ............................. <41>
  [222] pushsymb 67 ............................. <#bgColor>
  [224] getlocal 7 .............................. <tColorObj>
  [226] pushsymb 68 ............................. <#maskImage>
  [228] getlocal 6 .............................. <tMatte>
  [230] pusharglist 6 ........................... <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [232] pushproplist ............................ <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [233] pusharglistnoret 5 ...................... <tImg, tImg2, tRect, tImg2.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [235] objcall 49 .............................. tImg.copyPixels(tImg2, tRect, tImg2.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte])
  [237] getparam 1 .............................. <tImg>
  [239] pusharglistnoret 1 ...................... <tImg>
  [241] extcall 14 .............................. return tImg
  [243] ret
end

on applyDarkenColor me, tOrgImg, tColor
  [  0] getparam 2 .............................. <tColor>
  [  2] pusharglist 1 ........................... <tColor>
  [  4] extcall 65 .............................. <rgb(tColor)>
  [  6] setlocal 0 .............................. tColorObj = rgb(tColor)
  [  8] getparam 1 .............................. <tOrgImg>
  [ 10] getobjprop 47 ........................... <tOrgImg.width>
  [ 12] getparam 1 .............................. <tOrgImg>
  [ 14] getobjprop 48 ........................... <tOrgImg.height>
  [ 16] pushint8 32 ............................. <32>
  [ 18] pusharglist 3 ........................... <tOrgImg.width, tOrgImg.height, 32>
  [ 20] extcall 20 .............................. <image(tOrgImg.width, tOrgImg.height, 32)>
  [ 22] setlocal 1 .............................. tImg = image(tOrgImg.width, tOrgImg.height, 32)
  [ 24] getparam 1 .............................. <tOrgImg>
  [ 26] pusharglist 1 ........................... <tOrgImg>
  [ 28] objcall 64 .............................. <tOrgImg.createMatte()>
  [ 30] setlocal 2 .............................. tMatte = tOrgImg.createMatte()
  [ 32] getlocal 1 .............................. <tImg>
  [ 34] getparam 1 .............................. <tOrgImg>
  [ 36] getlocal 1 .............................. <tImg>
  [ 38] getobjprop 44 ........................... <tImg.rect>
  [ 40] getlocal 1 .............................. <tImg>
  [ 42] getobjprop 44 ........................... <tImg.rect>
  [ 44] pushsymb 66 ............................. <#ink>
  [ 46] pushint8 41 ............................. <41>
  [ 48] pushsymb 67 ............................. <#bgColor>
  [ 50] getlocal 0 .............................. <tColorObj>
  [ 52] pushsymb 68 ............................. <#maskImage>
  [ 54] getlocal 2 .............................. <tMatte>
  [ 56] pusharglist 6 ........................... <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [ 58] pushproplist ............................ <[#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [ 59] pusharglistnoret 5 ...................... <tImg, tOrgImg, tImg.rect, tImg.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte]>
  [ 61] objcall 49 .............................. tImg.copyPixels(tOrgImg, tImg.rect, tImg.rect, [#ink: 41, #bgColor: tColorObj, #maskImage: tMatte])
  [ 63] getlocal 1 .............................. <tImg>
  [ 65] pusharglistnoret 1 ...................... <tImg>
  [ 67] extcall 14 .............................. return tImg
  [ 69] ret
end
