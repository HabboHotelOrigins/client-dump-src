property pStateSequenceList, pStateIndex, pState, pLayerDataList, pFrameNumberList, pFrameNumberList2, pLoopCountList, pFrameRepeatList, pIsAnimatingList, pBlendList, pInkList, pLoczList, pLocShiftList, pNameBase, pPersistentFurniData, pInitialized

on deconstruct me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setprop 336 ............................. pStateSequenceList = []
  [  6] pushint8 1 .............................. <1>
  [  8] setprop 337 ............................. pStateIndex = 1
  [ 11] pushint8 1 .............................. <1>
  [ 13] setprop 338 ............................. pState = 1
  [ 16] pusharglist 0 ........................... <[:]>
  [ 18] pushproplist ............................ <[:]>
  [ 19] setprop 339 ............................. pLayerDataList = [:]
  [ 22] pusharglist 0 ........................... <[]>
  [ 24] pushlist ................................ <[]>
  [ 25] setprop 342 ............................. pFrameNumberList = []
  [ 28] pusharglist 0 ........................... <[]>
  [ 30] pushlist ................................ <[]>
  [ 31] setprop 343 ............................. pFrameNumberList2 = []
  [ 34] pusharglist 0 ........................... <[]>
  [ 36] pushlist ................................ <[]>
  [ 37] setprop 344 ............................. pLoopCountList = []
  [ 40] pusharglist 0 ........................... <[]>
  [ 42] pushlist ................................ <[]>
  [ 43] setprop 346 ............................. pBlendList = []
  [ 46] pusharglist 0 ........................... <[]>
  [ 48] pushlist ................................ <[]>
  [ 49] setprop 347 ............................. pInkList = []
  [ 52] pusharglist 0 ........................... <[]>
  [ 54] pushlist ................................ <[]>
  [ 55] setprop 108 ............................. pLoczList = []
  [ 57] pusharglist 0 ........................... <[]>
  [ 59] pushlist ................................ <[]>
  [ 60] setprop 109 ............................. pLocShiftList = []
  [ 62] pusharglist 0 ........................... <[]>
  [ 64] pushlist ................................ <[]>
  [ 65] setprop 348 ............................. pFrameRepeatList = []
  [ 68] pusharglist 0 ........................... <[]>
  [ 70] pushlist ................................ <[]>
  [ 71] setprop 349 ............................. pIsAnimatingList = []
  [ 74] pushzero ................................ <0>
  [ 75] setprop 350 ............................. pInitialized = 0
  [ 78] pushsymb 1 .............................. <#deconstruct>
  [ 80] getparam 0 .............................. <me>
  [ 82] pusharglist 1 ........................... <[me]>
  [ 84] pushlist ................................ <[me]>
  [ 85] pusharglistnoret 2 ...................... <#deconstruct, [me]>
  [ 87] extcall 351 ............................. callAncestor(#deconstruct, [me])
  [ 90] ret
end

on define me, tProps
  [  0] getprop 116 ............................. <pPersistentFurniData>
  [  2] pusharglist 1 ........................... <pPersistentFurniData>
  [  4] extcall 31 .............................. <voidp(pPersistentFurniData)>
  [  6] jmpifz [ 25] ............................ if voidp(pPersistentFurniData) then
  [  9] pushcons 0 .............................. <"dynamicdownloader">
  [ 11] pusharglist 1 ........................... <"dynamicdownloader">
  [ 13] extcall 118 ............................. <getThread("dynamicdownloader")>
  [ 15] pusharglist 1 ........................... <getThread("dynamicdownloader")>
  [ 17] objcall 138 ............................. <getThread("dynamicdownloader").getComponent()>
  [ 19] pusharglist 1 ........................... <getThread("dynamicdownloader").getComponent()>
  [ 21] objcall 157 ............................. <getThread("dynamicdownloader").getComponent().getPersistentFurniDataObject()>
  [ 23] setprop 116 ............................. pPersistentFurniData = getThread("dynamicdownloader").getComponent().getPersistentFurniDataObject()
  [ 25] pusharglist 0 ........................... <[]>
  [ 27] pushlist ................................ <[]>
  [ 28] setprop 336 ............................. pStateSequenceList = []
  [ 31] pushint8 1 .............................. <1>
  [ 33] setprop 337 ............................. pStateIndex = 1
  [ 36] pushint8 1 .............................. <1>
  [ 38] setprop 338 ............................. pState = 1
  [ 41] pusharglist 0 ........................... <[:]>
  [ 43] pushproplist ............................ <[:]>
  [ 44] setprop 339 ............................. pLayerDataList = [:]
  [ 47] pusharglist 0 ........................... <[]>
  [ 49] pushlist ................................ <[]>
  [ 50] setprop 342 ............................. pFrameNumberList = []
  [ 53] pusharglist 0 ........................... <[]>
  [ 55] pushlist ................................ <[]>
  [ 56] setprop 343 ............................. pFrameNumberList2 = []
  [ 59] pusharglist 0 ........................... <[]>
  [ 61] pushlist ................................ <[]>
  [ 62] setprop 344 ............................. pLoopCountList = []
  [ 65] pusharglist 0 ........................... <[]>
  [ 67] pushlist ................................ <[]>
  [ 68] setprop 346 ............................. pBlendList = []
  [ 71] pusharglist 0 ........................... <[]>
  [ 73] pushlist ................................ <[]>
  [ 74] setprop 347 ............................. pInkList = []
  [ 77] pusharglist 0 ........................... <[]>
  [ 79] pushlist ................................ <[]>
  [ 80] setprop 108 ............................. pLoczList = []
  [ 82] pusharglist 0 ........................... <[]>
  [ 84] pushlist ................................ <[]>
  [ 85] setprop 109 ............................. pLocShiftList = []
  [ 87] pusharglist 0 ........................... <[]>
  [ 89] pushlist ................................ <[]>
  [ 90] setprop 348 ............................. pFrameRepeatList = []
  [ 93] pusharglist 0 ........................... <[]>
  [ 95] pushlist ................................ <[]>
  [ 96] setprop 349 ............................. pIsAnimatingList = []
  [ 99] getparam 1 .............................. <tProps>
  [101] pushsymb 147 ............................ <#class>
  [103] pusharglist 2 ........................... <tProps, #class>
  [105] objcall 50 .............................. <tProps[#class]>
  [107] setprop 352 ............................. pNameBase = tProps[#class]
  [110] getparam 1 .............................. <tProps>
  [112] pushsymb 147 ............................ <#class>
  [114] pusharglist 2 ........................... <tProps, #class>
  [116] objcall 50 .............................. <tProps[#class]>
  [118] setlocal 0 .............................. tClass = tProps[#class]
  [120] pushsymb 119 ............................ <#room>
  [122] pusharglist 1 ........................... <#room>
  [124] extcall 118 ............................. <getThread(#room)>
  [126] pusharglist 1 ........................... <getThread(#room)>
  [128] objcall 120 ............................. <getThread(#room).getInterface()>
  [130] pusharglist 1 ........................... <getThread(#room).getInterface()>
  [132] objcall 121 ............................. <getThread(#room).getInterface().getGeometry()>
  [134] getobjprop 117 .......................... <getThread(#room).getInterface().getGeometry().pXFactor>
  [136] pushint8 32 ............................. <32>
  [138] eq ...................................... <getThread(#room).getInterface().getGeometry().pXFactor = 32>
  [139] jmpifz [151] ............................ if getThread(#room).getInterface().getGeometry().pXFactor = 32 then
  [142] pushcons 1 .............................. <"s_">
  [144] getprop 352 ............................. <pNameBase>
  [147] joinstr ................................. <"s_" & pNameBase>
  [148] setprop 352 ............................. pNameBase = "s_" & pNameBase
  [151] getprop 352 ............................. <pNameBase>
  [154] pushcons 2 .............................. <".data">
  [156] joinstr ................................. <pNameBase & ".data">
  [157] setlocal 1 .............................. tDataName = pNameBase & ".data"
  [159] getlocal 1 .............................. <tDataName>
  [161] pusharglist 1 ........................... <tDataName>
  [163] extcall 26 .............................. <memberExists(tDataName)>
  [165] jmpifz [411] ............................ if memberExists(tDataName) then
  [168] getlocal 1 .............................. <tDataName>
  [170] pusharglist 1 ........................... <tDataName>
  [172] extcall 18 .............................. <getmemnum(tDataName)>
  [174] pusharglist 1 ........................... <getmemnum(tDataName)>
  [176] extcall 19 .............................. <member(getmemnum(tDataName))>
  [178] getobjprop 353 .......................... <member(getmemnum(tDataName)).text>
  [181] setlocal 2 .............................. tText = member(getmemnum(tDataName)).text
  [183] getlocal 2 .............................. <tText>
  [185] pushcons 3 .............................. <RETURN>
  [187] pushcons 4 .............................. <EMPTY>
  [189] pusharglist 3 ........................... <tText, RETURN, EMPTY>
  [191] extcall 354 ............................. <replaceChunks(tText, RETURN, EMPTY)>
  [194] setlocal 2 .............................. tText = replaceChunks(tText, RETURN, EMPTY)
  [196] getlocal 2 .............................. <tText>
  [198] pusharglist 1 ........................... <tText>
  [200] extcall 208 ............................. <value(tText)>
  [202] setlocal 3 .............................. tdata = value(tText)
  [204] getlocal 3 .............................. <tdata>
  [206] pusharglist 1 ........................... <tdata>
  [208] extcall 31 .............................. <voidp(tdata)>
  [210] not ..................................... <not voidp(tdata)>
  [211] jmpifz [411] ............................ if not voidp(tdata) then
  [214] getlocal 3 .............................. <tdata>
  [216] getobjprop 42 ........................... <tdata.ilk>
  [218] pushsymb 209 ............................ <#propList>
  [220] eq ...................................... <tdata.ilk = #propList>
  [221] jmpifz [411] ............................ if tdata.ilk = #propList then
  [224] getlocal 3 .............................. <tdata>
  [226] pushsymb 355 ............................ <#states>
  [229] pusharglist 2 ........................... <tdata, #states>
  [231] objcall 50 .............................. <tdata[#states]>
  [233] setprop 336 ............................. pStateSequenceList = tdata[#states]
  [236] getlocal 3 .............................. <tdata>
  [238] pushsymb 356 ............................ <#layers>
  [241] pusharglist 2 ........................... <tdata, #layers>
  [243] objcall 50 .............................. <tdata[#layers]>
  [245] setprop 339 ............................. pLayerDataList = tdata[#layers]
  [248] getprop 339 ............................. <pLayerDataList>
  [251] pusharglist 1 ........................... <pLayerDataList>
  [253] extcall 31 .............................. <voidp(pLayerDataList)>
  [255] jmpifz [264] ............................ if voidp(pLayerDataList) then
  [258] pusharglist 0 ........................... <[:]>
  [260] pushproplist ............................ <[:]>
  [261] setprop 339 ............................. pLayerDataList = [:]
  [264] pusharglist 0 ........................... <[:]>
  [266] pushproplist ............................ <[:]>
  [267] setlocal 4 .............................. tLayerDataList = [:]
  [269] pushint8 1 .............................. <1>
  [271] setlocal 5
  [273] getlocal 5
  [275] getprop 339 ............................. <pLayerDataList>
  [278] getobjprop 34 ........................... <pLayerDataList.count>
  [280] lteq
  [281] jmpifz [373] ............................ repeat with i = 1 to pLayerDataList.count
  [284] getprop 339 ............................. <pLayerDataList>
  [287] getlocal 5 .............................. <i>
  [289] pusharglist 2 ........................... <pLayerDataList, i>
  [291] objcall 357 ............................. <pLayerDataList.getPropAt(i)>
  [294] pusharglist 1 ........................... <pLayerDataList.getPropAt(i)>
  [296] extcall 35 .............................. <string(pLayerDataList.getPropAt(i))>
  [298] setlocal 6 .............................. tProp = string(pLayerDataList.getPropAt(i))
  [300] getlocal 6 .............................. <tProp>
  [302] pusharglist 1 ........................... <tProp>
  [304] extcall 217 ............................. <charToNum(tProp)>
  [306] pushcons 5 .............................. <"a">
  [308] pusharglist 1 ........................... <"a">
  [310] extcall 217 ............................. <charToNum("a")>
  [312] lt ...................................... <charToNum(tProp) < charToNum("a")>
  [313] jmpifz [342] ............................ if charToNum(tProp) < charToNum("a") then
  [316] pushcons 5 .............................. <"a">
  [318] pusharglist 1 ........................... <"a">
  [320] extcall 217 ............................. <charToNum("a")>
  [322] getlocal 6 .............................. <tProp>
  [324] pusharglist 1 ........................... <tProp>
  [326] extcall 217 ............................. <charToNum(tProp)>
  [328] pushcons 6 .............................. <"A">
  [330] pusharglist 1 ........................... <"A">
  [332] extcall 217 ............................. <charToNum("A")>
  [334] sub ..................................... <charToNum(tProp) - charToNum("A")>
  [335] add ..................................... <charToNum("a") + (charToNum(tProp) - charToNum("A"))>
  [336] pusharglist 1 ........................... <charToNum("a") + (charToNum(tProp) - charToNum("A"))>
  [338] extcall 218 ............................. <numToChar(charToNum("a") + (charToNum(tProp) - charToNum("A")))>
  [340] setlocal 6 .............................. tProp = numToChar(charToNum("a") + (charToNum(tProp) - charToNum("A")))
  [342] getprop 339 ............................. <pLayerDataList>
  [345] getlocal 5 .............................. <i>
  [347] pusharglist 2 ........................... <pLayerDataList, i>
  [349] objcall 50 .............................. <pLayerDataList[i]>
  [351] setlocal 7 .............................. tLayerData = pLayerDataList[i]
  [353] getlocal 4 .............................. <tLayerDataList>
  [355] getlocal 6 .............................. <tProp>
  [357] getlocal 7 .............................. <tLayerData>
  [359] pusharglistnoret 3 ...................... <tLayerDataList, tProp, tLayerData>
  [361] objcall 362 ............................. tLayerDataList.addProp(tProp, tLayerData)
  [364] pushint8 1
  [366] getlocal 5
  [368] add
  [369] setlocal 5
  [371] endrepeat [273]
  [373] getlocal 4 .............................. <tLayerDataList>
  [375] setprop 339 ............................. pLayerDataList = tLayerDataList
  [378] getprop 336 ............................. <pStateSequenceList>
  [381] pusharglist 1 ........................... <pStateSequenceList>
  [383] extcall 31 .............................. <voidp(pStateSequenceList)>
  [385] jmpifz [394] ............................ if voidp(pStateSequenceList) then
  [388] pusharglist 0 ........................... <[]>
  [390] pushlist ................................ <[]>
  [391] setprop 336 ............................. pStateSequenceList = []
  [394] getparam 0 .............................. <me>
  [396] pusharglist 1 ........................... <me>
  [398] objcall 333 ............................. <me.validateStateSequenceList()>
  [401] not ..................................... <not me.validateStateSequenceList()>
  [402] jmpifz [411] ............................ if not me.validateStateSequenceList() then
  [405] pusharglist 0 ........................... <[]>
  [407] pushlist ................................ <[]>
  [408] setprop 336 ............................. pStateSequenceList = []
  [411] getparam 1 .............................. <tProps>
  [413] pushsymb 127 ............................ <#type>
  [415] pusharglist 2 ........................... <tProps, #type>
  [417] objcall 50 .............................. <tProps[#type]>
  [419] pusharglist 1 ........................... <tProps[#type]>
  [421] extcall 177 ............................. <integer(tProps[#type])>
  [423] pusharglist 1 ........................... <integer(tProps[#type])>
  [425] extcall 406 ............................. <integerp(integer(tProps[#type]))>
  [428] getparam 1 .............................. <tProps>
  [430] pushsymb 127 ............................ <#type>
  [432] pusharglist 2 ........................... <tProps, #type>
  [434] objcall 50 .............................. <tProps[#type]>
  [436] pusharglist 1 ........................... <tProps[#type]>
  [438] extcall 177 ............................. <integer(tProps[#type])>
  [440] pusharglist 1 ........................... <integer(tProps[#type])>
  [442] extcall 35 .............................. <string(integer(tProps[#type]))>
  [444] getparam 1 .............................. <tProps>
  [446] pushsymb 127 ............................ <#type>
  [448] pusharglist 2 ........................... <tProps, #type>
  [450] objcall 50 .............................. <tProps[#type]>
  [452] pusharglist 1 ........................... <tProps[#type]>
  [454] extcall 35 .............................. <string(tProps[#type])>
  [456] eq ...................................... <string(integer(tProps[#type])) = string(tProps[#type])>
  [457] and ..................................... <integerp(integer(tProps[#type])) and (string(integer(tProps[#type])) = string(tProps[#type]))>
  [458] jmpifz [488] ............................ if integerp(integer(tProps[#type])) and (string(integer(tProps[#type])) = string(tProps[#type])) then / else
  [461] getparam 1 .............................. <tProps>
  [463] pushsymb 127 ............................ <#type>
  [465] pusharglist 2 ........................... <tProps, #type>
  [467] objcall 50 .............................. <tProps[#type]>
  [469] pusharglist 1 ........................... <tProps[#type]>
  [471] extcall 177 ............................. <integer(tProps[#type])>
  [473] setlocal 8 .............................. tstate = integer(tProps[#type])
  [475] getlocal 8 .............................. <tstate>
  [477] pushzero ................................ <0>
  [478] lteq .................................... <tstate <= 0>
  [479] jmpifz [485] ............................ if tstate <= 0 then
  [482] pushzero ................................ <0>
  [483] setlocal 8 .............................. tstate = 0
  [485] jmp [498]
  [488] getparam 1 .............................. <tProps>
  [490] pushsymb 127 ............................ <#type>
  [492] pusharglist 2 ........................... <tProps, #type>
  [494] objcall 50 .............................. <tProps[#type]>
  [496] setlocal 8 .............................. tstate = tProps[#type]
  [498] getparam 0 .............................. <me>
  [500] getlocal 8 .............................. <tstate>
  [502] pusharglistnoret 2 ...................... <me, tstate>
  [504] objcall 271 ............................. me.setState(tstate)
  [507] getparam 0 .............................. <me>
  [509] pusharglistnoret 1 ...................... <me>
  [511] objcall 334 ............................. me.resetFrameNumbers()
  [514] pushint8 1 .............................. <1>
  [516] setlocal 9 .............................. tCount = 1
  [518] getprop 339 ............................. <pLayerDataList>
  [521] getobjprop 34 ........................... <pLayerDataList.count>
  [523] pushzero ................................ <0>
  [524] gt ...................................... <pLayerDataList.count > 0>
  [525] jmpifz [535] ............................ if pLayerDataList.count > 0 then
  [528] getprop 339 ............................. <pLayerDataList>
  [531] getobjprop 34 ........................... <pLayerDataList.count>
  [533] setlocal 9 .............................. tCount = pLayerDataList.count
  [535] pushint8 1 .............................. <1>
  [537] setlocal 10
  [539] getlocal 10
  [541] getlocal 9 .............................. <tCount>
  [543] lteq
  [544] jmpifz [617] ............................ repeat with tLayer = 1 to tCount
  [547] pushcons 4 .............................. <EMPTY>
  [549] setlocal 11 ............................. tLayerName = EMPTY
  [551] getprop 339 ............................. <pLayerDataList>
  [554] getobjprop 34 ........................... <pLayerDataList.count>
  [556] getlocal 10 ............................. <tLayer>
  [558] gteq .................................... <pLayerDataList.count >= tLayer>
  [559] jmpifz [574] ............................ if pLayerDataList.count >= tLayer then
  [562] getprop 339 ............................. <pLayerDataList>
  [565] getlocal 10 ............................. <tLayer>
  [567] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [569] objcall 357 ............................. <pLayerDataList.getPropAt(tLayer)>
  [572] setlocal 11 ............................. tLayerName = pLayerDataList.getPropAt(tLayer)
  [574] getprop 347 ............................. <pInkList>
  [577] getlocal 10 ............................. <tLayer>
  [579] getparam 0 .............................. <me>
  [581] getlocal 11 ............................. <tLayerName>
  [583] pusharglist 2 ........................... <me, tLayerName>
  [585] objcall 95 .............................. <me.solveInk(tLayerName)>
  [587] pusharglistnoret 3 ...................... <pInkList, tLayer, me.solveInk(tLayerName)>
  [589] objcall 158 ............................. pInkList[tLayer] = me.solveInk(tLayerName)
  [591] getprop 346 ............................. <pBlendList>
  [594] getlocal 10 ............................. <tLayer>
  [596] getparam 0 .............................. <me>
  [598] getlocal 11 ............................. <tLayerName>
  [600] pusharglist 2 ........................... <me, tLayerName>
  [602] objcall 96 .............................. <me.solveBlend(tLayerName)>
  [604] pusharglistnoret 3 ...................... <pBlendList, tLayer, me.solveBlend(tLayerName)>
  [606] objcall 158 ............................. pBlendList[tLayer] = me.solveBlend(tLayerName)
  [608] pushint8 1
  [610] getlocal 10
  [612] add
  [613] setlocal 10
  [615] endrepeat [539]
  [617] pushzero ................................ <0>
  [618] setprop 350 ............................. pInitialized = 0
  [621] getprop 116 ............................. <pPersistentFurniData>
  [623] pushcons 7 .............................. <"i">
  [625] getlocal 0 .............................. <tClass>
  [627] pusharglist 3 ........................... <pPersistentFurniData, "i", tClass>
  [629] objcall 159 ............................. <pPersistentFurniData.getPropsByClass("i", tClass)>
  [631] setlocal 12 ............................. tFurniData = pPersistentFurniData.getPropsByClass("i", tClass)
  [633] getlocal 12 ............................. <tFurniData>
  [635] pusharglist 1 ........................... <tFurniData>
  [637] extcall 31 .............................. <voidp(tFurniData)>
  [639] jmpifz [657] ............................ if voidp(tFurniData) then / else
  [642] getparam 0 .............................. <me>
  [644] pushcons 4 .............................. <EMPTY>
  [646] setobjprop 103 .......................... me.pName = EMPTY
  [648] getparam 0 .............................. <me>
  [650] pushcons 4 .............................. <EMPTY>
  [652] setobjprop 104 .......................... me.pCustom = EMPTY
  [654] jmp [712]
  [657] getlocal 0 .............................. <tClass>
  [659] pushcons 8 .............................. <"placeholder">
  [661] containsstr ............................. <tClass contains "placeholder">
  [662] jmpifz [688] ............................ if tClass contains "placeholder" then / else
  [665] getparam 0 .............................. <me>
  [667] pushcons 9 .............................. <"wallitem_item_placeholder_name">
  [669] pusharglist 1 ........................... <"wallitem_item_placeholder_name">
  [671] extcall 164 ............................. <getText("wallitem_item_placeholder_name")>
  [673] setobjprop 103 .......................... me.pName = getText("wallitem_item_placeholder_name")
  [675] getparam 0 .............................. <me>
  [677] pushcons 10 ............................. <"wallitem_item_placeholder_desc">
  [679] pusharglist 1 ........................... <"wallitem_item_placeholder_desc">
  [681] extcall 164 ............................. <getText("wallitem_item_placeholder_desc")>
  [683] setobjprop 104 .......................... me.pCustom = getText("wallitem_item_placeholder_desc")
  [685] jmp [712]
  [688] getparam 0 .............................. <me>
  [690] getlocal 12 ............................. <tFurniData>
  [692] pushsymb 161 ............................ <#localizedName>
  [694] pusharglist 2 ........................... <tFurniData, #localizedName>
  [696] objcall 50 .............................. <tFurniData[#localizedName]>
  [698] setobjprop 103 .......................... me.pName = tFurniData[#localizedName]
  [700] getparam 0 .............................. <me>
  [702] getlocal 12 ............................. <tFurniData>
  [704] pushsymb 163 ............................ <#localizedDesc>
  [706] pusharglist 2 ........................... <tFurniData, #localizedDesc>
  [708] objcall 50 .............................. <tFurniData[#localizedDesc]>
  [710] setobjprop 104 .......................... me.pCustom = tFurniData[#localizedDesc]
  [712] pushsymb 78 ............................. <#define>
  [714] getparam 0 .............................. <me>
  [716] pusharglist 1 ........................... <[me]>
  [718] pushlist ................................ <[me]>
  [719] getparam 1 .............................. <tProps>
  [721] pusharglist 3 ........................... <#define, [me], tProps>
  [723] extcall 351 ............................. <callAncestor(#define, [me], tProps)>
  [726] pusharglistnoret 1 ...................... <callAncestor(#define, [me], tProps)>
  [728] extcall 14 .............................. return callAncestor(#define, [me], tProps)
  [730] ret
end

on select me
  [  0] pusharglist 0 ........................... <>
  [  2] thebuiltin 376 .......................... <the doubleClick>
  [  5] jmpifz [ 15] ............................ if the doubleClick then
  [  8] getparam 0 .............................. <me>
  [ 10] pusharglistnoret 1 ...................... <me>
  [ 12] objcall 332 ............................. me.getNextState()
  [ 15] pushint8 1 .............................. <1>
  [ 17] pusharglistnoret 1 ...................... <1>
  [ 19] extcall 14 .............................. return 1
  [ 21] ret
end

on update me
  [  0] getprop 349 ............................. <pIsAnimatingList>
  [  3] pushint8 1 .............................. <1>
  [  5] pusharglist 2 ........................... <pIsAnimatingList, 1>
  [  7] objcall 374 ............................. <pIsAnimatingList.findPos(1)>
  [ 10] pushzero ................................ <0>
  [ 11] eq ...................................... <pIsAnimatingList.findPos(1) = 0>
  [ 12] jmpifz [ 21] ............................ if pIsAnimatingList.findPos(1) = 0 then
  [ 15] pushint8 1 .............................. <1>
  [ 17] pusharglistnoret 1 ...................... <1>
  [ 19] extcall 14 .............................. return 1
  [ 21] pusharglist 0 ........................... <[]>
  [ 23] pushlist ................................ <[]>
  [ 24] setlocal 0 .............................. tIsAnimatingList = []
  [ 26] pushint8 1 .............................. <1>
  [ 28] setlocal 1
  [ 30] getlocal 1
  [ 32] getprop 339 ............................. <pLayerDataList>
  [ 35] getobjprop 34 ........................... <pLayerDataList.count>
  [ 37] lteq
  [ 38] jmpifz [543] ............................ repeat with tLayer = 1 to pLayerDataList.count
  [ 41] getparam 0 .............................. <me>
  [ 43] getprop 339 ............................. <pLayerDataList>
  [ 46] getlocal 1 .............................. <tLayer>
  [ 48] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [ 50] objcall 357 ............................. <pLayerDataList.getPropAt(tLayer)>
  [ 53] pusharglist 2 ........................... <me, pLayerDataList.getPropAt(tLayer)>
  [ 55] objcall 330 ............................. <me.getFrameList(pLayerDataList.getPropAt(tLayer))>
  [ 58] setlocal 2 .............................. tFrameList = me.getFrameList(pLayerDataList.getPropAt(tLayer))
  [ 60] getlocal 0 .............................. <tIsAnimatingList>
  [ 62] getlocal 1 .............................. <tLayer>
  [ 64] getprop 349 ............................. <pIsAnimatingList>
  [ 67] getlocal 1 .............................. <tLayer>
  [ 69] pusharglist 2 ........................... <pIsAnimatingList, tLayer>
  [ 71] objcall 50 .............................. <pIsAnimatingList[tLayer]>
  [ 73] pusharglistnoret 3 ...................... <tIsAnimatingList, tLayer, pIsAnimatingList[tLayer]>
  [ 75] objcall 158 ............................. tIsAnimatingList[tLayer] = pIsAnimatingList[tLayer]
  [ 77] getlocal 2 .............................. <tFrameList>
  [ 79] pusharglist 1 ........................... <tFrameList>
  [ 81] extcall 31 .............................. <voidp(tFrameList)>
  [ 83] not ..................................... <not voidp(tFrameList)>
  [ 84] getlocal 0 .............................. <tIsAnimatingList>
  [ 86] getlocal 1 .............................. <tLayer>
  [ 88] pusharglist 2 ........................... <tIsAnimatingList, tLayer>
  [ 90] objcall 50 .............................. <tIsAnimatingList[tLayer]>
  [ 92] and ..................................... <not voidp(tFrameList) and tIsAnimatingList[tLayer]>
  [ 93] jmpifz [533] ............................ if not voidp(tFrameList) and tIsAnimatingList[tLayer] then
  [ 96] getlocal 2 .............................. <tFrameList>
  [ 98] pushsymb 377 ............................ <#frames>
  [101] pusharglist 2 ........................... <tFrameList, #frames>
  [103] objcall 50 .............................. <tFrameList[#frames]>
  [105] pusharglist 1 ........................... <tFrameList[#frames]>
  [107] extcall 31 .............................. <voidp(tFrameList[#frames])>
  [109] not ..................................... <not voidp(tFrameList[#frames])>
  [110] jmpifz [533] ............................ if not voidp(tFrameList[#frames]) then
  [113] getlocal 2 .............................. <tFrameList>
  [115] pushsymb 379 ............................ <#delay>
  [118] pusharglist 2 ........................... <tFrameList, #delay>
  [120] objcall 50 .............................. <tFrameList[#delay]>
  [122] setlocal 3 .............................. tDelay = tFrameList[#delay]
  [124] getlocal 3 .............................. <tDelay>
  [126] pusharglist 1 ........................... <tDelay>
  [128] extcall 31 .............................. <voidp(tDelay)>
  [130] getlocal 3 .............................. <tDelay>
  [132] pusharglist 1 ........................... <tDelay>
  [134] extcall 177 ............................. <integer(tDelay)>
  [136] pusharglist 1 ........................... <integer(tDelay)>
  [138] extcall 31 .............................. <voidp(integer(tDelay))>
  [140] or ...................................... <voidp(tDelay) or voidp(integer(tDelay))>
  [141] getlocal 3 .............................. <tDelay>
  [143] pushint8 1 .............................. <1>
  [145] lt ...................................... <tDelay < 1>
  [146] or ...................................... <voidp(tDelay) or voidp(integer(tDelay)) or (tDelay < 1)>
  [147] jmpifz [154] ............................ if voidp(tDelay) or voidp(integer(tDelay)) or (tDelay < 1) then
  [150] pushint8 1 .............................. <1>
  [152] setlocal 3 .............................. tDelay = 1
  [154] getprop 348 ............................. <pFrameRepeatList>
  [157] getlocal 1 .............................. <tLayer>
  [159] pusharglist 2 ........................... <pFrameRepeatList, tLayer>
  [161] objcall 50 .............................. <pFrameRepeatList[tLayer]>
  [163] getlocal 3 .............................. <tDelay>
  [165] gteq .................................... <pFrameRepeatList[tLayer] >= tDelay>
  [166] jmpifz [512] ............................ if pFrameRepeatList[tLayer] >= tDelay then
  [169] pushint8 1 .............................. <1>
  [171] setlocal 4 .............................. tLoop = 1
  [173] getlocal 2 .............................. <tFrameList>
  [175] pushsymb 377 ............................ <#frames>
  [178] pusharglist 2 ........................... <tFrameList, #frames>
  [180] objcall 50 .............................. <tFrameList[#frames]>
  [182] getobjprop 34 ........................... <tFrameList[#frames].count>
  [184] setlocal 5 .............................. tFrameCount = tFrameList[#frames].count
  [186] getlocal 5 .............................. <tFrameCount>
  [188] pushzero ................................ <0>
  [189] gt ...................................... <tFrameCount > 0>
  [190] jmpifz [498] ............................ if tFrameCount > 0 then
  [193] getprop 342 ............................. <pFrameNumberList>
  [196] getlocal 1 .............................. <tLayer>
  [198] pusharglist 2 ........................... <pFrameNumberList, tLayer>
  [200] objcall 50 .............................. <pFrameNumberList[tLayer]>
  [202] getlocal 5 .............................. <tFrameCount>
  [204] eq ...................................... <pFrameNumberList[tLayer] = tFrameCount>
  [205] jmpifz [277] ............................ if pFrameNumberList[tLayer] = tFrameCount then
  [208] getprop 344 ............................. <pLoopCountList>
  [211] getlocal 1 .............................. <tLayer>
  [213] pusharglist 2 ........................... <pLoopCountList, tLayer>
  [215] objcall 50 .............................. <pLoopCountList[tLayer]>
  [217] pushzero ................................ <0>
  [218] gt ...................................... <pLoopCountList[tLayer] > 0>
  [219] jmpifz [243] ............................ if pLoopCountList[tLayer] > 0 then
  [222] getprop 344 ............................. <pLoopCountList>
  [225] getlocal 1 .............................. <tLayer>
  [227] getprop 344 ............................. <pLoopCountList>
  [230] getlocal 1 .............................. <tLayer>
  [232] pusharglist 2 ........................... <pLoopCountList, tLayer>
  [234] objcall 50 .............................. <pLoopCountList[tLayer]>
  [236] pushint8 1 .............................. <1>
  [238] sub ..................................... <pLoopCountList[tLayer] - 1>
  [239] pusharglistnoret 3 ...................... <pLoopCountList, tLayer, pLoopCountList[tLayer] - 1>
  [241] objcall 158 ............................. pLoopCountList[tLayer] = pLoopCountList[tLayer] - 1
  [243] getprop 344 ............................. <pLoopCountList>
  [246] getlocal 1 .............................. <tLayer>
  [248] pusharglist 2 ........................... <pLoopCountList, tLayer>
  [250] objcall 50 .............................. <pLoopCountList[tLayer]>
  [252] setlocal 4 .............................. tLoop = pLoopCountList[tLayer]
  [254] getprop 344 ............................. <pLoopCountList>
  [257] getlocal 1 .............................. <tLayer>
  [259] pusharglist 2 ........................... <pLoopCountList, tLayer>
  [261] objcall 50 .............................. <pLoopCountList[tLayer]>
  [263] pushzero ................................ <0>
  [264] eq ...................................... <pLoopCountList[tLayer] = 0>
  [265] jmpifz [277] ............................ if pLoopCountList[tLayer] = 0 then
  [268] getlocal 0 .............................. <tIsAnimatingList>
  [270] getlocal 1 .............................. <tLayer>
  [272] pushzero ................................ <0>
  [273] pusharglistnoret 3 ...................... <tIsAnimatingList, tLayer, 0>
  [275] objcall 158 ............................. tIsAnimatingList[tLayer] = 0
  [277] getprop 342 ............................. <pFrameNumberList>
  [280] getlocal 1 .............................. <tLayer>
  [282] pusharglist 2 ........................... <pFrameNumberList, tLayer>
  [284] objcall 50 .............................. <pFrameNumberList[tLayer]>
  [286] getlocal 5 .............................. <tFrameCount>
  [288] lt ...................................... <pFrameNumberList[tLayer] < tFrameCount>
  [289] getlocal 4 .............................. <tLoop>
  [291] or ...................................... <(pFrameNumberList[tLayer] < tFrameCount) or tLoop>
  [292] jmpifz [498] ............................ if (pFrameNumberList[tLayer] < tFrameCount) or tLoop then
  [295] getprop 342 ............................. <pFrameNumberList>
  [298] getlocal 1 .............................. <tLayer>
  [300] getprop 342 ............................. <pFrameNumberList>
  [303] getlocal 1 .............................. <tLayer>
  [305] pusharglist 2 ........................... <pFrameNumberList, tLayer>
  [307] objcall 50 .............................. <pFrameNumberList[tLayer]>
  [309] getlocal 5 .............................. <tFrameCount>
  [311] mod ..................................... <pFrameNumberList[tLayer] mod tFrameCount>
  [312] pushint8 1 .............................. <1>
  [314] add ..................................... <(pFrameNumberList[tLayer] mod tFrameCount) + 1>
  [315] pusharglistnoret 3 ...................... <pFrameNumberList, tLayer, (pFrameNumberList[tLayer] mod tFrameCount) + 1>
  [317] objcall 158 ............................. pFrameNumberList[tLayer] = (pFrameNumberList[tLayer] mod tFrameCount) + 1
  [319] pushzero ................................ <0>
  [320] setlocal 6 .............................. tRandom = 0
  [322] getlocal 2 .............................. <tFrameList>
  [324] pushsymb 380 ............................ <#random>
  [327] pusharglist 2 ........................... <tFrameList, #random>
  [329] objcall 50 .............................. <tFrameList[#random]>
  [331] pusharglist 1 ........................... <tFrameList[#random]>
  [333] extcall 31 .............................. <voidp(tFrameList[#random])>
  [335] not ..................................... <not voidp(tFrameList[#random])>
  [336] jmpifz [343] ............................ if not voidp(tFrameList[#random]) then
  [339] pushint8 1 .............................. <1>
  [341] setlocal 6 .............................. tRandom = 1
  [343] getlocal 6 .............................. <tRandom>
  [345] getlocal 5 .............................. <tFrameCount>
  [347] pushint8 1 .............................. <1>
  [349] gt ...................................... <tFrameCount > 1>
  [350] and ..................................... <tRandom and (tFrameCount > 1)>
  [351] jmpifz [409] ............................ if tRandom and (tFrameCount > 1) then / else
  [354] getlocal 5 .............................. <tFrameCount>
  [356] pusharglist 1 ........................... <tFrameCount>
  [358] extcall 380 ............................. <random(tFrameCount)>
  [361] setlocal 7 .............................. tValue = random(tFrameCount)
  [363] getlocal 7 .............................. <tValue>
  [365] getprop 343 ............................. <pFrameNumberList2>
  [368] getlocal 1 .............................. <tLayer>
  [370] pusharglist 2 ........................... <pFrameNumberList2, tLayer>
  [372] objcall 50 .............................. <pFrameNumberList2[tLayer]>
  [374] eq ...................................... <tValue = pFrameNumberList2[tLayer]>
  [375] jmpifz [395] ............................ if tValue = pFrameNumberList2[tLayer] then
  [378] getprop 343 ............................. <pFrameNumberList2>
  [381] getlocal 1 .............................. <tLayer>
  [383] pusharglist 2 ........................... <pFrameNumberList2, tLayer>
  [385] objcall 50 .............................. <pFrameNumberList2[tLayer]>
  [387] getlocal 5 .............................. <tFrameCount>
  [389] mod ..................................... <pFrameNumberList2[tLayer] mod tFrameCount>
  [390] pushint8 1 .............................. <1>
  [392] add ..................................... <(pFrameNumberList2[tLayer] mod tFrameCount) + 1>
  [393] setlocal 7 .............................. tValue = (pFrameNumberList2[tLayer] mod tFrameCount) + 1
  [395] getprop 343 ............................. <pFrameNumberList2>
  [398] getlocal 1 .............................. <tLayer>
  [400] getlocal 7 .............................. <tValue>
  [402] pusharglistnoret 3 ...................... <pFrameNumberList2, tLayer, tValue>
  [404] objcall 158 ............................. pFrameNumberList2[tLayer] = tValue
  [406] jmp [427]
  [409] getprop 343 ............................. <pFrameNumberList2>
  [412] getlocal 1 .............................. <tLayer>
  [414] getprop 342 ............................. <pFrameNumberList>
  [417] getlocal 1 .............................. <tLayer>
  [419] pusharglist 2 ........................... <pFrameNumberList, tLayer>
  [421] objcall 50 .............................. <pFrameNumberList[tLayer]>
  [423] pusharglistnoret 3 ...................... <pFrameNumberList2, tLayer, pFrameNumberList[tLayer]>
  [425] objcall 158 ............................. pFrameNumberList2[tLayer] = pFrameNumberList[tLayer]
  [427] getlocal 2 .............................. <tFrameList>
  [429] pushsymb 205 ............................ <#blend>
  [431] pusharglist 2 ........................... <tFrameList, #blend>
  [433] objcall 50 .............................. <tFrameList[#blend]>
  [435] pusharglist 1 ........................... <tFrameList[#blend]>
  [437] extcall 31 .............................. <voidp(tFrameList[#blend])>
  [439] not ..................................... <not voidp(tFrameList[#blend])>
  [440] jmpifz [498] ............................ if not voidp(tFrameList[#blend]) then
  [443] getlocal 2 .............................. <tFrameList>
  [445] pushsymb 205 ............................ <#blend>
  [447] pusharglist 2 ........................... <tFrameList, #blend>
  [449] objcall 50 .............................. <tFrameList[#blend]>
  [451] setlocal 8 .............................. tBlendList = tFrameList[#blend]
  [453] getlocal 8 .............................. <tBlendList>
  [455] getobjprop 34 ........................... <tBlendList.count>
  [457] getprop 343 ............................. <pFrameNumberList2>
  [460] getlocal 1 .............................. <tLayer>
  [462] pusharglist 2 ........................... <pFrameNumberList2, tLayer>
  [464] objcall 50 .............................. <pFrameNumberList2[tLayer]>
  [466] gteq .................................... <tBlendList.count >= pFrameNumberList2[tLayer]>
  [467] jmpifz [498] ............................ if tBlendList.count >= pFrameNumberList2[tLayer] then
  [470] getparam 0 .............................. <me>
  [472] pushsymb 105 ............................ <#pSprList>
  [474] getlocal 1 .............................. <tLayer>
  [476] pusharglist 3 ........................... <me, #pSprList, tLayer>
  [478] objcall 381 ............................. <me.pSprList[tLayer]>
  [481] getlocal 8 .............................. <tBlendList>
  [483] getprop 343 ............................. <pFrameNumberList2>
  [486] getlocal 1 .............................. <tLayer>
  [488] pusharglist 2 ........................... <pFrameNumberList2, tLayer>
  [490] objcall 50 .............................. <pFrameNumberList2[tLayer]>
  [492] pusharglist 2 ........................... <tBlendList, pFrameNumberList2[tLayer]>
  [494] objcall 50 .............................. <tBlendList[pFrameNumberList2[tLayer]]>
  [496] setobjprop 205 .......................... me.pSprList[tLayer].blend = tBlendList[pFrameNumberList2[tLayer]]
  [498] getprop 348 ............................. <pFrameRepeatList>
  [501] getlocal 1 .............................. <tLayer>
  [503] pushint8 1 .............................. <1>
  [505] pusharglistnoret 3 ...................... <pFrameRepeatList, tLayer, 1>
  [507] objcall 158 ............................. pFrameRepeatList[tLayer] = 1
  [509] jmp [533] ............................... next repeat
  [512] getprop 348 ............................. <pFrameRepeatList>
  [515] getlocal 1 .............................. <tLayer>
  [517] getprop 348 ............................. <pFrameRepeatList>
  [520] getlocal 1 .............................. <tLayer>
  [522] pusharglist 2 ........................... <pFrameRepeatList, tLayer>
  [524] objcall 50 .............................. <pFrameRepeatList[tLayer]>
  [526] pushint8 1 .............................. <1>
  [528] add ..................................... <pFrameRepeatList[tLayer] + 1>
  [529] pusharglistnoret 3 ...................... <pFrameRepeatList, tLayer, pFrameRepeatList[tLayer] + 1>
  [531] objcall 158 ............................. pFrameRepeatList[tLayer] = pFrameRepeatList[tLayer] + 1
  [533] pushint8 1
  [535] getlocal 1
  [537] add
  [538] setlocal 1
  [540] endrepeat [ 30]
  [543] getparam 0 .............................. <me>
  [545] pusharglistnoret 1 ...................... <me>
  [547] objcall 100 ............................. me.solveMembers()
  [549] pushint8 1 .............................. <1>
  [551] setlocal 1
  [553] getlocal 1
  [555] getprop 339 ............................. <pLayerDataList>
  [558] getobjprop 34 ........................... <pLayerDataList.count>
  [560] lteq
  [561] jmpifz [590] ............................ repeat with tLayer = 1 to pLayerDataList.count
  [564] getprop 349 ............................. <pIsAnimatingList>
  [567] getlocal 1 .............................. <tLayer>
  [569] getlocal 0 .............................. <tIsAnimatingList>
  [571] getlocal 1 .............................. <tLayer>
  [573] pusharglist 2 ........................... <tIsAnimatingList, tLayer>
  [575] objcall 50 .............................. <tIsAnimatingList[tLayer]>
  [577] pusharglistnoret 3 ...................... <pIsAnimatingList, tLayer, tIsAnimatingList[tLayer]>
  [579] objcall 158 ............................. pIsAnimatingList[tLayer] = tIsAnimatingList[tLayer]
  [581] pushint8 1
  [583] getlocal 1
  [585] add
  [586] setlocal 1
  [588] endrepeat [553]
  [590] pushint8 1 .............................. <1>
  [592] pusharglistnoret 1 ...................... <1>
  [594] extcall 14 .............................. return 1
  [596] ret
end

on hasURL me
  [  0] pushcons 11 ............................. <"item_ad_url_">
  [  2] getparam 0 .............................. <me>
  [  4] getobjprop 102 .......................... <me.pClass>
  [  6] joinstr ................................. <"item_ad_url_" & me.pClass>
  [  7] pusharglist 1 ........................... <"item_ad_url_" & me.pClass>
  [  9] extcall 290 ............................. <textExists("item_ad_url_" & me.pClass)>
  [ 12] pusharglistnoret 1 ...................... <textExists("item_ad_url_" & me.pClass)>
  [ 14] extcall 14 .............................. return textExists("item_ad_url_" & me.pClass)
  [ 16] ret
end

on GetUrl me
  [  0] pushcons 11 ............................. <"item_ad_url_">
  [  2] getparam 0 .............................. <me>
  [  4] getobjprop 102 .......................... <me.pClass>
  [  6] joinstr ................................. <"item_ad_url_" & me.pClass>
  [  7] pusharglist 1 ........................... <"item_ad_url_" & me.pClass>
  [  9] extcall 164 ............................. <getText("item_ad_url_" & me.pClass)>
  [ 11] pusharglistnoret 1 ...................... <getText("item_ad_url_" & me.pClass)>
  [ 13] extcall 14 .............................. return getText("item_ad_url_" & me.pClass)
  [ 15] ret
end

on solveMembers me
  [  0] pushzero ................................ <0>
  [  1] setlocal 0 .............................. tMembersFound = 0
  [  3] pushint8 1 .............................. <1>
  [  5] setlocal 1 .............................. tCount = 1
  [  7] getprop 339 ............................. <pLayerDataList>
  [ 10] getobjprop 34 ........................... <pLayerDataList.count>
  [ 12] pushzero ................................ <0>
  [ 13] gt ...................................... <pLayerDataList.count > 0>
  [ 14] jmpifz [ 24] ............................ if pLayerDataList.count > 0 then
  [ 17] getprop 339 ............................. <pLayerDataList>
  [ 20] getobjprop 34 ........................... <pLayerDataList.count>
  [ 22] setlocal 1 .............................. tCount = pLayerDataList.count
  [ 24] pushint8 1 .............................. <1>
  [ 26] setlocal 2
  [ 28] getlocal 2
  [ 30] getlocal 1 .............................. <tCount>
  [ 32] lteq
  [ 33] jmpifz [567] ............................ repeat with tLayer = 1 to tCount
  [ 36] pushint8 1 .............................. <1>
  [ 38] setlocal 3 .............................. tAnimating = 1
  [ 40] getprop 349 ............................. <pIsAnimatingList>
  [ 43] getobjprop 34 ........................... <pIsAnimatingList.count>
  [ 45] getlocal 2 .............................. <tLayer>
  [ 47] gteq .................................... <pIsAnimatingList.count >= tLayer>
  [ 48] jmpifz [ 62] ............................ if pIsAnimatingList.count >= tLayer then
  [ 51] getprop 349 ............................. <pIsAnimatingList>
  [ 54] getlocal 2 .............................. <tLayer>
  [ 56] pusharglist 2 ........................... <pIsAnimatingList, tLayer>
  [ 58] objcall 50 .............................. <pIsAnimatingList[tLayer]>
  [ 60] setlocal 3 .............................. tAnimating = pIsAnimatingList[tLayer]
  [ 62] getlocal 3 .............................. <tAnimating>
  [ 64] jmpifz [515] ............................ if tAnimating then
  [ 67] pushcons 5 .............................. <"a">
  [ 69] pusharglist 1 ........................... <"a">
  [ 71] extcall 217 ............................. <charToNum("a")>
  [ 73] getlocal 2 .............................. <tLayer>
  [ 75] add ..................................... <charToNum("a") + tLayer>
  [ 76] pushint8 1 .............................. <1>
  [ 78] sub ..................................... <charToNum("a") + tLayer - 1>
  [ 79] pusharglist 1 ........................... <charToNum("a") + tLayer - 1>
  [ 81] extcall 218 ............................. <numToChar(charToNum("a") + tLayer - 1)>
  [ 83] setlocal 4 .............................. tLayerName = numToChar(charToNum("a") + tLayer - 1)
  [ 85] getprop 339 ............................. <pLayerDataList>
  [ 88] getobjprop 34 ........................... <pLayerDataList.count>
  [ 90] getlocal 2 .............................. <tLayer>
  [ 92] gteq .................................... <pLayerDataList.count >= tLayer>
  [ 93] jmpifz [108] ............................ if pLayerDataList.count >= tLayer then
  [ 96] getprop 339 ............................. <pLayerDataList>
  [ 99] getlocal 2 .............................. <tLayer>
  [101] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [103] objcall 357 ............................. <pLayerDataList.getPropAt(tLayer)>
  [106] setlocal 4 .............................. tLayerName = pLayerDataList.getPropAt(tLayer)
  [108] getparam 0 .............................. <me>
  [110] getlocal 4 .............................. <tLayerName>
  [112] pusharglist 2 ........................... <me, tLayerName>
  [114] objcall 329 ............................. <me.getMemberName(tLayerName)>
  [117] setlocal 5 .............................. tMemName = me.getMemberName(tLayerName)
  [119] getparam 0 .............................. <me>
  [121] pushsymb 105 ............................ <#pSprList>
  [123] pusharglist 2 ........................... <me, #pSprList>
  [125] objcall 34 .............................. <me.pSprList.count>
  [127] getlocal 2 .............................. <tLayer>
  [129] lt ...................................... <me.pSprList.count < tLayer>
  [130] jmpifz [245] ............................ if me.pSprList.count < tLayer then / else
  [133] getparam 0 .............................. <me>
  [135] pusharglist 1 ........................... <me>
  [137] objcall 140 ............................. <me.getID()>
  [139] pusharglist 1 ........................... <me.getID()>
  [141] extcall 219 ............................. <reserveSprite(me.getID())>
  [143] pusharglist 1 ........................... <reserveSprite(me.getID())>
  [145] extcall 173 ............................. <sprite(reserveSprite(me.getID()))>
  [147] setlocal 6 .............................. tSpr = sprite(reserveSprite(me.getID()))
  [149] pushsymb 119 ............................ <#room>
  [151] pusharglist 1 ........................... <#room>
  [153] extcall 118 ............................. <getThread(#room)>
  [155] pusharglist 1 ........................... <getThread(#room)>
  [157] objcall 120 ............................. <getThread(#room).getInterface()>
  [159] pusharglist 1 ........................... <getThread(#room).getInterface()>
  [161] objcall 140 ............................. <getThread(#room).getInterface().getID()>
  [163] setlocal 7 .............................. tTargetID = getThread(#room).getInterface().getID()
  [165] getparam 0 .............................. <me>
  [167] getlocal 4 .............................. <tLayerName>
  [169] pusharglist 2 ........................... <me, tLayerName>
  [171] objcall 335 ............................. <me.solveTransparency(tLayerName)>
  [174] pushzero ................................ <0>
  [175] eq ...................................... <me.solveTransparency(tLayerName) = 0>
  [176] jmpifz [232] ............................ if me.solveTransparency(tLayerName) = 0 then
  [179] getlocal 6 .............................. <tSpr>
  [181] getobjprop 136 .......................... <tSpr.spriteNum>
  [183] getparam 0 .............................. <me>
  [185] pusharglist 1 ........................... <me>
  [187] objcall 140 ............................. <me.getID()>
  [189] pusharglistnoret 2 ...................... <tSpr.spriteNum, me.getID()>
  [191] extcall 222 ............................. setEventBroker(tSpr.spriteNum, me.getID())
  [193] getlocal 6 .............................. <tSpr>
  [195] pushsymb 292 ............................ <#eventProcItemObj>
  [198] getlocal 7 .............................. <tTargetID>
  [200] pushsymb 224 ............................ <#mouseDown>
  [202] pusharglistnoret 4 ...................... <tSpr, #eventProcItemObj, tTargetID, #mouseDown>
  [204] objcall 225 ............................. tSpr.registerProcedure(#eventProcItemObj, tTargetID, #mouseDown)
  [206] getlocal 6 .............................. <tSpr>
  [208] pushsymb 293 ............................ <#eventProcItemRollOver>
  [211] getlocal 7 .............................. <tTargetID>
  [213] pushsymb 227 ............................ <#mouseEnter>
  [215] pusharglistnoret 4 ...................... <tSpr, #eventProcItemRollOver, tTargetID, #mouseEnter>
  [217] objcall 225 ............................. tSpr.registerProcedure(#eventProcItemRollOver, tTargetID, #mouseEnter)
  [219] getlocal 6 .............................. <tSpr>
  [221] pushsymb 293 ............................ <#eventProcItemRollOver>
  [224] getlocal 7 .............................. <tTargetID>
  [226] pushsymb 228 ............................ <#mouseLeave>
  [228] pusharglistnoret 4 ...................... <tSpr, #eventProcItemRollOver, tTargetID, #mouseLeave>
  [230] objcall 225 ............................. tSpr.registerProcedure(#eventProcItemRollOver, tTargetID, #mouseLeave)
  [232] getparam 0 .............................. <me>
  [234] getchainedprop 105 ...................... <me.pSprList>
  [236] getlocal 6 .............................. <tSpr>
  [238] pusharglistnoret 2 ...................... <me.pSprList, tSpr>
  [240] objcall 36 .............................. me.pSprList.add(tSpr)
  [242] jmp [284]
  [245] getparam 0 .............................. <me>
  [247] getchainedprop 105 ...................... <me.pSprList>
  [249] getlocal 2 .............................. <tLayer>
  [251] pusharglist 2 ........................... <me.pSprList, tLayer>
  [253] objcall 50 .............................. <me.pSprList[tLayer]>
  [255] setlocal 6 .............................. tSpr = me.pSprList[tLayer]
  [257] getprop 350 ............................. <pInitialized>
  [260] not ..................................... <not pInitialized>
  [261] jmpifz [284] ............................ if not pInitialized then
  [264] getparam 0 .............................. <me>
  [266] getlocal 4 .............................. <tLayerName>
  [268] pusharglist 2 ........................... <me, tLayerName>
  [270] objcall 335 ............................. <me.solveTransparency(tLayerName)>
  [273] jmpifz [284] ............................ if me.solveTransparency(tLayerName) then
  [276] getlocal 6 .............................. <tSpr>
  [278] getobjprop 136 .......................... <tSpr.spriteNum>
  [280] pusharglistnoret 1 ...................... <tSpr.spriteNum>
  [282] extcall 229 ............................. removeEventBroker(tSpr.spriteNum)
  [284] getlocal 5 .............................. <tMemName>
  [286] pusharglist 1 ........................... <tMemName>
  [288] extcall 18 .............................. <getmemnum(tMemName)>
  [290] setlocal 8 .............................. tMemNum = getmemnum(tMemName)
  [292] getlocal 8 .............................. <tMemNum>
  [294] pushzero ................................ <0>
  [295] nteq .................................... <tMemNum <> 0>
  [296] jmpifz [382] ............................ if tMemNum <> 0 then / else
  [299] getlocal 0 .............................. <tMembersFound>
  [301] pushint8 1 .............................. <1>
  [303] add ..................................... <tMembersFound + 1>
  [304] setlocal 0 .............................. tMembersFound = tMembersFound + 1
  [306] getlocal 8 .............................. <tMemNum>
  [308] pushint8 1 .............................. <1>
  [310] lt ...................................... <tMemNum < 1>
  [311] jmpifz [339] ............................ if tMemNum < 1 then / else
  [314] getlocal 8 .............................. <tMemNum>
  [316] pusharglist 1 ........................... <tMemNum>
  [318] extcall 187 ............................. <abs(tMemNum)>
  [320] setlocal 8 .............................. tMemNum = abs(tMemNum)
  [322] getlocal 6 .............................. <tSpr>
  [324] pushint16 180 ........................... <180>
  [327] setobjprop 231 .......................... tSpr.rotation = 180
  [329] getlocal 6 .............................. <tSpr>
  [331] pushint16 180 ........................... <180>
  [334] setobjprop 232 .......................... tSpr.skew = 180
  [336] jmp [349]
  [339] getlocal 6 .............................. <tSpr>
  [341] pushzero ................................ <0>
  [342] setobjprop 231 .......................... tSpr.rotation = 0
  [344] getlocal 6 .............................. <tSpr>
  [346] pushzero ................................ <0>
  [347] setobjprop 232 .......................... tSpr.skew = 0
  [349] getlocal 6 .............................. <tSpr>
  [351] getlocal 8 .............................. <tMemNum>
  [353] setobjprop 233 .......................... tSpr.castNum = tMemNum
  [355] getlocal 6 .............................. <tSpr>
  [357] getlocal 8 .............................. <tMemNum>
  [359] pusharglist 1 ........................... <tMemNum>
  [361] extcall 19 .............................. <member(tMemNum)>
  [363] getobjprop 47 ........................... <member(tMemNum).width>
  [365] setobjprop 47 ........................... tSpr.width = member(tMemNum).width
  [367] getlocal 6 .............................. <tSpr>
  [369] getlocal 8 .............................. <tMemNum>
  [371] pusharglist 1 ........................... <tMemNum>
  [373] extcall 19 .............................. <member(tMemNum)>
  [375] getobjprop 48 ........................... <member(tMemNum).height>
  [377] setobjprop 48 ........................... tSpr.height = member(tMemNum).height
  [379] jmp [408]
  [382] getlocal 6 .............................. <tSpr>
  [384] pushzero ................................ <0>
  [385] setobjprop 47 ........................... tSpr.width = 0
  [387] getlocal 6 .............................. <tSpr>
  [389] pushzero ................................ <0>
  [390] setobjprop 48 ........................... tSpr.height = 0
  [392] getlocal 6 .............................. <tSpr>
  [394] pushzero ................................ <0>
  [395] setobjprop 233 .......................... tSpr.castNum = 0
  [397] getlocal 2 .............................. <tLayer>
  [399] pushint8 1 .............................. <1>
  [401] eq ...................................... <tLayer = 1>
  [402] jmpifz [408] ............................ if tLayer = 1 then
  [405] jmp [567] ............................... exit repeat
  [408] getprop 350 ............................. <pInitialized>
  [411] not ..................................... <not pInitialized>
  [412] jmpifz [503] ............................ if not pInitialized then
  [415] getprop 347 ............................. <pInkList>
  [418] getobjprop 34 ........................... <pInkList.count>
  [420] getlocal 2 .............................. <tLayer>
  [422] lt ...................................... <pInkList.count < tLayer>
  [423] jmpifz [446] ............................ if pInkList.count < tLayer then
  [426] getprop 347 ............................. <pInkList>
  [429] getlocal 2 .............................. <tLayer>
  [431] getparam 0 .............................. <me>
  [433] getlocal 4 .............................. <tLayerName>
  [435] getprop 352 ............................. <pNameBase>
  [438] pusharglist 3 ........................... <me, tLayerName, pNameBase>
  [440] objcall 95 .............................. <me.solveInk(tLayerName, pNameBase)>
  [442] pusharglistnoret 3 ...................... <pInkList, tLayer, me.solveInk(tLayerName, pNameBase)>
  [444] objcall 158 ............................. pInkList[tLayer] = me.solveInk(tLayerName, pNameBase)
  [446] getprop 346 ............................. <pBlendList>
  [449] getobjprop 34 ........................... <pBlendList.count>
  [451] getlocal 2 .............................. <tLayer>
  [453] lt ...................................... <pBlendList.count < tLayer>
  [454] jmpifz [477] ............................ if pBlendList.count < tLayer then
  [457] getprop 346 ............................. <pBlendList>
  [460] getlocal 2 .............................. <tLayer>
  [462] getparam 0 .............................. <me>
  [464] getlocal 4 .............................. <tLayerName>
  [466] getprop 352 ............................. <pNameBase>
  [469] pusharglist 3 ........................... <me, tLayerName, pNameBase>
  [471] objcall 96 .............................. <me.solveBlend(tLayerName, pNameBase)>
  [473] pusharglistnoret 3 ...................... <pBlendList, tLayer, me.solveBlend(tLayerName, pNameBase)>
  [475] objcall 158 ............................. pBlendList[tLayer] = me.solveBlend(tLayerName, pNameBase)
  [477] getlocal 6 .............................. <tSpr>
  [479] getprop 347 ............................. <pInkList>
  [482] getlocal 2 .............................. <tLayer>
  [484] pusharglist 2 ........................... <pInkList, tLayer>
  [486] objcall 50 .............................. <pInkList[tLayer]>
  [488] setobjprop 66 ........................... tSpr.ink = pInkList[tLayer]
  [490] getlocal 6 .............................. <tSpr>
  [492] getprop 346 ............................. <pBlendList>
  [495] getlocal 2 .............................. <tLayer>
  [497] pusharglist 2 ........................... <pBlendList, tLayer>
  [499] objcall 50 .............................. <pBlendList[tLayer]>
  [501] setobjprop 205 .......................... tSpr.blend = pBlendList[tLayer]
  [503] getparam 0 .............................. <me>
  [505] getlocal 2 .............................. <tLayer>
  [507] pusharglistnoret 2 ...................... <me, tLayer>
  [509] objcall 327 ............................. me.postProcessLayer(tLayer)
  [512] jmp [557] ............................... next repeat
  [515] getparam 0 .............................. <me>
  [517] pushsymb 105 ............................ <#pSprList>
  [519] pusharglist 2 ........................... <me, #pSprList>
  [521] objcall 34 .............................. <me.pSprList.count>
  [523] getlocal 2 .............................. <tLayer>
  [525] gteq .................................... <me.pSprList.count >= tLayer>
  [526] jmpifz [557] ............................ if me.pSprList.count >= tLayer then
  [529] getparam 0 .............................. <me>
  [531] getchainedprop 105 ...................... <me.pSprList>
  [533] getlocal 2 .............................. <tLayer>
  [535] pusharglist 2 ........................... <me.pSprList, tLayer>
  [537] objcall 50 .............................. <me.pSprList[tLayer]>
  [539] setlocal 6 .............................. tSpr = me.pSprList[tLayer]
  [541] getlocal 6 .............................. <tSpr>
  [543] getobjprop 233 .......................... <tSpr.castNum>
  [545] pushzero ................................ <0>
  [546] nteq .................................... <tSpr.castNum <> 0>
  [547] jmpifz [557] ............................ if tSpr.castNum <> 0 then
  [550] getlocal 0 .............................. <tMembersFound>
  [552] pushint8 1 .............................. <1>
  [554] add ..................................... <tMembersFound + 1>
  [555] setlocal 0 .............................. tMembersFound = tMembersFound + 1
  [557] pushint8 1
  [559] getlocal 2
  [561] add
  [562] setlocal 2
  [564] endrepeat [ 28]
  [567] pushint8 1 .............................. <1>
  [569] setprop 350 ............................. pInitialized = 1
  [572] getlocal 0 .............................. <tMembersFound>
  [574] pushzero ................................ <0>
  [575] eq ...................................... <tMembersFound = 0>
  [576] jmpifz [587] ............................ if tMembersFound = 0 then / else
  [579] pushzero ................................ <0>
  [580] pusharglistnoret 1 ...................... <0>
  [582] extcall 14 .............................. return 0
  [584] jmp [593]
  [587] pushint8 1 .............................. <1>
  [589] pusharglistnoret 1 ...................... <1>
  [591] extcall 14 .............................. return 1
  [593] ret
end

on updateLocation me
  [  0] pushsymb 101 ............................ <#updateLocation>
  [  2] getparam 0 .............................. <me>
  [  4] pusharglist 1 ........................... <[me]>
  [  6] pushlist ................................ <[me]>
  [  7] pusharglistnoret 2 ...................... <#updateLocation, [me]>
  [  9] extcall 351 ............................. callAncestor(#updateLocation, [me])
  [ 12] getparam 0 .............................. <me>
  [ 14] getobjprop 106 .......................... <me.pDirection>
  [ 16] setlocal 0 .............................. tDirection = me.pDirection
  [ 18] getlocal 0 .............................. <tDirection>
  [ 20] pusharglist 1 ........................... <tDirection>
  [ 22] extcall 42 .............................. <ilk(tDirection)>
  [ 24] pushsymb 35 ............................. <#string>
  [ 26] eq ...................................... <ilk(tDirection) = #string>
  [ 27] jmpifz [ 57] ............................ if ilk(tDirection) = #string then
  [ 30] getlocal 0 .............................. <tDirection>
  [ 32] pushcons 12 ............................. <"leftwall">
  [ 34] eq ...................................... <tDirection = "leftwall">
  [ 35] jmpifz [ 45] ............................ if tDirection = "leftwall" then / else
  [ 38] pushint8 2 .............................. <2>
  [ 40] setlocal 0 .............................. tDirection = 2
  [ 42] jmp [ 57]
  [ 45] getlocal 0 .............................. <tDirection>
  [ 47] pushcons 13 ............................. <"rightwall">
  [ 49] eq ...................................... <tDirection = "rightwall">
  [ 50] jmpifz [ 57] ............................ if tDirection = "rightwall" then
  [ 53] pushint8 4 .............................. <4>
  [ 55] setlocal 0 .............................. tDirection = 4
  [ 57] pushsymb 119 ............................ <#room>
  [ 59] pusharglist 1 ........................... <#room>
  [ 61] extcall 118 ............................. <getThread(#room)>
  [ 63] pusharglist 1 ........................... <getThread(#room)>
  [ 65] objcall 120 ............................. <getThread(#room).getInterface()>
  [ 67] pusharglist 1 ........................... <getThread(#room).getInterface()>
  [ 69] objcall 121 ............................. <getThread(#room).getInterface().getGeometry()>
  [ 71] getparam 0 .............................. <me>
  [ 73] getobjprop 275 .......................... <me.pWallX>
  [ 76] pushint8 1 .............................. <1>
  [ 78] sub ..................................... <me.pWallX - 1>
  [ 79] getparam 0 .............................. <me>
  [ 81] getobjprop 276 .......................... <me.pWallY>
  [ 84] pushint8 1 .............................. <1>
  [ 86] add ..................................... <me.pWallY + 1>
  [ 87] pushzero ................................ <0>
  [ 88] pusharglist 4 ........................... <getThread(#room).getInterface().getGeometry(), me.pWallX - 1, me.pWallY + 1, 0>
  [ 90] objcall 235 ............................. <getThread(#room).getInterface().getGeometry().getScreenCoordinate(me.pWallX - 1, me.pWallY + 1, 0)>
  [ 92] setlocal 1 .............................. tScreenLocs = getThread(#room).getInterface().getGeometry().getScreenCoordinate(me.pWallX - 1, me.pWallY + 1, 0)
  [ 94] getlocal 0 .............................. <tDirection>
  [ 96] pusharglist 1 ........................... <tDirection>
  [ 98] extcall 42 .............................. <ilk(tDirection)>
  [100] pushsymb 177 ............................ <#integer>
  [102] eq ...................................... <ilk(tDirection) = #integer>
  [103] jmpifz [263] ............................ if ilk(tDirection) = #integer then
  [106] pushint8 1 .............................. <1>
  [108] setlocal 2 .............................. tCount = 1
  [110] getprop 339 ............................. <pLayerDataList>
  [113] getobjprop 34 ........................... <pLayerDataList.count>
  [115] pushzero ................................ <0>
  [116] gt ...................................... <pLayerDataList.count > 0>
  [117] jmpifz [127] ............................ if pLayerDataList.count > 0 then
  [120] getprop 339 ............................. <pLayerDataList>
  [123] getobjprop 34 ........................... <pLayerDataList.count>
  [125] setlocal 2 .............................. tCount = pLayerDataList.count
  [127] pushint8 1 .............................. <1>
  [129] setlocal 3
  [131] getlocal 3
  [133] getlocal 2 .............................. <tCount>
  [135] lteq
  [136] jmpifz [263] ............................ repeat with tLayer = 1 to tCount
  [139] pushcons 4 .............................. <EMPTY>
  [141] setlocal 4 .............................. tLayerName = EMPTY
  [143] getprop 339 ............................. <pLayerDataList>
  [146] getobjprop 34 ........................... <pLayerDataList.count>
  [148] getlocal 3 .............................. <tLayer>
  [150] gteq .................................... <pLayerDataList.count >= tLayer>
  [151] jmpifz [166] ............................ if pLayerDataList.count >= tLayer then
  [154] getprop 339 ............................. <pLayerDataList>
  [157] getlocal 3 .............................. <tLayer>
  [159] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [161] objcall 357 ............................. <pLayerDataList.getPropAt(tLayer)>
  [164] setlocal 4 .............................. tLayerName = pLayerDataList.getPropAt(tLayer)
  [166] getparam 0 .............................. <me>
  [168] getlocal 4 .............................. <tLayerName>
  [170] pusharglist 2 ........................... <me, tLayerName>
  [172] objcall 98 .............................. <me.solveLocZ(tLayerName)>
  [174] setlocal 5 .............................. tlocz = me.solveLocZ(tLayerName)
  [176] getparam 0 .............................. <me>
  [178] pushsymb 105 ............................ <#pSprList>
  [180] getlocal 3 .............................. <tLayer>
  [182] pusharglist 3 ........................... <me, #pSprList, tLayer>
  [184] objcall 381 ............................. <me.pSprList[tLayer]>
  [187] getlocal 1 .............................. <tScreenLocs>
  [189] pushint8 3 .............................. <3>
  [191] pusharglist 2 ........................... <tScreenLocs, 3>
  [193] objcall 50 .............................. <tScreenLocs[3]>
  [195] getlocal 5 .............................. <tlocz>
  [197] add ..................................... <tScreenLocs[3] + tlocz>
  [198] getlocal 3 .............................. <tLayer>
  [200] add ..................................... <tScreenLocs[3] + tlocz + tLayer>
  [201] setobjprop 254 .......................... me.pSprList[tLayer].locZ = tScreenLocs[3] + tlocz + tLayer
  [203] getparam 0 .............................. <me>
  [205] getlocal 4 .............................. <tLayerName>
  [207] pusharglist 2 ........................... <me, tLayerName>
  [209] objcall 99 .............................. <me.solveLocShift(tLayerName)>
  [211] setlocal 6 .............................. tLocShift = me.solveLocShift(tLayerName)
  [213] getlocal 6 .............................. <tLocShift>
  [215] pusharglist 1 ........................... <tLocShift>
  [217] extcall 42 .............................. <ilk(tLocShift)>
  [219] pushsymb 43 ............................. <#point>
  [221] eq ...................................... <ilk(tLocShift) = #point>
  [222] jmpifz [254] ............................ if ilk(tLocShift) = #point then
  [225] getparam 0 .............................. <me>
  [227] pushsymb 105 ............................ <#pSprList>
  [229] getlocal 3 .............................. <tLayer>
  [231] pusharglist 3 ........................... <me, #pSprList, tLayer>
  [233] objcall 381 ............................. <me.pSprList[tLayer]>
  [236] getparam 0 .............................. <me>
  [238] pushsymb 105 ............................ <#pSprList>
  [240] getlocal 3 .............................. <tLayer>
  [242] pusharglist 3 ........................... <me, #pSprList, tLayer>
  [244] objcall 381 ............................. <me.pSprList[tLayer]>
  [247] getobjprop 253 .......................... <me.pSprList[tLayer].loc>
  [249] getlocal 6 .............................. <tLocShift>
  [251] add ..................................... <me.pSprList[tLayer].loc + tLocShift>
  [252] setobjprop 253 .......................... me.pSprList[tLayer].loc = me.pSprList[tLayer].loc + tLocShift
  [254] pushint8 1
  [256] getlocal 3
  [258] add
  [259] setlocal 3
  [261] endrepeat [131]
  [263] ret
end

on postProcessLayer me, tLayer
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 14 .............................. return 1
  [  6] ret
end

on getMemberName me, tLayer
  [  0] pushcons 1 .............................. <"s_">
  [  2] getprop 352 ............................. <pNameBase>
  [  5] pusharglist 2 ........................... <"s_", pNameBase>
  [  7] extcall 24 .............................. <offset("s_", pNameBase)>
  [  9] pushint8 1 .............................. <1>
  [ 11] eq ...................................... <offset("s_", pNameBase) = 1>
  [ 12] jmpifz [ 45] ............................ if offset("s_", pNameBase) = 1 then / else
  [ 15] pushcons 1 .............................. <"s_">
  [ 17] getparam 0 .............................. <me>
  [ 19] getobjprop 106 .......................... <me.pDirection>
  [ 21] joinstr ................................. <"s_" & me.pDirection>
  [ 22] getprop 352 ............................. <pNameBase>
  [ 25] pushsymb 23 ............................. <#char>
  [ 27] pushint8 3 .............................. <3>
  [ 29] getprop 352 ............................. <pNameBase>
  [ 32] getobjprop 287 .......................... <pNameBase.length>
  [ 35] pusharglist 4 ........................... <pNameBase, #char, 3, pNameBase.length>
  [ 37] objcall 25 .............................. <pNameBase.char[3..pNameBase.length]>
  [ 39] joinpadstr .............................. <"s_" & me.pDirection && pNameBase.char[3..pNameBase.length]>
  [ 40] setlocal 0 .............................. tName = "s_" & me.pDirection && pNameBase.char[3..pNameBase.length]
  [ 42] jmp [ 55]
  [ 45] getparam 0 .............................. <me>
  [ 47] getobjprop 106 .......................... <me.pDirection>
  [ 49] getprop 352 ............................. <pNameBase>
  [ 52] joinpadstr .............................. <me.pDirection && pNameBase>
  [ 53] setlocal 0 .............................. tName = me.pDirection && pNameBase
  [ 55] getprop 339 ............................. <pLayerDataList>
  [ 58] getparam 1 .............................. <tLayer>
  [ 60] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [ 62] objcall 374 ............................. <pLayerDataList.findPos(tLayer)>
  [ 65] setlocal 1 .............................. tLayerIndex = pLayerDataList.findPos(tLayer)
  [ 67] getparam 0 .............................. <me>
  [ 69] getparam 1 .............................. <tLayer>
  [ 71] pusharglist 2 ........................... <me, tLayer>
  [ 73] objcall 330 ............................. <me.getFrameList(tLayer)>
  [ 76] setlocal 2 .............................. tFrameList = me.getFrameList(tLayer)
  [ 78] getlocal 2 .............................. <tFrameList>
  [ 80] pusharglist 1 ........................... <tFrameList>
  [ 82] extcall 31 .............................. <voidp(tFrameList)>
  [ 84] not ..................................... <not voidp(tFrameList)>
  [ 85] getlocal 1 .............................. <tLayerIndex>
  [ 87] pusharglist 1 ........................... <tLayerIndex>
  [ 89] extcall 31 .............................. <voidp(tLayerIndex)>
  [ 91] not ..................................... <not voidp(tLayerIndex)>
  [ 92] and ..................................... <not voidp(tFrameList) and not voidp(tLayerIndex)>
  [ 93] jmpifz [154] ............................ if not voidp(tFrameList) and not voidp(tLayerIndex) then
  [ 96] getlocal 2 .............................. <tFrameList>
  [ 98] pushsymb 377 ............................ <#frames>
  [101] pusharglist 2 ........................... <tFrameList, #frames>
  [103] objcall 50 .............................. <tFrameList[#frames]>
  [105] setlocal 3 .............................. tFrameSequence = tFrameList[#frames]
  [107] getlocal 3 .............................. <tFrameSequence>
  [109] pusharglist 1 ........................... <tFrameSequence>
  [111] extcall 31 .............................. <voidp(tFrameSequence)>
  [113] not ..................................... <not voidp(tFrameSequence)>
  [114] jmpifz [154] ............................ if not voidp(tFrameSequence) then
  [117] getprop 343 ............................. <pFrameNumberList2>
  [120] getlocal 1 .............................. <tLayerIndex>
  [122] pusharglist 2 ........................... <pFrameNumberList2, tLayerIndex>
  [124] objcall 50 .............................. <pFrameNumberList2[tLayerIndex]>
  [126] setlocal 4 .............................. tFrameNumber = pFrameNumberList2[tLayerIndex]
  [128] getlocal 3 .............................. <tFrameSequence>
  [130] getlocal 4 .............................. <tFrameNumber>
  [132] pusharglist 2 ........................... <tFrameSequence, tFrameNumber>
  [134] objcall 50 .............................. <tFrameSequence[tFrameNumber]>
  [136] setlocal 5 .............................. tFrame = tFrameSequence[tFrameNumber]
  [138] getlocal 0 .............................. <tName>
  [140] pushcons 14 ............................. <"_">
  [142] joinstr ................................. <tName & "_">
  [143] getparam 1 .............................. <tLayer>
  [145] joinstr ................................. <tName & "_" & tLayer>
  [146] pushcons 14 ............................. <"_">
  [148] joinstr ................................. <tName & "_" & tLayer & "_">
  [149] getlocal 5 .............................. <tFrame>
  [151] joinstr ................................. <tName & "_" & tLayer & "_" & tFrame>
  [152] setlocal 0 .............................. tName = tName & "_" & tLayer & "_" & tFrame
  [154] getlocal 0 .............................. <tName>
  [156] pusharglistnoret 1 ...................... <tName>
  [158] extcall 14 .............................. return tName
  [160] ret
end

on getFrameList me, tLayer
  [  0] getparam 1 .............................. <tLayer>
  [  2] pusharglist 1 ........................... <tLayer>
  [  4] extcall 31 .............................. <voidp(tLayer)>
  [  6] not ..................................... <not voidp(tLayer)>
  [  7] jmpifz [ 89] ............................ if not voidp(tLayer) then
  [ 10] getprop 339 ............................. <pLayerDataList>
  [ 13] getparam 1 .............................. <tLayer>
  [ 15] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [ 17] objcall 50 .............................. <pLayerDataList[tLayer]>
  [ 19] pusharglist 1 ........................... <pLayerDataList[tLayer]>
  [ 21] extcall 31 .............................. <voidp(pLayerDataList[tLayer])>
  [ 23] not ..................................... <not voidp(pLayerDataList[tLayer])>
  [ 24] jmpifz [ 89] ............................ if not voidp(pLayerDataList[tLayer]) then
  [ 27] getprop 339 ............................. <pLayerDataList>
  [ 30] getparam 1 .............................. <tLayer>
  [ 32] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [ 34] objcall 50 .............................. <pLayerDataList[tLayer]>
  [ 36] setlocal 0 .............................. tLayerData = pLayerDataList[tLayer]
  [ 38] getprop 338 ............................. <pState>
  [ 41] setlocal 1 .............................. tAction = pState
  [ 43] getlocal 1 .............................. <tAction>
  [ 45] getlocal 0 .............................. <tLayerData>
  [ 47] getobjprop 34 ........................... <tLayerData.count>
  [ 49] gt ...................................... <tAction > tLayerData.count>
  [ 50] jmpifz [ 57] ............................ if tAction > tLayerData.count then
  [ 53] pushint8 1 .............................. <1>
  [ 55] setlocal 1 .............................. tAction = 1
  [ 57] getlocal 1 .............................. <tAction>
  [ 59] pushint8 1 .............................. <1>
  [ 61] gteq .................................... <tAction >= 1>
  [ 62] getlocal 1 .............................. <tAction>
  [ 64] getlocal 0 .............................. <tLayerData>
  [ 66] getobjprop 34 ........................... <tLayerData.count>
  [ 68] lteq .................................... <tAction <= tLayerData.count>
  [ 69] and ..................................... <(tAction >= 1) and (tAction <= tLayerData.count)>
  [ 70] jmpifz [ 89] ............................ if (tAction >= 1) and (tAction <= tLayerData.count) then
  [ 73] getlocal 0 .............................. <tLayerData>
  [ 75] getlocal 1 .............................. <tAction>
  [ 77] pusharglist 2 ........................... <tLayerData, tAction>
  [ 79] objcall 50 .............................. <tLayerData[tAction]>
  [ 81] setlocal 2 .............................. tActionData = tLayerData[tAction]
  [ 83] getlocal 2 .............................. <tActionData>
  [ 85] pusharglistnoret 1 ...................... <tActionData>
  [ 87] extcall 14 .............................. return tActionData
  [ 89] pusharglist 0 ........................... <>
  [ 91] extcall 17 .............................. <VOID>
  [ 93] pusharglistnoret 1 ...................... <VOID>
  [ 95] extcall 14 .............................. return VOID
  [ 97] ret
end

on setState me, tNewState
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getprop 339 ............................. <pLayerDataList>
  [  9] getobjprop 34 ........................... <pLayerDataList.count>
  [ 11] lteq
  [ 12] jmpifz [ 34] ............................ repeat with tLayer = 1 to pLayerDataList.count
  [ 15] getprop 344 ............................. <pLoopCountList>
  [ 18] getlocal 0 .............................. <tLayer>
  [ 20] pushzero ................................ <0>
  [ 21] pusharglistnoret 3 ...................... <pLoopCountList, tLayer, 0>
  [ 23] objcall 158 ............................. pLoopCountList[tLayer] = 0
  [ 25] pushint8 1
  [ 27] getlocal 0
  [ 29] add
  [ 30] setlocal 0
  [ 32] endrepeat [  4]
  [ 34] getparam 1 .............................. <tNewState>
  [ 36] pusharglist 1 ........................... <tNewState>
  [ 38] extcall 177 ............................. <integer(tNewState)>
  [ 40] pusharglist 1 ........................... <integer(tNewState)>
  [ 42] extcall 42 .............................. <ilk(integer(tNewState))>
  [ 44] pushsymb 177 ............................ <#integer>
  [ 46] nteq .................................... <ilk(integer(tNewState)) <> #integer>
  [ 47] jmpifz [ 55] ............................ if ilk(integer(tNewState)) <> #integer then
  [ 50] pushzero ................................ <0>
  [ 51] pusharglistnoret 1 ...................... <0>
  [ 53] extcall 14 .............................. return 0
  [ 55] getparam 1 .............................. <tNewState>
  [ 57] pusharglist 1 ........................... <tNewState>
  [ 59] extcall 177 ............................. <integer(tNewState)>
  [ 61] pushint8 1 .............................. <1>
  [ 63] add ..................................... <integer(tNewState) + 1>
  [ 64] setparam 1 .............................. tNewState = integer(tNewState) + 1
  [ 66] pushzero ................................ <0>
  [ 67] setlocal 1 .............................. tNewIndex = 0
  [ 69] pushint8 1 .............................. <1>
  [ 71] setlocal 2
  [ 73] getlocal 2
  [ 75] getprop 336 ............................. <pStateSequenceList>
  [ 78] getobjprop 34 ........................... <pStateSequenceList.count>
  [ 80] lteq
  [ 81] jmpifz [185] ............................ repeat with tIndex = 1 to pStateSequenceList.count
  [ 84] getprop 336 ............................. <pStateSequenceList>
  [ 87] getlocal 2 .............................. <tIndex>
  [ 89] pusharglist 2 ........................... <pStateSequenceList, tIndex>
  [ 91] objcall 50 .............................. <pStateSequenceList[tIndex]>
  [ 93] setlocal 3 .............................. tstate = pStateSequenceList[tIndex]
  [ 95] getlocal 3 .............................. <tstate>
  [ 97] pusharglist 1 ........................... <tstate>
  [ 99] extcall 42 .............................. <ilk(tstate)>
  [101] pushsymb 59 ............................. <#list>
  [103] eq ...................................... <ilk(tstate) = #list>
  [104] jmpifz [154] ............................ if ilk(tstate) = #list then / else
  [107] pushint8 1 .............................. <1>
  [109] setlocal 4
  [111] getlocal 4
  [113] getlocal 3 .............................. <tstate>
  [115] getobjprop 34 ........................... <tstate.count>
  [117] lteq
  [118] jmpifz [151] ............................ repeat with tIndex2 = 1 to tstate.count
  [121] getlocal 3 .............................. <tstate>
  [123] getlocal 4 .............................. <tIndex2>
  [125] pusharglist 2 ........................... <tstate, tIndex2>
  [127] objcall 50 .............................. <tstate[tIndex2]>
  [129] getparam 1 .............................. <tNewState>
  [131] eq ...................................... <tstate[tIndex2] = tNewState>
  [132] jmpifz [142] ............................ if tstate[tIndex2] = tNewState then
  [135] getlocal 2 .............................. <tIndex>
  [137] setlocal 1 .............................. tNewIndex = tIndex
  [139] jmp [151] ............................... exit repeat
  [142] pushint8 1
  [144] getlocal 4
  [146] add
  [147] setlocal 4
  [149] endrepeat [111]
  [151] jmp [166]
  [154] getlocal 3 .............................. <tstate>
  [156] getparam 1 .............................. <tNewState>
  [158] eq ...................................... <tstate = tNewState>
  [159] jmpifz [166] ............................ if tstate = tNewState then
  [162] getlocal 2 .............................. <tIndex>
  [164] setlocal 1 .............................. tNewIndex = tIndex
  [166] getlocal 1 .............................. <tNewIndex>
  [168] pushzero ................................ <0>
  [169] nteq .................................... <tNewIndex <> 0>
  [170] jmpifz [176] ............................ if tNewIndex <> 0 then
  [173] jmp [185] ............................... exit repeat
  [176] pushint8 1
  [178] getlocal 2
  [180] add
  [181] setlocal 2
  [183] endrepeat [ 73]
  [185] getlocal 1 .............................. <tNewIndex>
  [187] pushzero ................................ <0>
  [188] eq ...................................... <tNewIndex = 0>
  [189] jmpifz [259] ............................ if tNewIndex = 0 then
  [192] getprop 336 ............................. <pStateSequenceList>
  [195] getobjprop 34 ........................... <pStateSequenceList.count>
  [197] pushzero ................................ <0>
  [198] gt ...................................... <pStateSequenceList.count > 0>
  [199] jmpifz [259] ............................ if pStateSequenceList.count > 0 then
  [202] getprop 336 ............................. <pStateSequenceList>
  [205] pushint8 1 .............................. <1>
  [207] pusharglist 2 ........................... <pStateSequenceList, 1>
  [209] objcall 50 .............................. <pStateSequenceList[1]>
  [211] setlocal 3 .............................. tstate = pStateSequenceList[1]
  [213] getlocal 3 .............................. <tstate>
  [215] pusharglist 1 ........................... <tstate>
  [217] extcall 42 .............................. <ilk(tstate)>
  [219] pushsymb 59 ............................. <#list>
  [221] eq ...................................... <ilk(tstate) = #list>
  [222] jmpifz [251] ............................ if ilk(tstate) = #list then / else
  [225] getlocal 3 .............................. <tstate>
  [227] getobjprop 34 ........................... <tstate.count>
  [229] pushzero ................................ <0>
  [230] gt ...................................... <tstate.count > 0>
  [231] jmpifz [248] ............................ if tstate.count > 0 then
  [234] getlocal 3 .............................. <tstate>
  [236] pushint8 1 .............................. <1>
  [238] pusharglist 2 ........................... <tstate, 1>
  [240] objcall 50 .............................. <tstate[1]>
  [242] setparam 1 .............................. tNewState = tstate[1]
  [244] pushint8 1 .............................. <1>
  [246] setlocal 1 .............................. tNewIndex = 1
  [248] jmp [259]
  [251] getlocal 3 .............................. <tstate>
  [253] setparam 1 .............................. tNewState = tstate
  [255] pushint8 1 .............................. <1>
  [257] setlocal 1 .............................. tNewIndex = 1
  [259] getlocal 1 .............................. <tNewIndex>
  [261] pushzero ................................ <0>
  [262] nteq .................................... <tNewIndex <> 0>
  [263] jmpifz [388] ............................ if tNewIndex <> 0 then
  [266] getlocal 1 .............................. <tNewIndex>
  [268] setprop 337 ............................. pStateIndex = tNewIndex
  [271] getparam 1 .............................. <tNewState>
  [273] setprop 338 ............................. pState = tNewState
  [276] getparam 0 .............................. <me>
  [278] pusharglistnoret 1 ...................... <me>
  [280] objcall 334 ............................. me.resetFrameNumbers()
  [283] pushint8 1 .............................. <1>
  [285] setlocal 0
  [287] getlocal 0
  [289] getprop 339 ............................. <pLayerDataList>
  [292] getobjprop 34 ........................... <pLayerDataList.count>
  [294] lteq
  [295] jmpifz [382] ............................ repeat with tLayer = 1 to pLayerDataList.count
  [298] getparam 0 .............................. <me>
  [300] getprop 339 ............................. <pLayerDataList>
  [303] getlocal 0 .............................. <tLayer>
  [305] pusharglist 2 ........................... <pLayerDataList, tLayer>
  [307] objcall 357 ............................. <pLayerDataList.getPropAt(tLayer)>
  [310] pusharglist 2 ........................... <me, pLayerDataList.getPropAt(tLayer)>
  [312] objcall 330 ............................. <me.getFrameList(pLayerDataList.getPropAt(tLayer))>
  [315] setlocal 5 .............................. tFrameList = me.getFrameList(pLayerDataList.getPropAt(tLayer))
  [317] getlocal 5 .............................. <tFrameList>
  [319] pusharglist 1 ........................... <tFrameList>
  [321] extcall 31 .............................. <voidp(tFrameList)>
  [323] not ..................................... <not voidp(tFrameList)>
  [324] jmpifz [373] ............................ if not voidp(tFrameList) then
  [327] pushint8 1 .............................. <1>
  [329] setlocal 6 .............................. tLoop = 1
  [331] getlocal 5 .............................. <tFrameList>
  [333] pushsymb 407 ............................ <#loop>
  [336] pusharglist 2 ........................... <tFrameList, #loop>
  [338] objcall 50 .............................. <tFrameList[#loop]>
  [340] pusharglist 1 ........................... <tFrameList[#loop]>
  [342] extcall 31 .............................. <voidp(tFrameList[#loop])>
  [344] not ..................................... <not voidp(tFrameList[#loop])>
  [345] jmpifz [362] ............................ if not voidp(tFrameList[#loop]) then
  [348] getlocal 5 .............................. <tFrameList>
  [350] pushsymb 407 ............................ <#loop>
  [353] pusharglist 2 ........................... <tFrameList, #loop>
  [355] objcall 50 .............................. <tFrameList[#loop]>
  [357] pushint8 1 .............................. <1>
  [359] sub ..................................... <tFrameList[#loop] - 1>
  [360] setlocal 6 .............................. tLoop = tFrameList[#loop] - 1
  [362] getprop 344 ............................. <pLoopCountList>
  [365] getlocal 0 .............................. <tLayer>
  [367] getlocal 6 .............................. <tLoop>
  [369] pusharglistnoret 3 ...................... <pLoopCountList, tLayer, tLoop>
  [371] objcall 158 ............................. pLoopCountList[tLayer] = tLoop
  [373] pushint8 1
  [375] getlocal 0
  [377] add
  [378] setlocal 0
  [380] endrepeat [287]
  [382] pushint8 1 .............................. <1>
  [384] pusharglistnoret 1 ...................... <1>
  [386] extcall 14 .............................. return 1
  [388] pushzero ................................ <0>
  [389] pusharglistnoret 1 ...................... <0>
  [391] extcall 14 .............................. return 0
  [393] ret
end

on getNextState me
  [  0] pushsymb 119 ............................ <#room>
  [  2] pusharglist 1 ........................... <#room>
  [  4] extcall 118 ............................. <getThread(#room)>
  [  6] pusharglist 1 ........................... <getThread(#room)>
  [  8] objcall 138 ............................. <getThread(#room).getComponent()>
  [ 10] pusharglist 1 ........................... <getThread(#room).getComponent()>
  [ 12] objcall 176 ............................. <getThread(#room).getComponent().getRoomConnection()>
  [ 14] pushcons 15 ............................. <"USEWALLITEM">
  [ 16] pushsymb 177 ............................ <#integer>
  [ 18] getparam 0 .............................. <me>
  [ 20] pusharglist 1 ........................... <me>
  [ 22] objcall 140 ............................. <me.getID()>
  [ 24] pusharglist 1 ........................... <me.getID()>
  [ 26] extcall 177 ............................. <integer(me.getID())>
  [ 28] pusharglist 2 ........................... <[#integer: integer(me.getID())]>
  [ 30] pushproplist ............................ <[#integer: integer(me.getID())]>
  [ 31] pusharglist 3 ........................... <getThread(#room).getComponent().getRoomConnection(), "USEWALLITEM", [#integer: integer(me.getID())]>
  [ 33] objcall 178 ............................. <getThread(#room).getComponent().getRoomConnection().send("USEWALLITEM", [#integer: integer(me.getID())])>
  [ 35] pusharglistnoret 1 ...................... <getThread(#room).getComponent().getRoomConnection().send("USEWALLITEM", [#integer: integer(me.getID())])>
  [ 37] extcall 14 .............................. return getThread(#room).getComponent().getRoomConnection().send("USEWALLITEM", [#integer: integer(me.getID())])
  [ 39] ret
end

on validateStateSequenceList me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setlocal 0 .............................. tstatelist = []
  [  5] pushint8 1 .............................. <1>
  [  7] setlocal 1
  [  9] getlocal 1
  [ 11] getprop 336 ............................. <pStateSequenceList>
  [ 14] getobjprop 34 ........................... <pStateSequenceList.count>
  [ 16] lteq
  [ 17] jmpifz [315] ............................ repeat with tIndex = 1 to pStateSequenceList.count
  [ 20] getprop 336 ............................. <pStateSequenceList>
  [ 23] getlocal 1 .............................. <tIndex>
  [ 25] pusharglist 2 ........................... <pStateSequenceList, tIndex>
  [ 27] objcall 50 .............................. <pStateSequenceList[tIndex]>
  [ 29] setlocal 2 .............................. tstate = pStateSequenceList[tIndex]
  [ 31] getlocal 2 .............................. <tstate>
  [ 33] pusharglist 1 ........................... <tstate>
  [ 35] extcall 42 .............................. <ilk(tstate)>
  [ 37] pushsymb 59 ............................. <#list>
  [ 39] eq ...................................... <ilk(tstate) = #list>
  [ 40] jmpifz [202] ............................ if ilk(tstate) = #list then
  [ 43] getlocal 2 .............................. <tstate>
  [ 45] getobjprop 34 ........................... <tstate.count>
  [ 47] pushint8 1 .............................. <1>
  [ 49] lt ...................................... <tstate.count < 1>
  [ 50] jmpifz [ 76] ............................ if tstate.count < 1 then
  [ 53] getparam 0 .............................. <me>
  [ 55] pushcons 16 ............................. <"Invalid state sequence list for item">
  [ 57] getparam 0 .............................. <me>
  [ 59] getobjprop 352 .......................... <me.pNameBase>
  [ 62] joinpadstr .............................. <"Invalid state sequence list for item" && me.pNameBase>
  [ 63] pushsymb 333 ............................ <#validateStateSequenceList>
  [ 66] pushsymb 221 ............................ <#major>
  [ 68] pusharglist 4 ........................... <me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major>
  [ 70] extcall 61 .............................. <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [ 72] pusharglistnoret 1 ...................... <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [ 74] extcall 14 .............................. return error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)
  [ 76] pushint8 1 .............................. <1>
  [ 78] setlocal 3
  [ 80] getlocal 3
  [ 82] getlocal 2 .............................. <tstate>
  [ 84] getobjprop 34 ........................... <tstate.count>
  [ 86] lteq
  [ 87] jmpifz [199] ............................ repeat with tIndex2 = 1 to tstate.count
  [ 90] getlocal 2 .............................. <tstate>
  [ 92] getlocal 3 .............................. <tIndex2>
  [ 94] pusharglist 2 ........................... <tstate, tIndex2>
  [ 96] objcall 50 .............................. <tstate[tIndex2]>
  [ 98] setlocal 4 .............................. tState2 = tstate[tIndex2]
  [100] getlocal 4 .............................. <tState2>
  [102] pushint8 1 .............................. <1>
  [104] lt ...................................... <tState2 < 1>
  [105] jmpifz [131] ............................ if tState2 < 1 then
  [108] getparam 0 .............................. <me>
  [110] pushcons 16 ............................. <"Invalid state sequence list for item">
  [112] getparam 0 .............................. <me>
  [114] getobjprop 352 .......................... <me.pNameBase>
  [117] joinpadstr .............................. <"Invalid state sequence list for item" && me.pNameBase>
  [118] pushsymb 333 ............................ <#validateStateSequenceList>
  [121] pushsymb 221 ............................ <#major>
  [123] pusharglist 4 ........................... <me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major>
  [125] extcall 61 .............................. <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [127] pusharglistnoret 1 ...................... <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [129] extcall 14 .............................. return error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)
  [131] getlocal 0 .............................. <tstatelist>
  [133] getobjprop 34 ........................... <tstatelist.count>
  [135] getlocal 4 .............................. <tState2>
  [137] lt ...................................... <tstatelist.count < tState2>
  [138] jmpifz [154] ............................ if tstatelist.count < tState2 then
  [141] getlocal 0 .............................. <tstatelist>
  [143] getlocal 4 .............................. <tState2>
  [145] pushint8 1 .............................. <1>
  [147] pusharglistnoret 3 ...................... <tstatelist, tState2, 1>
  [149] objcall 158 ............................. tstatelist[tState2] = 1
  [151] jmp [190] ............................... next repeat
  [154] getlocal 0 .............................. <tstatelist>
  [156] getlocal 4 .............................. <tState2>
  [158] pusharglist 2 ........................... <tstatelist, tState2>
  [160] objcall 50 .............................. <tstatelist[tState2]>
  [162] pushzero ................................ <0>
  [163] gt ...................................... <tstatelist[tState2] > 0>
  [164] jmpifz [190] ............................ if tstatelist[tState2] > 0 then
  [167] getparam 0 .............................. <me>
  [169] pushcons 16 ............................. <"Invalid state sequence list for item">
  [171] getparam 0 .............................. <me>
  [173] getobjprop 352 .......................... <me.pNameBase>
  [176] joinpadstr .............................. <"Invalid state sequence list for item" && me.pNameBase>
  [177] pushsymb 333 ............................ <#validateStateSequenceList>
  [180] pushsymb 221 ............................ <#major>
  [182] pusharglist 4 ........................... <me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major>
  [184] extcall 61 .............................. <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [186] pusharglistnoret 1 ...................... <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [188] extcall 14 .............................. return error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)
  [190] pushint8 1
  [192] getlocal 3
  [194] add
  [195] setlocal 3
  [197] endrepeat [ 80]
  [199] jmp [305] ............................... next repeat
  [202] getlocal 2 .............................. <tstate>
  [204] pushint8 1 .............................. <1>
  [206] lt ...................................... <tstate < 1>
  [207] jmpifz [233] ............................ if tstate < 1 then
  [210] getparam 0 .............................. <me>
  [212] pushcons 16 ............................. <"Invalid state sequence list for item">
  [214] getparam 0 .............................. <me>
  [216] getobjprop 352 .......................... <me.pNameBase>
  [219] joinpadstr .............................. <"Invalid state sequence list for item" && me.pNameBase>
  [220] pushsymb 333 ............................ <#validateStateSequenceList>
  [223] pushsymb 221 ............................ <#major>
  [225] pusharglist 4 ........................... <me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major>
  [227] extcall 61 .............................. <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [229] pusharglistnoret 1 ...................... <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [231] extcall 14 .............................. return error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)
  [233] getlocal 0 .............................. <tstatelist>
  [235] getobjprop 34 ........................... <tstatelist.count>
  [237] getlocal 2 .............................. <tstate>
  [239] lt ...................................... <tstatelist.count < tstate>
  [240] jmpifz [256] ............................ if tstatelist.count < tstate then
  [243] getlocal 0 .............................. <tstatelist>
  [245] getlocal 2 .............................. <tstate>
  [247] pushint8 1 .............................. <1>
  [249] pusharglistnoret 3 ...................... <tstatelist, tstate, 1>
  [251] objcall 158 ............................. tstatelist[tstate] = 1
  [253] jmp [305] ............................... next repeat
  [256] getlocal 0 .............................. <tstatelist>
  [258] getlocal 2 .............................. <tstate>
  [260] pusharglist 2 ........................... <tstatelist, tstate>
  [262] objcall 50 .............................. <tstatelist[tstate]>
  [264] pushzero ................................ <0>
  [265] gt ...................................... <tstatelist[tstate] > 0>
  [266] jmpifz [295] ............................ if tstatelist[tstate] > 0 then
  [269] getparam 0 .............................. <me>
  [271] pushcons 16 ............................. <"Invalid state sequence list for item">
  [273] getparam 0 .............................. <me>
  [275] getobjprop 352 .......................... <me.pNameBase>
  [278] joinpadstr .............................. <"Invalid state sequence list for item" && me.pNameBase>
  [279] pushsymb 333 ............................ <#validateStateSequenceList>
  [282] pushsymb 221 ............................ <#major>
  [284] pusharglist 4 ........................... <me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major>
  [286] extcall 61 .............................. <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [288] pusharglistnoret 1 ...................... <error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)>
  [290] extcall 14 .............................. return error(me, "Invalid state sequence list for item" && me.pNameBase, #validateStateSequenceList, #major)
  [292] jmp [305] ............................... next repeat
  [295] getlocal 0 .............................. <tstatelist>
  [297] getlocal 2 .............................. <tstate>
  [299] pushint8 1 .............................. <1>
  [301] pusharglistnoret 3 ...................... <tstatelist, tstate, 1>
  [303] objcall 158 ............................. tstatelist[tstate] = 1
  [305] pushint8 1
  [307] getlocal 1
  [309] add
  [310] setlocal 1
  [312] endrepeat [  9]
  [315] pushint8 1 .............................. <1>
  [317] pusharglistnoret 1 ...................... <1>
  [319] extcall 14 .............................. return 1
  [321] ret
end

on resetFrameNumbers me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setprop 348 ............................. pFrameRepeatList = []
  [  6] pusharglist 0 ........................... <[]>
  [  8] pushlist ................................ <[]>
  [  9] setprop 349 ............................. pIsAnimatingList = []
  [ 12] pusharglist 0 ........................... <[]>
  [ 14] pushlist ................................ <[]>
  [ 15] setprop 342 ............................. pFrameNumberList = []
  [ 18] pusharglist 0 ........................... <[]>
  [ 20] pushlist ................................ <[]>
  [ 21] setprop 343 ............................. pFrameNumberList2 = []
  [ 24] pushint8 1 .............................. <1>
  [ 26] setlocal 0
  [ 28] getlocal 0
  [ 30] getparam 0 .............................. <me>
  [ 32] pushsymb 109 ............................ <#pLocShiftList>
  [ 34] pusharglist 2 ........................... <me, #pLocShiftList>
  [ 36] objcall 34 .............................. <me.pLocShiftList.count>
  [ 38] getprop 339 ............................. <pLayerDataList>
  [ 41] getobjprop 34 ........................... <pLayerDataList.count>
  [ 43] pusharglist 2 ........................... <me.pLocShiftList.count, pLayerDataList.count>
  [ 45] extcall 188 ............................. <max(me.pLocShiftList.count, pLayerDataList.count)>
  [ 47] lteq
  [ 48] jmpifz [103] ............................ repeat with i = 1 to max(me.pLocShiftList.count, pLayerDataList.count)
  [ 51] getprop 342 ............................. <pFrameNumberList>
  [ 54] getlocal 0 .............................. <i>
  [ 56] pushzero ................................ <0>
  [ 57] pusharglistnoret 3 ...................... <pFrameNumberList, i, 0>
  [ 59] objcall 158 ............................. pFrameNumberList[i] = 0
  [ 61] getprop 343 ............................. <pFrameNumberList2>
  [ 64] getlocal 0 .............................. <i>
  [ 66] pushint8 1 .............................. <1>
  [ 68] pusharglistnoret 3 ...................... <pFrameNumberList2, i, 1>
  [ 70] objcall 158 ............................. pFrameNumberList2[i] = 1
  [ 72] getprop 348 ............................. <pFrameRepeatList>
  [ 75] getlocal 0 .............................. <i>
  [ 77] pushint8 1 .............................. <1>
  [ 79] pusharglistnoret 3 ...................... <pFrameRepeatList, i, 1>
  [ 81] objcall 158 ............................. pFrameRepeatList[i] = 1
  [ 83] getprop 349 ............................. <pIsAnimatingList>
  [ 86] getlocal 0 .............................. <i>
  [ 88] pushint8 1 .............................. <1>
  [ 90] pusharglistnoret 3 ...................... <pIsAnimatingList, i, 1>
  [ 92] objcall 158 ............................. pIsAnimatingList[i] = 1
  [ 94] pushint8 1
  [ 96] getlocal 0
  [ 98] add
  [ 99] setlocal 0
  [101] endrepeat [ 28]
  [103] ret
end

on solveInk me, tPart
  [  0] getprop 352 ............................. <pNameBase>
  [  3] setlocal 0 .............................. tName = pNameBase
  [  5] getlocal 0 .............................. <tName>
  [  7] pushcons 17 ............................. <".props">
  [  9] joinstr ................................. <tName & ".props">
  [ 10] pusharglist 1 ........................... <tName & ".props">
  [ 12] extcall 26 .............................. <memberExists(tName & ".props")>
  [ 14] jmpifz [125] ............................ if memberExists(tName & ".props") then
  [ 17] getlocal 0 .............................. <tName>
  [ 19] pushcons 17 ............................. <".props">
  [ 21] joinstr ................................. <tName & ".props">
  [ 22] pusharglist 1 ........................... <tName & ".props">
  [ 24] extcall 18 .............................. <getmemnum(tName & ".props")>
  [ 26] pusharglist 1 ........................... <getmemnum(tName & ".props")>
  [ 28] extcall 19 .............................. <member(getmemnum(tName & ".props"))>
  [ 30] getobjprop 353 .......................... <member(getmemnum(tName & ".props")).text>
  [ 33] pusharglist 1 ........................... <member(getmemnum(tName & ".props")).text>
  [ 35] extcall 208 ............................. <value(member(getmemnum(tName & ".props")).text)>
  [ 37] setlocal 1 .............................. tPropList = value(member(getmemnum(tName & ".props")).text)
  [ 39] getlocal 1 .............................. <tPropList>
  [ 41] pusharglist 1 ........................... <tPropList>
  [ 43] extcall 42 .............................. <ilk(tPropList)>
  [ 45] pushsymb 209 ............................ <#propList>
  [ 47] nteq .................................... <ilk(tPropList) <> #propList>
  [ 48] jmpifz [ 69] ............................ if ilk(tPropList) <> #propList then / else
  [ 51] getparam 0 .............................. <me>
  [ 53] getlocal 0 .............................. <tName>
  [ 55] pushcons 18 ............................. <".props is not valid!">
  [ 57] joinstr ................................. <tName & ".props is not valid!">
  [ 58] pushsymb 95 ............................. <#solveInk>
  [ 60] pushsymb 62 ............................. <#minor>
  [ 62] pusharglistnoret 4 ...................... <me, tName & ".props is not valid!", #solveInk, #minor>
  [ 64] extcall 61 .............................. error(me, tName & ".props is not valid!", #solveInk, #minor)
  [ 66] jmp [125]
  [ 69] getlocal 1 .............................. <tPropList>
  [ 71] getparam 1 .............................. <tPart>
  [ 73] pusharglist 2 ........................... <tPropList, tPart>
  [ 75] objcall 50 .............................. <tPropList[tPart]>
  [ 77] pusharglist 0 ........................... <>
  [ 79] extcall 17 .............................. <VOID>
  [ 81] nteq .................................... <tPropList[tPart] <> VOID>
  [ 82] jmpifz [125] ............................ if tPropList[tPart] <> VOID then
  [ 85] getlocal 1 .............................. <tPropList>
  [ 87] getparam 1 .............................. <tPart>
  [ 89] pusharglist 2 ........................... <tPropList, tPart>
  [ 91] objcall 50 .............................. <tPropList[tPart]>
  [ 93] pushsymb 66 ............................. <#ink>
  [ 95] pusharglist 2 ........................... <tPropList[tPart], #ink>
  [ 97] objcall 50 .............................. <tPropList[tPart][#ink]>
  [ 99] pusharglist 0 ........................... <>
  [101] extcall 17 .............................. <VOID>
  [103] nteq .................................... <tPropList[tPart][#ink] <> VOID>
  [104] jmpifz [125] ............................ if tPropList[tPart][#ink] <> VOID then
  [107] getlocal 1 .............................. <tPropList>
  [109] getparam 1 .............................. <tPart>
  [111] pusharglist 2 ........................... <tPropList, tPart>
  [113] objcall 50 .............................. <tPropList[tPart]>
  [115] pushsymb 66 ............................. <#ink>
  [117] pusharglist 2 ........................... <tPropList[tPart], #ink>
  [119] objcall 50 .............................. <tPropList[tPart][#ink]>
  [121] pusharglistnoret 1 ...................... <tPropList[tPart][#ink]>
  [123] extcall 14 .............................. return tPropList[tPart][#ink]
  [125] pushint8 8 .............................. <8>
  [127] pusharglistnoret 1 ...................... <8>
  [129] extcall 14 .............................. return 8
  [131] ret
end

on solveBlend me, tPart
  [  0] getprop 352 ............................. <pNameBase>
  [  3] setlocal 0 .............................. tName = pNameBase
  [  5] getlocal 0 .............................. <tName>
  [  7] pushcons 17 ............................. <".props">
  [  9] joinstr ................................. <tName & ".props">
  [ 10] pusharglist 1 ........................... <tName & ".props">
  [ 12] extcall 26 .............................. <memberExists(tName & ".props")>
  [ 14] jmpifz [125] ............................ if memberExists(tName & ".props") then
  [ 17] getlocal 0 .............................. <tName>
  [ 19] pushcons 17 ............................. <".props">
  [ 21] joinstr ................................. <tName & ".props">
  [ 22] pusharglist 1 ........................... <tName & ".props">
  [ 24] extcall 18 .............................. <getmemnum(tName & ".props")>
  [ 26] pusharglist 1 ........................... <getmemnum(tName & ".props")>
  [ 28] extcall 19 .............................. <member(getmemnum(tName & ".props"))>
  [ 30] getobjprop 353 .......................... <member(getmemnum(tName & ".props")).text>
  [ 33] pusharglist 1 ........................... <member(getmemnum(tName & ".props")).text>
  [ 35] extcall 208 ............................. <value(member(getmemnum(tName & ".props")).text)>
  [ 37] setlocal 1 .............................. tPropList = value(member(getmemnum(tName & ".props")).text)
  [ 39] getlocal 1 .............................. <tPropList>
  [ 41] pusharglist 1 ........................... <tPropList>
  [ 43] extcall 42 .............................. <ilk(tPropList)>
  [ 45] pushsymb 209 ............................ <#propList>
  [ 47] nteq .................................... <ilk(tPropList) <> #propList>
  [ 48] jmpifz [ 69] ............................ if ilk(tPropList) <> #propList then / else
  [ 51] getparam 0 .............................. <me>
  [ 53] getlocal 0 .............................. <tName>
  [ 55] pushcons 18 ............................. <".props is not valid!">
  [ 57] joinstr ................................. <tName & ".props is not valid!">
  [ 58] pushsymb 96 ............................. <#solveBlend>
  [ 60] pushsymb 62 ............................. <#minor>
  [ 62] pusharglistnoret 4 ...................... <me, tName & ".props is not valid!", #solveBlend, #minor>
  [ 64] extcall 61 .............................. error(me, tName & ".props is not valid!", #solveBlend, #minor)
  [ 66] jmp [125]
  [ 69] getlocal 1 .............................. <tPropList>
  [ 71] getparam 1 .............................. <tPart>
  [ 73] pusharglist 2 ........................... <tPropList, tPart>
  [ 75] objcall 50 .............................. <tPropList[tPart]>
  [ 77] pusharglist 0 ........................... <>
  [ 79] extcall 17 .............................. <VOID>
  [ 81] nteq .................................... <tPropList[tPart] <> VOID>
  [ 82] jmpifz [125] ............................ if tPropList[tPart] <> VOID then
  [ 85] getlocal 1 .............................. <tPropList>
  [ 87] getparam 1 .............................. <tPart>
  [ 89] pusharglist 2 ........................... <tPropList, tPart>
  [ 91] objcall 50 .............................. <tPropList[tPart]>
  [ 93] pushsymb 205 ............................ <#blend>
  [ 95] pusharglist 2 ........................... <tPropList[tPart], #blend>
  [ 97] objcall 50 .............................. <tPropList[tPart][#blend]>
  [ 99] pusharglist 0 ........................... <>
  [101] extcall 17 .............................. <VOID>
  [103] nteq .................................... <tPropList[tPart][#blend] <> VOID>
  [104] jmpifz [125] ............................ if tPropList[tPart][#blend] <> VOID then
  [107] getlocal 1 .............................. <tPropList>
  [109] getparam 1 .............................. <tPart>
  [111] pusharglist 2 ........................... <tPropList, tPart>
  [113] objcall 50 .............................. <tPropList[tPart]>
  [115] pushsymb 205 ............................ <#blend>
  [117] pusharglist 2 ........................... <tPropList[tPart], #blend>
  [119] objcall 50 .............................. <tPropList[tPart][#blend]>
  [121] pusharglistnoret 1 ...................... <tPropList[tPart][#blend]>
  [123] extcall 14 .............................. return tPropList[tPart][#blend]
  [125] pushint8 100 ............................ <100>
  [127] pusharglistnoret 1 ...................... <100>
  [129] extcall 14 .............................. return 100
  [131] ret
end

on solveLocShift me, tPart, tdir
  [  0] getprop 352 ............................. <pNameBase>
  [  3] setlocal 0 .............................. tName = pNameBase
  [  5] getlocal 0 .............................. <tName>
  [  7] pushcons 17 ............................. <".props">
  [  9] joinstr ................................. <tName & ".props">
  [ 10] pusharglist 1 ........................... <tName & ".props">
  [ 12] extcall 26 .............................. <memberExists(tName & ".props")>
  [ 14] not ..................................... <not memberExists(tName & ".props")>
  [ 15] jmpifz [ 23] ............................ if not memberExists(tName & ".props") then
  [ 18] pushzero ................................ <0>
  [ 19] pusharglistnoret 1 ...................... <0>
  [ 21] extcall 14 .............................. return 0
  [ 23] getlocal 0 .............................. <tName>
  [ 25] pushcons 17 ............................. <".props">
  [ 27] joinstr ................................. <tName & ".props">
  [ 28] pusharglist 1 ........................... <tName & ".props">
  [ 30] extcall 18 .............................. <getmemnum(tName & ".props")>
  [ 32] pushzero ................................ <0>
  [ 33] getfield ................................ <field(getmemnum(tName & ".props"))>
  [ 34] pusharglist 1 ........................... <field(getmemnum(tName & ".props"))>
  [ 36] extcall 208 ............................. <value(field(getmemnum(tName & ".props")))>
  [ 38] setlocal 1 .............................. tPropList = value(field(getmemnum(tName & ".props")))
  [ 40] getlocal 1 .............................. <tPropList>
  [ 42] pusharglist 1 ........................... <tPropList>
  [ 44] extcall 42 .............................. <ilk(tPropList)>
  [ 46] pushsymb 209 ............................ <#propList>
  [ 48] nteq .................................... <ilk(tPropList) <> #propList>
  [ 49] jmpifz [ 75] ............................ if ilk(tPropList) <> #propList then / else
  [ 52] getparam 0 .............................. <me>
  [ 54] getlocal 0 .............................. <tName>
  [ 56] pushcons 18 ............................. <".props is not valid!">
  [ 58] joinstr ................................. <tName & ".props is not valid!">
  [ 59] pushsymb 99 ............................. <#solveLocShift>
  [ 61] pushsymb 62 ............................. <#minor>
  [ 63] pusharglistnoret 4 ...................... <me, tName & ".props is not valid!", #solveLocShift, #minor>
  [ 65] extcall 61 .............................. error(me, tName & ".props is not valid!", #solveLocShift, #minor)
  [ 67] pushzero ................................ <0>
  [ 68] pusharglistnoret 1 ...................... <0>
  [ 70] extcall 14 .............................. return 0
  [ 72] jmp [195]
  [ 75] getlocal 1 .............................. <tPropList>
  [ 77] getparam 1 .............................. <tPart>
  [ 79] pusharglist 2 ........................... <tPropList, tPart>
  [ 81] objcall 50 .............................. <tPropList[tPart]>
  [ 83] pusharglist 1 ........................... <tPropList[tPart]>
  [ 85] extcall 31 .............................. <voidp(tPropList[tPart])>
  [ 87] jmpifz [ 95] ............................ if voidp(tPropList[tPart]) then
  [ 90] pushzero ................................ <0>
  [ 91] pusharglistnoret 1 ...................... <0>
  [ 93] extcall 14 .............................. return 0
  [ 95] getlocal 1 .............................. <tPropList>
  [ 97] getparam 1 .............................. <tPart>
  [ 99] pusharglist 2 ........................... <tPropList, tPart>
  [101] objcall 50 .............................. <tPropList[tPart]>
  [103] pushsymb 215 ............................ <#locshift>
  [105] pusharglist 2 ........................... <tPropList[tPart], #locshift>
  [107] objcall 50 .............................. <tPropList[tPart][#locshift]>
  [109] pusharglist 1 ........................... <tPropList[tPart][#locshift]>
  [111] extcall 31 .............................. <voidp(tPropList[tPart][#locshift])>
  [113] jmpifz [121] ............................ if voidp(tPropList[tPart][#locshift]) then
  [116] pushzero ................................ <0>
  [117] pusharglistnoret 1 ...................... <0>
  [119] extcall 14 .............................. return 0
  [121] getlocal 1 .............................. <tPropList>
  [123] getparam 1 .............................. <tPart>
  [125] pusharglist 2 ........................... <tPropList, tPart>
  [127] objcall 50 .............................. <tPropList[tPart]>
  [129] pushsymb 215 ............................ <#locshift>
  [131] pusharglist 2 ........................... <tPropList[tPart], #locshift>
  [133] objcall 50 .............................. <tPropList[tPart][#locshift]>
  [135] getobjprop 34 ........................... <tPropList[tPart][#locshift].count>
  [137] getparam 2 .............................. <tdir>
  [139] lteq .................................... <tPropList[tPart][#locshift].count <= tdir>
  [140] jmpifz [148] ............................ if tPropList[tPart][#locshift].count <= tdir then
  [143] pushzero ................................ <0>
  [144] pusharglistnoret 1 ...................... <0>
  [146] extcall 14 .............................. return 0
  [148] getlocal 1 .............................. <tPropList>
  [150] getparam 1 .............................. <tPart>
  [152] pusharglist 2 ........................... <tPropList, tPart>
  [154] objcall 50 .............................. <tPropList[tPart]>
  [156] pushsymb 215 ............................ <#locshift>
  [158] pusharglist 2 ........................... <tPropList[tPart], #locshift>
  [160] objcall 50 .............................. <tPropList[tPart][#locshift]>
  [162] getparam 2 .............................. <tdir>
  [164] pushint8 1 .............................. <1>
  [166] add ..................................... <tdir + 1>
  [167] pusharglist 2 ........................... <tPropList[tPart][#locshift], tdir + 1>
  [169] objcall 50 .............................. <tPropList[tPart][#locshift][tdir + 1]>
  [171] pusharglist 1 ........................... <tPropList[tPart][#locshift][tdir + 1]>
  [173] extcall 208 ............................. <value(tPropList[tPart][#locshift][tdir + 1])>
  [175] setlocal 2 .............................. tShift = value(tPropList[tPart][#locshift][tdir + 1])
  [177] getlocal 2 .............................. <tShift>
  [179] pusharglist 1 ........................... <tShift>
  [181] extcall 42 .............................. <ilk(tShift)>
  [183] pushsymb 43 ............................. <#point>
  [185] eq ...................................... <ilk(tShift) = #point>
  [186] jmpifz [195] ............................ if ilk(tShift) = #point then
  [189] getlocal 2 .............................. <tShift>
  [191] pusharglistnoret 1 ...................... <tShift>
  [193] extcall 14 .............................. return tShift
  [195] pushzero ................................ <0>
  [196] pusharglistnoret 1 ...................... <0>
  [198] extcall 14 .............................. return 0
  [200] ret
end

on solveLocZ me, tPart, tdir
  [  0] getprop 352 ............................. <pNameBase>
  [  3] setlocal 0 .............................. tName = pNameBase
  [  5] getlocal 0 .............................. <tName>
  [  7] pushcons 17 ............................. <".props">
  [  9] joinstr ................................. <tName & ".props">
  [ 10] pusharglist 1 ........................... <tName & ".props">
  [ 12] extcall 26 .............................. <memberExists(tName & ".props")>
  [ 14] not ..................................... <not memberExists(tName & ".props")>
  [ 15] jmpifz [ 42] ............................ if not memberExists(tName & ".props") then
  [ 18] getparam 1 .............................. <tPart>
  [ 20] pusharglist 1 ........................... <tPart>
  [ 22] extcall 35 .............................. <string(tPart)>
  [ 24] pusharglist 1 ........................... <string(tPart)>
  [ 26] extcall 217 ............................. <charToNum(string(tPart))>
  [ 28] pushcons 5 .............................. <"a">
  [ 30] pusharglist 1 ........................... <"a">
  [ 32] extcall 217 ............................. <charToNum("a")>
  [ 34] sub ..................................... <charToNum(string(tPart)) - charToNum("a")>
  [ 35] pushint8 1 .............................. <1>
  [ 37] add ..................................... <charToNum(string(tPart)) - charToNum("a") + 1>
  [ 38] pusharglistnoret 1 ...................... <charToNum(string(tPart)) - charToNum("a") + 1>
  [ 40] extcall 14 .............................. return charToNum(string(tPart)) - charToNum("a") + 1
  [ 42] getlocal 0 .............................. <tName>
  [ 44] pushcons 17 ............................. <".props">
  [ 46] joinstr ................................. <tName & ".props">
  [ 47] pusharglist 1 ........................... <tName & ".props">
  [ 49] extcall 18 .............................. <getmemnum(tName & ".props")>
  [ 51] pushzero ................................ <0>
  [ 52] getfield ................................ <field(getmemnum(tName & ".props"))>
  [ 53] pusharglist 1 ........................... <field(getmemnum(tName & ".props"))>
  [ 55] extcall 208 ............................. <value(field(getmemnum(tName & ".props")))>
  [ 57] setlocal 1 .............................. tPropList = value(field(getmemnum(tName & ".props")))
  [ 59] getlocal 1 .............................. <tPropList>
  [ 61] pusharglist 1 ........................... <tPropList>
  [ 63] extcall 42 .............................. <ilk(tPropList)>
  [ 65] pushsymb 209 ............................ <#propList>
  [ 67] nteq .................................... <ilk(tPropList) <> #propList>
  [ 68] jmpifz [ 94] ............................ if ilk(tPropList) <> #propList then / else
  [ 71] getparam 0 .............................. <me>
  [ 73] getlocal 0 .............................. <tName>
  [ 75] pushcons 18 ............................. <".props is not valid!">
  [ 77] joinstr ................................. <tName & ".props is not valid!">
  [ 78] pushsymb 98 ............................. <#solveLocZ>
  [ 80] pushsymb 62 ............................. <#minor>
  [ 82] pusharglistnoret 4 ...................... <me, tName & ".props is not valid!", #solveLocZ, #minor>
  [ 84] extcall 61 .............................. error(me, tName & ".props is not valid!", #solveLocZ, #minor)
  [ 86] pushzero ................................ <0>
  [ 87] pusharglistnoret 1 ...................... <0>
  [ 89] extcall 14 .............................. return 0
  [ 91] jmp [234]
  [ 94] getlocal 1 .............................. <tPropList>
  [ 96] getparam 1 .............................. <tPart>
  [ 98] pusharglist 2 ........................... <tPropList, tPart>
  [100] objcall 50 .............................. <tPropList[tPart]>
  [102] pusharglist 0 ........................... <>
  [104] extcall 17 .............................. <VOID>
  [106] eq ...................................... <tPropList[tPart] = VOID>
  [107] jmpifz [115] ............................ if tPropList[tPart] = VOID then
  [110] pushzero ................................ <0>
  [111] pusharglistnoret 1 ...................... <0>
  [113] extcall 14 .............................. return 0
  [115] getlocal 1 .............................. <tPropList>
  [117] getparam 1 .............................. <tPart>
  [119] pusharglist 2 ........................... <tPropList, tPart>
  [121] objcall 50 .............................. <tPropList[tPart]>
  [123] pushsymb 213 ............................ <#zshift>
  [125] pusharglist 2 ........................... <tPropList[tPart], #zshift>
  [127] objcall 50 .............................. <tPropList[tPart][#zshift]>
  [129] pusharglist 0 ........................... <>
  [131] extcall 17 .............................. <VOID>
  [133] eq ...................................... <tPropList[tPart][#zshift] = VOID>
  [134] jmpifz [142] ............................ if tPropList[tPart][#zshift] = VOID then
  [137] pushzero ................................ <0>
  [138] pusharglistnoret 1 ...................... <0>
  [140] extcall 14 .............................. return 0
  [142] getlocal 1 .............................. <tPropList>
  [144] getparam 1 .............................. <tPart>
  [146] pusharglist 2 ........................... <tPropList, tPart>
  [148] objcall 50 .............................. <tPropList[tPart]>
  [150] pushsymb 213 ............................ <#zshift>
  [152] pusharglist 2 ........................... <tPropList[tPart], #zshift>
  [154] objcall 50 .............................. <tPropList[tPart][#zshift]>
  [156] pusharglist 1 ........................... <tPropList[tPart][#zshift]>
  [158] extcall 42 .............................. <ilk(tPropList[tPart][#zshift])>
  [160] pushsymb 59 ............................. <#list>
  [162] eq ...................................... <ilk(tPropList[tPart][#zshift]) = #list>
  [163] jmpifz [194] ............................ if ilk(tPropList[tPart][#zshift]) = #list then / else
  [166] getlocal 1 .............................. <tPropList>
  [168] getparam 1 .............................. <tPart>
  [170] pusharglist 2 ........................... <tPropList, tPart>
  [172] objcall 50 .............................. <tPropList[tPart]>
  [174] pushsymb 213 ............................ <#zshift>
  [176] pusharglist 2 ........................... <tPropList[tPart], #zshift>
  [178] objcall 50 .............................. <tPropList[tPart][#zshift]>
  [180] getobjprop 34 ........................... <tPropList[tPart][#zshift].count>
  [182] getparam 2 .............................. <tdir>
  [184] lteq .................................... <tPropList[tPart][#zshift].count <= tdir>
  [185] jmpifz [191] ............................ if tPropList[tPart][#zshift].count <= tdir then
  [188] pushzero ................................ <0>
  [189] setparam 2 .............................. tdir = 0
  [191] jmp [234]
  [194] getlocal 1 .............................. <tPropList>
  [196] getparam 1 .............................. <tPart>
  [198] pusharglist 2 ........................... <tPropList, tPart>
  [200] objcall 50 .............................. <tPropList[tPart]>
  [202] pushsymb 213 ............................ <#zshift>
  [204] pushzero ................................ <0>
  [205] pushzero ................................ <0>
  [206] pushzero ................................ <0>
  [207] pushzero ................................ <0>
  [208] pushzero ................................ <0>
  [209] pushzero ................................ <0>
  [210] pushzero ................................ <0>
  [211] pushzero ................................ <0>
  [212] pusharglist 8 ........................... <[0, 0, 0, 0, 0, 0, 0, 0]>
  [214] pushlist ................................ <[0, 0, 0, 0, 0, 0, 0, 0]>
  [215] pusharglistnoret 3 ...................... <tPropList[tPart], #zshift, [0, 0, 0, 0, 0, 0, 0, 0]>
  [217] objcall 158 ............................. tPropList[tPart][#zshift] = [0, 0, 0, 0, 0, 0, 0, 0]
  [219] getparam 0 .............................. <me>
  [221] getlocal 0 .............................. <tName>
  [223] pushcons 19 ............................. <"zshift is not valid list">
  [225] joinpadstr .............................. <tName && "zshift is not valid list">
  [226] pushsymb 98 ............................. <#solveLocZ>
  [228] pushsymb 62 ............................. <#minor>
  [230] pusharglistnoret 4 ...................... <me, tName && "zshift is not valid list", #solveLocZ, #minor>
  [232] extcall 61 .............................. error(me, tName && "zshift is not valid list", #solveLocZ, #minor)
  [234] getlocal 1 .............................. <tPropList>
  [236] getparam 1 .............................. <tPart>
  [238] pusharglist 2 ........................... <tPropList, tPart>
  [240] objcall 50 .............................. <tPropList[tPart]>
  [242] pushsymb 213 ............................ <#zshift>
  [244] pusharglist 2 ........................... <tPropList[tPart], #zshift>
  [246] objcall 50 .............................. <tPropList[tPart][#zshift]>
  [248] getparam 2 .............................. <tdir>
  [250] pushint8 1 .............................. <1>
  [252] add ..................................... <tdir + 1>
  [253] pusharglist 2 ........................... <tPropList[tPart][#zshift], tdir + 1>
  [255] objcall 50 .............................. <tPropList[tPart][#zshift][tdir + 1]>
  [257] pusharglistnoret 1 ...................... <tPropList[tPart][#zshift][tdir + 1]>
  [259] extcall 14 .............................. return tPropList[tPart][#zshift][tdir + 1]
  [261] ret
end

on solveTransparency me, tPart
  [  0] getprop 352 ............................. <pNameBase>
  [  3] setlocal 0 .............................. tName = pNameBase
  [  5] getlocal 0 .............................. <tName>
  [  7] pushcons 17 ............................. <".props">
  [  9] joinstr ................................. <tName & ".props">
  [ 10] pusharglist 1 ........................... <tName & ".props">
  [ 12] extcall 26 .............................. <memberExists(tName & ".props")>
  [ 14] jmpifz [127] ............................ if memberExists(tName & ".props") then
  [ 17] getlocal 0 .............................. <tName>
  [ 19] pushcons 17 ............................. <".props">
  [ 21] joinstr ................................. <tName & ".props">
  [ 22] pusharglist 1 ........................... <tName & ".props">
  [ 24] extcall 18 .............................. <getmemnum(tName & ".props")>
  [ 26] pusharglist 1 ........................... <getmemnum(tName & ".props")>
  [ 28] extcall 19 .............................. <member(getmemnum(tName & ".props"))>
  [ 30] getobjprop 353 .......................... <member(getmemnum(tName & ".props")).text>
  [ 33] pusharglist 1 ........................... <member(getmemnum(tName & ".props")).text>
  [ 35] extcall 208 ............................. <value(member(getmemnum(tName & ".props")).text)>
  [ 37] setlocal 1 .............................. tPropList = value(member(getmemnum(tName & ".props")).text)
  [ 39] getlocal 1 .............................. <tPropList>
  [ 41] pusharglist 1 ........................... <tPropList>
  [ 43] extcall 42 .............................. <ilk(tPropList)>
  [ 45] pushsymb 209 ............................ <#propList>
  [ 47] nteq .................................... <ilk(tPropList) <> #propList>
  [ 48] jmpifz [ 69] ............................ if ilk(tPropList) <> #propList then / else
  [ 51] getparam 0 .............................. <me>
  [ 53] getlocal 0 .............................. <tName>
  [ 55] pushcons 18 ............................. <".props is not valid!">
  [ 57] joinstr ................................. <tName & ".props is not valid!">
  [ 58] pushsymb 95 ............................. <#solveInk>
  [ 60] pushsymb 62 ............................. <#minor>
  [ 62] pusharglistnoret 4 ...................... <me, tName & ".props is not valid!", #solveInk, #minor>
  [ 64] extcall 61 .............................. error(me, tName & ".props is not valid!", #solveInk, #minor)
  [ 66] jmp [127]
  [ 69] getlocal 1 .............................. <tPropList>
  [ 71] getparam 1 .............................. <tPart>
  [ 73] pusharglist 2 ........................... <tPropList, tPart>
  [ 75] objcall 50 .............................. <tPropList[tPart]>
  [ 77] pusharglist 0 ........................... <>
  [ 79] extcall 17 .............................. <VOID>
  [ 81] nteq .................................... <tPropList[tPart] <> VOID>
  [ 82] jmpifz [127] ............................ if tPropList[tPart] <> VOID then
  [ 85] getlocal 1 .............................. <tPropList>
  [ 87] getparam 1 .............................. <tPart>
  [ 89] pusharglist 2 ........................... <tPropList, tPart>
  [ 91] objcall 50 .............................. <tPropList[tPart]>
  [ 93] pushsymb 414 ............................ <#transparent>
  [ 96] pusharglist 2 ........................... <tPropList[tPart], #transparent>
  [ 98] objcall 50 .............................. <tPropList[tPart][#transparent]>
  [100] pusharglist 0 ........................... <>
  [102] extcall 17 .............................. <VOID>
  [104] nteq .................................... <tPropList[tPart][#transparent] <> VOID>
  [105] jmpifz [127] ............................ if tPropList[tPart][#transparent] <> VOID then
  [108] getlocal 1 .............................. <tPropList>
  [110] getparam 1 .............................. <tPart>
  [112] pusharglist 2 ........................... <tPropList, tPart>
  [114] objcall 50 .............................. <tPropList[tPart]>
  [116] pushsymb 414 ............................ <#transparent>
  [119] pusharglist 2 ........................... <tPropList[tPart], #transparent>
  [121] objcall 50 .............................. <tPropList[tPart][#transparent]>
  [123] pusharglistnoret 1 ...................... <tPropList[tPart][#transparent]>
  [125] extcall 14 .............................. return tPropList[tPart][#transparent]
  [127] pushzero ................................ <0>
  [128] pusharglistnoret 1 ...................... <0>
  [130] extcall 14 .............................. return 0
  [132] ret
end
