property pTaskQueue, pActiveTasks, pReceivedTasks, pCompleteTasks, pTypeDefList

on construct me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 757 ............................. pTaskQueue = [:]
  [  6] pusharglist 0 ........................... <[:]>
  [  8] pushproplist ............................ <[:]>
  [  9] setprop 758 ............................. pActiveTasks = [:]
  [ 12] pusharglist 0 ........................... <[]>
  [ 14] pushlist ................................ <[]>
  [ 15] setprop 759 ............................. pReceivedTasks = []
  [ 18] pusharglist 0 ........................... <[]>
  [ 20] pushlist ................................ <[]>
  [ 21] setprop 760 ............................. pCompleteTasks = []
  [ 24] pusharglist 0 ........................... <[:]>
  [ 26] pushproplist ............................ <[:]>
  [ 27] setprop 761 ............................. pTypeDefList = [:]
  [ 30] pushint8 1 .............................. <1>
  [ 32] pusharglistnoret 1 ...................... <1>
  [ 34] extcall 25 .............................. return 1
  [ 36] ret
end

on deconstruct me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 757 ............................. pTaskQueue = [:]
  [  6] pusharglist 0 ........................... <[:]>
  [  8] pushproplist ............................ <[:]>
  [  9] setprop 758 ............................. pActiveTasks = [:]
  [ 12] pusharglist 0 ........................... <[]>
  [ 14] pushlist ................................ <[]>
  [ 15] setprop 759 ............................. pReceivedTasks = []
  [ 18] pusharglist 0 ........................... <[]>
  [ 20] pushlist ................................ <[]>
  [ 21] setprop 760 ............................. pCompleteTasks = []
  [ 24] pushint8 1 .............................. <1>
  [ 26] pusharglistnoret 1 ...................... <1>
  [ 28] extcall 25 .............................. return 1
  [ 30] ret
end

on create me, tURL, tMemName, ttype, tForceFlag
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <tURL>
  [  4] getparam 2 .............................. <tMemName>
  [  6] getparam 3 .............................. <ttype>
  [  8] getparam 4 .............................. <tForceFlag>
  [ 10] pusharglist 5 ........................... <me, tURL, tMemName, ttype, tForceFlag>
  [ 12] localcall 5 ............................. <queue(me, tURL, tMemName, ttype, tForceFlag)>
  [ 14] pusharglistnoret 1 ...................... <queue(me, tURL, tMemName, ttype, tForceFlag)>
  [ 16] extcall 25 .............................. return queue(me, tURL, tMemName, ttype, tForceFlag)
  [ 18] ret
end

on Remove me, tMemNameOrNum
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <tMemNameOrNum>
  [  4] pusharglist 2 ........................... <me, tMemNameOrNum>
  [  6] objcall 210 ............................. <me.abort(tMemNameOrNum)>
  [  8] pusharglistnoret 1 ...................... <me.abort(tMemNameOrNum)>
  [ 10] extcall 25 .............................. return me.abort(tMemNameOrNum)
  [ 12] ret
end

on exists me, tMemName
  [  0] getprop 757 ............................. <pTaskQueue>
  [  3] getparam 1 .............................. <tMemName>
  [  5] pusharglist 2 ........................... <pTaskQueue, tMemName>
  [  7] objcall 54 .............................. <pTaskQueue[tMemName]>
  [  9] pusharglist 1 ........................... <pTaskQueue[tMemName]>
  [ 11] extcall 20 .............................. <voidp(pTaskQueue[tMemName])>
  [ 13] not ..................................... <not voidp(pTaskQueue[tMemName])>
  [ 14] getprop 758 ............................. <pActiveTasks>
  [ 17] getparam 1 .............................. <tMemName>
  [ 19] pusharglist 2 ........................... <pActiveTasks, tMemName>
  [ 21] objcall 54 .............................. <pActiveTasks[tMemName]>
  [ 23] pusharglist 1 ........................... <pActiveTasks[tMemName]>
  [ 25] extcall 20 .............................. <voidp(pActiveTasks[tMemName])>
  [ 27] not ..................................... <not voidp(pActiveTasks[tMemName])>
  [ 28] or ...................................... <not voidp(pTaskQueue[tMemName]) or not voidp(pActiveTasks[tMemName])>
  [ 29] pusharglistnoret 1 ...................... <not voidp(pTaskQueue[tMemName]) or not voidp(pActiveTasks[tMemName])>
  [ 31] extcall 25 .............................. return not voidp(pTaskQueue[tMemName]) or not voidp(pActiveTasks[tMemName])
  [ 33] ret
end

on queue me, tURL, tMemName, ttype, tForceFlag
  [  0] getparam 1 .............................. <tURL>
  [  2] pushsymb 593 ............................ <#string>
  [  5] pusharglist 2 ........................... <tURL, #string>
  [  7] extcall 488 ............................. <ilk(tURL, #string)>
  [ 10] not ..................................... <not ilk(tURL, #string)>
  [ 11] jmpifz [ 31] ............................ if not ilk(tURL, #string) then
  [ 14] getparam 0 .............................. <me>
  [ 16] pushcons 0 .............................. <"Missing or invalid URL:">
  [ 18] getparam 1 .............................. <tURL>
  [ 20] joinpadstr .............................. <"Missing or invalid URL:" && tURL>
  [ 21] pushsymb 207 ............................ <#queue>
  [ 23] pusharglist 3 ........................... <me, "Missing or invalid URL:" && tURL, #queue>
  [ 25] extcall 39 .............................. <error(me, "Missing or invalid URL:" && tURL, #queue)>
  [ 27] pusharglistnoret 1 ...................... <error(me, "Missing or invalid URL:" && tURL, #queue)>
  [ 29] extcall 25 .............................. return error(me, "Missing or invalid URL:" && tURL, #queue)
  [ 31] getparam 2 .............................. <tMemName>
  [ 33] pushsymb 593 ............................ <#string>
  [ 36] pusharglist 2 ........................... <tMemName, #string>
  [ 38] extcall 488 ............................. <ilk(tMemName, #string)>
  [ 41] not ..................................... <not ilk(tMemName, #string)>
  [ 42] jmpifz [ 49] ............................ if not ilk(tMemName, #string) then
  [ 45] getparam 1 .............................. <tURL>
  [ 47] setparam 2 .............................. tMemName = tURL
  [ 49] getparam 3 .............................. <ttype>
  [ 51] pushsymb 570 ............................ <#symbol>
  [ 54] pusharglist 2 ........................... <ttype, #symbol>
  [ 56] extcall 488 ............................. <ilk(ttype, #symbol)>
  [ 59] not ..................................... <not ilk(ttype, #symbol)>
  [ 60] jmpifz [ 74] ............................ if not ilk(ttype, #symbol) then
  [ 63] getparam 0 .............................. <me>
  [ 65] getparam 1 .............................. <tURL>
  [ 67] pusharglist 2 ........................... <me, tURL>
  [ 69] objcall 755 ............................. <me.recognizeMemberType(tURL)>
  [ 72] setparam 3 .............................. ttype = me.recognizeMemberType(tURL)
  [ 74] getprop 757 ............................. <pTaskQueue>
  [ 77] getparam 2 .............................. <tMemName>
  [ 79] pusharglist 2 ........................... <pTaskQueue, tMemName>
  [ 81] objcall 54 .............................. <pTaskQueue[tMemName]>
  [ 83] pusharglist 1 ........................... <pTaskQueue[tMemName]>
  [ 85] extcall 20 .............................. <voidp(pTaskQueue[tMemName])>
  [ 87] not ..................................... <not voidp(pTaskQueue[tMemName])>
  [ 88] getprop 758 ............................. <pActiveTasks>
  [ 91] getparam 2 .............................. <tMemName>
  [ 93] pusharglist 2 ........................... <pActiveTasks, tMemName>
  [ 95] objcall 54 .............................. <pActiveTasks[tMemName]>
  [ 97] pusharglist 1 ........................... <pActiveTasks[tMemName]>
  [ 99] extcall 20 .............................. <voidp(pActiveTasks[tMemName])>
  [101] not ..................................... <not voidp(pActiveTasks[tMemName])>
  [102] or ...................................... <not voidp(pTaskQueue[tMemName]) or not voidp(pActiveTasks[tMemName])>
  [103] jmpifz [123] ............................ if not voidp(pTaskQueue[tMemName]) or not voidp(pActiveTasks[tMemName]) then
  [106] getparam 0 .............................. <me>
  [108] pushcons 1 .............................. <"File already downloading:">
  [110] getparam 2 .............................. <tMemName>
  [112] joinpadstr .............................. <"File already downloading:" && tMemName>
  [113] pushsymb 207 ............................ <#queue>
  [115] pusharglist 3 ........................... <me, "File already downloading:" && tMemName, #queue>
  [117] extcall 39 .............................. <error(me, "File already downloading:" && tMemName, #queue)>
  [119] pusharglistnoret 1 ...................... <error(me, "File already downloading:" && tMemName, #queue)>
  [121] extcall 25 .............................. return error(me, "File already downloading:" && tMemName, #queue)
  [123] getparam 2 .............................. <tMemName>
  [125] pusharglist 1 ........................... <tMemName>
  [127] extcall 170 ............................. <memberExists(tMemName)>
  [129] jmpifz [161] ............................ if memberExists(tMemName) then / else
  [132] getparam 4 .............................. <tForceFlag>
  [134] jmpifz [148] ............................ if tForceFlag then / else
  [137] getparam 2 .............................. <tMemName>
  [139] pusharglist 1 ........................... <tMemName>
  [141] extcall 52 .............................. <getmemnum(tMemName)>
  [143] setlocal 0 .............................. tMemNum = getmemnum(tMemName)
  [145] jmp [158]
  [148] getparam 2 .............................. <tMemName>
  [150] pusharglist 1 ........................... <tMemName>
  [152] extcall 52 .............................. <getmemnum(tMemName)>
  [154] pusharglistnoret 1 ...................... <getmemnum(tMemName)>
  [156] extcall 25 .............................. return getmemnum(tMemName)
  [158] jmp [171]
  [161] getparam 2 .............................. <tMemName>
  [163] getparam 3 .............................. <ttype>
  [165] pusharglist 2 ........................... <tMemName, ttype>
  [167] extcall 164 ............................. <createMember(tMemName, ttype)>
  [169] setlocal 0 .............................. tMemNum = createMember(tMemName, ttype)
  [171] getlocal 0 .............................. <tMemNum>
  [173] pushint8 1 .............................. <1>
  [175] lt ...................................... <tMemNum < 1>
  [176] jmpifz [196] ............................ if tMemNum < 1 then / else
  [179] getparam 0 .............................. <me>
  [181] pushcons 2 .............................. <"Failed to create member!">
  [183] pushsymb 207 ............................ <#queue>
  [185] pusharglist 3 ........................... <me, "Failed to create member!", #queue>
  [187] extcall 39 .............................. <error(me, "Failed to create member!", #queue)>
  [189] pusharglistnoret 1 ...................... <error(me, "Failed to create member!", #queue)>
  [191] extcall 25 .............................. return error(me, "Failed to create member!", #queue)
  [193] jmp [232]
  [196] getlocal 0 .............................. <tMemNum>
  [198] pusharglist 1 ........................... <tMemNum>
  [200] extcall 41 .............................. <member(tMemNum)>
  [202] getobjprop 454 .......................... <member(tMemNum).type>
  [205] pushsymb 722 ............................ <#bitmap>
  [208] eq ...................................... <member(tMemNum).type = #bitmap>
  [209] jmpifz [232] ............................ if member(tMemNum).type = #bitmap then
  [212] getlocal 0 .............................. <tMemNum>
  [214] pusharglist 1 ........................... <tMemNum>
  [216] extcall 41 .............................. <member(tMemNum)>
  [218] pushint8 1 .............................. <1>
  [220] pushint8 1 .............................. <1>
  [222] pushint8 8 .............................. <8>
  [224] pusharglist 3 ........................... <1, 1, 8>
  [226] extcall 500 ............................. <image(1, 1, 8)>
  [229] setobjprop 500 .......................... member(tMemNum).image = image(1, 1, 8)
  [232] getprop 759 ............................. <pReceivedTasks>
  [235] getparam 2 .............................. <tMemName>
  [237] pusharglistnoret 2 ...................... <pReceivedTasks, tMemName>
  [239] objcall 122 ............................. pReceivedTasks.add(tMemName)
  [241] getprop 757 ............................. <pTaskQueue>
  [244] getparam 2 .............................. <tMemName>
  [246] pushsymb 762 ............................ <#url>
  [249] getparam 1 .............................. <tURL>
  [251] pushsymb 763 ............................ <#memNum>
  [254] getlocal 0 .............................. <tMemNum>
  [256] pushsymb 454 ............................ <#type>
  [259] getparam 3 .............................. <ttype>
  [261] pushsymb 764 ............................ <#callback>
  [264] pusharglist 0 ........................... <>
  [266] extcall 32 .............................. <VOID>
  [268] pusharglist 8 ........................... <[#url: tURL, #memNum: tMemNum, #type: ttype, #callback: VOID]>
  [270] pushproplist ............................ <[#url: tURL, #memNum: tMemNum, #type: ttype, #callback: VOID]>
  [271] pusharglistnoret 3 ...................... <pTaskQueue, tMemName, [#url: tURL, #memNum: tMemNum, #type: ttype, #callback: VOID]>
  [273] objcall 24 .............................. pTaskQueue[tMemName] = [#url: tURL, #memNum: tMemNum, #type: ttype, #callback: VOID]
  [275] getparam 0 .............................. <me>
  [277] pusharglistnoret 1 ...................... <me>
  [279] objcall 752 ............................. me.updateQueue()
  [282] getlocal 0 .............................. <tMemNum>
  [284] pusharglistnoret 1 ...................... <tMemNum>
  [286] extcall 25 .............................. return tMemNum
  [288] ret
end

on registerCallback me, tMemNameOrNum, tMethod, tClientID, tArgument
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <tMemNameOrNum>
  [  4] pusharglist 2 ........................... <me, tMemNameOrNum>
  [  6] objcall 751 ............................. <me.searchTask(tMemNameOrNum)>
  [  9] setlocal 0 .............................. tTaskData = me.searchTask(tMemNameOrNum)
  [ 11] getlocal 0 .............................. <tTaskData>
  [ 13] not ..................................... <not tTaskData>
  [ 14] jmpifz [131] ............................ if not tTaskData then
  [ 17] getparam 1 .............................. <tMemNameOrNum>
  [ 19] pusharglist 1 ........................... <tMemNameOrNum>
  [ 21] extcall 38 .............................. <stringp(tMemNameOrNum)>
  [ 23] jmpifz [ 57] ............................ if stringp(tMemNameOrNum) then / else
  [ 26] getparam 1 .............................. <tMemNameOrNum>
  [ 28] pusharglist 1 ........................... <tMemNameOrNum>
  [ 30] extcall 52 .............................. <getmemnum(tMemNameOrNum)>
  [ 32] pushzero ................................ <0>
  [ 33] eq ...................................... <getmemnum(tMemNameOrNum) = 0>
  [ 34] jmpifz [ 54] ............................ if getmemnum(tMemNameOrNum) = 0 then
  [ 37] getparam 0 .............................. <me>
  [ 39] pushcons 3 .............................. <"Task doesn't exist:">
  [ 41] getparam 1 .............................. <tMemNameOrNum>
  [ 43] joinpadstr .............................. <"Task doesn't exist:" && tMemNameOrNum>
  [ 44] pushsymb 190 ............................ <#registerCallback>
  [ 46] pusharglist 3 ........................... <me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback>
  [ 48] extcall 39 .............................. <error(me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback)>
  [ 50] pusharglistnoret 1 ...................... <error(me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback)>
  [ 52] extcall 25 .............................. return error(me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback)
  [ 54] jmp [120]
  [ 57] getparam 1 .............................. <tMemNameOrNum>
  [ 59] pusharglist 1 ........................... <tMemNameOrNum>
  [ 61] extcall 681 ............................. <integerp(tMemNameOrNum)>
  [ 64] jmpifz [103] ............................ if integerp(tMemNameOrNum) then / else
  [ 67] getparam 1 .............................. <tMemNameOrNum>
  [ 69] pusharglist 1 ........................... <tMemNameOrNum>
  [ 71] extcall 41 .............................. <member(tMemNameOrNum)>
  [ 73] getobjprop 454 .......................... <member(tMemNameOrNum).type>
  [ 76] pushsymb 748 ............................ <#empty>
  [ 79] eq ...................................... <member(tMemNameOrNum).type = #empty>
  [ 80] jmpifz [100] ............................ if member(tMemNameOrNum).type = #empty then
  [ 83] getparam 0 .............................. <me>
  [ 85] pushcons 3 .............................. <"Task doesn't exist:">
  [ 87] getparam 1 .............................. <tMemNameOrNum>
  [ 89] joinpadstr .............................. <"Task doesn't exist:" && tMemNameOrNum>
  [ 90] pushsymb 190 ............................ <#registerCallback>
  [ 92] pusharglist 3 ........................... <me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback>
  [ 94] extcall 39 .............................. <error(me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback)>
  [ 96] pusharglistnoret 1 ...................... <error(me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback)>
  [ 98] extcall 25 .............................. return error(me, "Task doesn't exist:" && tMemNameOrNum, #registerCallback)
  [100] jmp [120]
  [103] getparam 0 .............................. <me>
  [105] pushcons 4 .............................. <"Member's name or number expected:">
  [107] getparam 1 .............................. <tMemNameOrNum>
  [109] joinpadstr .............................. <"Member's name or number expected:" && tMemNameOrNum>
  [110] pushsymb 190 ............................ <#registerCallback>
  [112] pusharglist 3 ........................... <me, "Member's name or number expected:" && tMemNameOrNum, #registerCallback>
  [114] extcall 39 .............................. <error(me, "Member's name or number expected:" && tMemNameOrNum, #registerCallback)>
  [116] pusharglistnoret 1 ...................... <error(me, "Member's name or number expected:" && tMemNameOrNum, #registerCallback)>
  [118] extcall 25 .............................. return error(me, "Member's name or number expected:" && tMemNameOrNum, #registerCallback)
  [120] pushsymb 765 ............................ <#status>
  [123] pushsymb 766 ............................ <#complete>
  [126] pusharglist 2 ........................... <[#status: #complete]>
  [128] pushproplist ............................ <[#status: #complete]>
  [129] setlocal 0 .............................. tTaskData = [#status: #complete]
  [131] getparam 2 .............................. <tMethod>
  [133] pusharglist 1 ........................... <tMethod>
  [135] extcall 46 .............................. <symbolp(tMethod)>
  [137] not ..................................... <not symbolp(tMethod)>
  [138] jmpifz [158] ............................ if not symbolp(tMethod) then
  [141] getparam 0 .............................. <me>
  [143] pushcons 5 .............................. <"Symbol referring to a handler expected:">
  [145] getparam 2 .............................. <tMethod>
  [147] joinpadstr .............................. <"Symbol referring to a handler expected:" && tMethod>
  [148] pushsymb 190 ............................ <#registerCallback>
  [150] pusharglist 3 ........................... <me, "Symbol referring to a handler expected:" && tMethod, #registerCallback>
  [152] extcall 39 .............................. <error(me, "Symbol referring to a handler expected:" && tMethod, #registerCallback)>
  [154] pusharglistnoret 1 ...................... <error(me, "Symbol referring to a handler expected:" && tMethod, #registerCallback)>
  [156] extcall 25 .............................. return error(me, "Symbol referring to a handler expected:" && tMethod, #registerCallback)
  [158] getparam 3 .............................. <tClientID>
  [160] pusharglist 1 ........................... <tClientID>
  [162] extcall 67 .............................. <objectExists(tClientID)>
  [164] not ..................................... <not objectExists(tClientID)>
  [165] jmpifz [185] ............................ if not objectExists(tClientID) then
  [168] getparam 0 .............................. <me>
  [170] pushcons 6 .............................. <"Object not found:">
  [172] getparam 3 .............................. <tClientID>
  [174] joinpadstr .............................. <"Object not found:" && tClientID>
  [175] pushsymb 190 ............................ <#registerCallback>
  [177] pusharglist 3 ........................... <me, "Object not found:" && tClientID, #registerCallback>
  [179] extcall 39 .............................. <error(me, "Object not found:" && tClientID, #registerCallback)>
  [181] pusharglistnoret 1 ...................... <error(me, "Object not found:" && tClientID, #registerCallback)>
  [183] extcall 25 .............................. return error(me, "Object not found:" && tClientID, #registerCallback)
  [185] getparam 3 .............................. <tClientID>
  [187] pusharglist 1 ........................... <tClientID>
  [189] extcall 58 .............................. <getObject(tClientID)>
  [191] getparam 2 .............................. <tMethod>
  [193] pusharglist 2 ........................... <getObject(tClientID), tMethod>
  [195] objcall 660 ............................. <getObject(tClientID).handler(tMethod)>
  [198] not ..................................... <not getObject(tClientID).handler(tMethod)>
  [199] jmpifz [221] ............................ if not getObject(tClientID).handler(tMethod) then
  [202] getparam 0 .............................. <me>
  [204] pushcons 7 .............................. <"Handler not found in object:">
  [206] getparam 2 .............................. <tMethod>
  [208] joinpadstr .............................. <"Handler not found in object:" && tMethod>
  [209] getparam 3 .............................. <tClientID>
  [211] pushsymb 190 ............................ <#registerCallback>
  [213] pusharglist 4 ........................... <me, "Handler not found in object:" && tMethod, tClientID, #registerCallback>
  [215] extcall 39 .............................. <error(me, "Handler not found in object:" && tMethod, tClientID, #registerCallback)>
  [217] pusharglistnoret 1 ...................... <error(me, "Handler not found in object:" && tMethod, tClientID, #registerCallback)>
  [219] extcall 25 .............................. return error(me, "Handler not found in object:" && tMethod, tClientID, #registerCallback)
  [221] getlocal 0 .............................. <tTaskData>
  [223] pushsymb 765 ............................ <#status>
  [226] pusharglist 2 ........................... <tTaskData, #status>
  [228] objcall 54 .............................. <tTaskData[#status]>
  [230] peek 0 .................................. case tTaskData[#status] of
  [232] pushsymb 766 ............................ <#complete>
  [235] eq
  [236] jmpifz [256] ............................ (case) #complete:
  [239] getparam 2 .............................. <tMethod>
  [241] getparam 3 .............................. <tClientID>
  [243] pusharglist 1 ........................... <tClientID>
  [245] extcall 58 .............................. <getObject(tClientID)>
  [247] getparam 4 .............................. <tArgument>
  [249] pusharglistnoret 3 ...................... <tMethod, getObject(tClientID), tArgument>
  [251] extcall 68 .............................. call(tMethod, getObject(tClientID), tArgument)
  [253] jmp [354]
  [256] peek 0
  [258] pushsymb 207 ............................ <#queue>
  [260] eq
  [261] jmpifz [308] ............................ (case) #queue:
  [264] getprop 757 ............................. <pTaskQueue>
  [267] getlocal 0 .............................. <tTaskData>
  [269] pushsymb 725 ............................ <#name>
  [272] pusharglist 2 ........................... <tTaskData, #name>
  [274] objcall 54 .............................. <tTaskData[#name]>
  [276] pusharglist 2 ........................... <pTaskQueue, tTaskData[#name]>
  [278] objcall 54 .............................. <pTaskQueue[tTaskData[#name]]>
  [280] pushsymb 764 ............................ <#callback>
  [283] pushsymb 767 ............................ <#method>
  [286] getparam 2 .............................. <tMethod>
  [288] pushsymb 768 ............................ <#client>
  [291] getparam 3 .............................. <tClientID>
  [293] pushsymb 769 ............................ <#argument>
  [296] getparam 4 .............................. <tArgument>
  [298] pusharglist 6 ........................... <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [300] pushproplist ............................ <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [301] pusharglistnoret 3 ...................... <pTaskQueue[tTaskData[#name]], #callback, [#method: tMethod, #client: tClientID, #argument: tArgument]>
  [303] objcall 24 .............................. pTaskQueue[tTaskData[#name]][#callback] = [#method: tMethod, #client: tClientID, #argument: tArgument]
  [305] jmp [354]
  [308] peek 0
  [310] pushsymb 770 ............................ <#Active>
  [313] eq
  [314] jmpifz [354] ............................ (case) #Active:
  [317] pushsymb 771 ............................ <#addCallBack>
  [320] getprop 758 ............................. <pActiveTasks>
  [323] getlocal 0 .............................. <tTaskData>
  [325] pushsymb 725 ............................ <#name>
  [328] pusharglist 2 ........................... <tTaskData, #name>
  [330] objcall 54 .............................. <tTaskData[#name]>
  [332] pushsymb 767 ............................ <#method>
  [335] getparam 2 .............................. <tMethod>
  [337] pushsymb 768 ............................ <#client>
  [340] getparam 3 .............................. <tClientID>
  [342] pushsymb 769 ............................ <#argument>
  [345] getparam 4 .............................. <tArgument>
  [347] pusharglist 6 ........................... <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [349] pushproplist ............................ <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [350] pusharglistnoret 4 ...................... <#addCallBack, pActiveTasks, tTaskData[#name], [#method: tMethod, #client: tClientID, #argument: tArgument]>
  [352] extcall 68 .............................. call(#addCallBack, pActiveTasks, tTaskData[#name], [#method: tMethod, #client: tClientID, #argument: tArgument])
  [354] pop 1 ................................... end case
  [356] pushint8 1 .............................. <1>
  [358] pusharglistnoret 1 ...................... <1>
  [360] extcall 25 .............................. return 1
  [362] ret
end

on getLoadPercent me, tMemNameOrNum
  [  0] getparam 1 .............................. <tMemNameOrNum>
  [  2] pusharglist 1 ........................... <tMemNameOrNum>
  [  4] extcall 681 ............................. <integerp(tMemNameOrNum)>
  [  7] jmpifz [ 24] ............................ if integerp(tMemNameOrNum) then / else
  [ 10] getparam 1 .............................. <tMemNameOrNum>
  [ 12] pusharglist 1 ........................... <tMemNameOrNum>
  [ 14] extcall 41 .............................. <member(tMemNameOrNum)>
  [ 16] getobjprop 725 .......................... <member(tMemNameOrNum).name>
  [ 19] setlocal 0 .............................. tMemName = member(tMemNameOrNum).name
  [ 21] jmp [ 57]
  [ 24] getparam 1 .............................. <tMemNameOrNum>
  [ 26] pusharglist 1 ........................... <tMemNameOrNum>
  [ 28] extcall 38 .............................. <stringp(tMemNameOrNum)>
  [ 30] jmpifz [ 40] ............................ if stringp(tMemNameOrNum) then / else
  [ 33] getparam 1 .............................. <tMemNameOrNum>
  [ 35] setlocal 0 .............................. tMemName = tMemNameOrNum
  [ 37] jmp [ 57]
  [ 40] getparam 0 .............................. <me>
  [ 42] pushcons 4 .............................. <"Member's name or number expected:">
  [ 44] getparam 1 .............................. <tMemNameOrNum>
  [ 46] joinpadstr .............................. <"Member's name or number expected:" && tMemNameOrNum>
  [ 47] pushsymb 195 ............................ <#getLoadPercent>
  [ 49] pusharglist 3 ........................... <me, "Member's name or number expected:" && tMemNameOrNum, #getLoadPercent>
  [ 51] extcall 39 .............................. <error(me, "Member's name or number expected:" && tMemNameOrNum, #getLoadPercent)>
  [ 53] pusharglistnoret 1 ...................... <error(me, "Member's name or number expected:" && tMemNameOrNum, #getLoadPercent)>
  [ 55] extcall 25 .............................. return error(me, "Member's name or number expected:" && tMemNameOrNum, #getLoadPercent)
  [ 57] getprop 759 ............................. <pReceivedTasks>
  [ 60] getlocal 0 .............................. <tMemName>
  [ 62] pusharglist 2 ........................... <pReceivedTasks, tMemName>
  [ 64] objcall 641 ............................. <pReceivedTasks.getOne(tMemName)>
  [ 67] pushzero ................................ <0>
  [ 68] eq ...................................... <pReceivedTasks.getOne(tMemName) = 0>
  [ 69] jmpifz [ 89] ............................ if pReceivedTasks.getOne(tMemName) = 0 then
  [ 72] getparam 0 .............................. <me>
  [ 74] pushcons 8 .............................. <"Downloaded file not found:">
  [ 76] getlocal 0 .............................. <tMemName>
  [ 78] joinpadstr .............................. <"Downloaded file not found:" && tMemName>
  [ 79] pushsymb 195 ............................ <#getLoadPercent>
  [ 81] pusharglist 3 ........................... <me, "Downloaded file not found:" && tMemName, #getLoadPercent>
  [ 83] extcall 39 .............................. <error(me, "Downloaded file not found:" && tMemName, #getLoadPercent)>
  [ 85] pusharglistnoret 1 ...................... <error(me, "Downloaded file not found:" && tMemName, #getLoadPercent)>
  [ 87] extcall 25 .............................. return error(me, "Downloaded file not found:" && tMemName, #getLoadPercent)
  [ 89] getprop 758 ............................. <pActiveTasks>
  [ 92] getlocal 0 .............................. <tMemName>
  [ 94] pusharglist 2 ........................... <pActiveTasks, tMemName>
  [ 96] objcall 54 .............................. <pActiveTasks[tMemName]>
  [ 98] pusharglist 1 ........................... <pActiveTasks[tMemName]>
  [100] extcall 20 .............................. <voidp(pActiveTasks[tMemName])>
  [102] not ..................................... <not voidp(pActiveTasks[tMemName])>
  [103] jmpifz [130] ............................ if not voidp(pActiveTasks[tMemName]) then / else
  [106] getprop 758 ............................. <pActiveTasks>
  [109] getlocal 0 .............................. <tMemName>
  [111] pusharglist 2 ........................... <pActiveTasks, tMemName>
  [113] objcall 54 .............................. <pActiveTasks[tMemName]>
  [115] pushsymb 773 ............................ <#Percent>
  [118] pusharglist 2 ........................... <pActiveTasks[tMemName], #Percent>
  [120] objcall 442 ............................. <pActiveTasks[tMemName].getProperty(#Percent)>
  [123] pusharglistnoret 1 ...................... <pActiveTasks[tMemName].getProperty(#Percent)>
  [125] extcall 25 .............................. return pActiveTasks[tMemName].getProperty(#Percent)
  [127] jmp [181]
  [130] getprop 757 ............................. <pTaskQueue>
  [133] getlocal 0 .............................. <tMemName>
  [135] pusharglist 2 ........................... <pTaskQueue, tMemName>
  [137] objcall 54 .............................. <pTaskQueue[tMemName]>
  [139] pusharglist 1 ........................... <pTaskQueue[tMemName]>
  [141] extcall 20 .............................. <voidp(pTaskQueue[tMemName])>
  [143] not ..................................... <not voidp(pTaskQueue[tMemName])>
  [144] jmpifz [159] ............................ if not voidp(pTaskQueue[tMemName]) then / else
  [147] pushfloat32 0.0 ......................... <0.0>
  [152] pusharglistnoret 1 ...................... <0.0>
  [154] extcall 25 .............................. return 0.0
  [156] jmp [181]
  [159] getprop 760 ............................. <pCompleteTasks>
  [162] getlocal 0 .............................. <tMemName>
  [164] pusharglist 2 ........................... <pCompleteTasks, tMemName>
  [166] objcall 641 ............................. <pCompleteTasks.getOne(tMemName)>
  [169] jmpifz [181] ............................ if pCompleteTasks.getOne(tMemName) then
  [172] pushfloat32 1.0 ......................... <1.0>
  [177] pusharglistnoret 1 ...................... <1.0>
  [179] extcall 25 .............................. return 1.0
  [181] pushfloat32 1.0 ......................... <1.0>
  [186] pusharglistnoret 1 ...................... <1.0>
  [188] extcall 25 .............................. return 1.0
  [190] ret
end

on getProperty me, tPropID
  [  0] getparam 1 .............................. <tPropID>
  [  2] peek 0 .................................. case tPropID of
  [  4] pushsymb 774 ............................ <#curTaskCount>
  [  7] eq
  [  8] jmpifz [ 31] ............................ (case) #curTaskCount:
  [ 11] pop 1
  [ 13] getprop 757 ............................. <pTaskQueue>
  [ 16] getobjprop 22 ........................... <pTaskQueue.count>
  [ 18] getprop 758 ............................. <pActiveTasks>
  [ 21] getobjprop 22 ........................... <pActiveTasks.count>
  [ 23] add ..................................... <pTaskQueue.count + pActiveTasks.count>
  [ 24] pusharglistnoret 1 ...................... <pTaskQueue.count + pActiveTasks.count>
  [ 26] extcall 25 .............................. return pTaskQueue.count + pActiveTasks.count
  [ 28] jmp [108]
  [ 31] peek 0
  [ 33] pushsymb 775 ............................ <#actTaskCount>
  [ 36] eq
  [ 37] jmpifz [ 54] ............................ (case) #actTaskCount:
  [ 40] pop 1
  [ 42] getprop 758 ............................. <pActiveTasks>
  [ 45] getobjprop 22 ........................... <pActiveTasks.count>
  [ 47] pusharglistnoret 1 ...................... <pActiveTasks.count>
  [ 49] extcall 25 .............................. return pActiveTasks.count
  [ 51] jmp [108]
  [ 54] peek 0
  [ 56] pushsymb 776 ............................ <#maxTaskCount>
  [ 59] eq
  [ 60] jmpifz [ 79] ............................ (case) #maxTaskCount:
  [ 63] pop 1
  [ 65] pushcons 9 .............................. <"net.operation.count">
  [ 67] pusharglist 1 ........................... <"net.operation.count">
  [ 69] extcall 373 ............................. <getIntVariable("net.operation.count")>
  [ 72] pusharglistnoret 1 ...................... <getIntVariable("net.operation.count")>
  [ 74] extcall 25 .............................. return getIntVariable("net.operation.count")
  [ 76] jmp [108]
  [ 79] peek 0
  [ 81] pushsymb 777 ............................ <#defaultURL>
  [ 84] eq
  [ 85] jmpifz [101] ............................ (case) #defaultURL:
  [ 88] pop 1
  [ 90] pusharglist 0 ........................... <>
  [ 92] extcall 87 .............................. <getMoviePath()>
  [ 94] pusharglistnoret 1 ...................... <getMoviePath()>
  [ 96] extcall 25 .............................. return getMoviePath()
  [ 98] jmp [108] ............................... (case) otherwise:
  [101] pop 1
  [103] pushzero ................................ <0>
  [104] pusharglistnoret 1 ...................... <0>
  [106] extcall 25 .............................. return 0
  [108] pop 1 ................................... end case
  [110] ret
end

on setProperty me, tPropID, tValue
  [  0] getparam 1 .............................. <tPropID>
  [  2] jmp [ 12] ............................... case tPropID of / otherwise:
  [  5] pop 1
  [  7] pushzero ................................ <0>
  [  8] pusharglistnoret 1 ...................... <0>
  [ 10] extcall 25 .............................. return 0
  [ 12] pop 1 ................................... end case
  [ 14] ret
end

on solveNetErrorMsg me, tErrorCode
  [  0] getparam 1 .............................. <tErrorCode>
  [  2] peek 0 .................................. case tErrorCode of
  [  4] pushint8 4 .............................. <4>
  [  6] eq
  [  7] jmpifz [ 21] ............................ (case) 4:
  [ 10] pop 1
  [ 12] pushcons 10 ............................. <"Bad MOA class. The required network or nonnetwork Xtras are improperly installed or not installed at all.">
  [ 14] pusharglistnoret 1 ...................... <"Bad MOA class. The required network or nonnetwork Xtras are improperly installed or not installed at all.">
  [ 16] extcall 25 .............................. return "Bad MOA class. The required network or nonnetwork Xtras are improperly installed or not installed at all."
  [ 18] jmp [366]
  [ 21] peek 0
  [ 23] pushint8 5 .............................. <5>
  [ 25] eq
  [ 26] jmpifz [ 40] ............................ (case) 5:
  [ 29] pop 1
  [ 31] pushcons 11 ............................. <"Bad MOA Interface. The required network or nonnetwork Xtras are improperly installed or not installed at all.">
  [ 33] pusharglistnoret 1 ...................... <"Bad MOA Interface. The required network or nonnetwork Xtras are improperly installed or not installed at all.">
  [ 35] extcall 25 .............................. return "Bad MOA Interface. The required network or nonnetwork Xtras are improperly installed or not installed at all."
  [ 37] jmp [366]
  [ 40] peek 0
  [ 42] pushint8 6 .............................. <6>
  [ 44] eq
  [ 45] jmpifz [ 59] ............................ (case) 6:
  [ 48] pop 1
  [ 50] pushcons 12 ............................. <"Bad URL or Bad MOA class. The required network or nonnetwork Xtras are improperly installed or not installed at all.">
  [ 52] pusharglistnoret 1 ...................... <"Bad URL or Bad MOA class. The required network or nonnetwork Xtras are improperly installed or not installed at all.">
  [ 54] extcall 25 .............................. return "Bad URL or Bad MOA class. The required network or nonnetwork Xtras are improperly installed or not installed at all."
  [ 56] jmp [366]
  [ 59] peek 0
  [ 61] pushint8 20 ............................. <20>
  [ 63] eq
  [ 64] jmpifz [ 78] ............................ (case) 20:
  [ 67] pop 1
  [ 69] pushcons 13 ............................. <"Internal error. Returned by netError() in the Netscape browser if the browser detected a network or internal error.">
  [ 71] pusharglistnoret 1 ...................... <"Internal error. Returned by netError() in the Netscape browser if the browser detected a network or internal error.">
  [ 73] extcall 25 .............................. return "Internal error. Returned by netError() in the Netscape browser if the browser detected a network or internal error."
  [ 75] jmp [366]
  [ 78] peek 0
  [ 80] pushint16 4146 .......................... <4146>
  [ 83] eq
  [ 84] jmpifz [ 98] ............................ (case) 4146:
  [ 87] pop 1
  [ 89] pushcons 14 ............................. <"Connection could not be established with the remote host.">
  [ 91] pusharglistnoret 1 ...................... <"Connection could not be established with the remote host.">
  [ 93] extcall 25 .............................. return "Connection could not be established with the remote host."
  [ 95] jmp [366]
  [ 98] peek 0
  [100] pushint16 4149 .......................... <4149>
  [103] eq
  [104] jmpifz [118] ............................ (case) 4149:
  [107] pop 1
  [109] pushcons 15 ............................. <"Data supplied by the server was in an unexpected format.">
  [111] pusharglistnoret 1 ...................... <"Data supplied by the server was in an unexpected format.">
  [113] extcall 25 .............................. return "Data supplied by the server was in an unexpected format."
  [115] jmp [366]
  [118] peek 0
  [120] pushint16 4150 .......................... <4150>
  [123] eq
  [124] jmpifz [138] ............................ (case) 4150:
  [127] pop 1
  [129] pushcons 16 ............................. <"Unexpected early closing of connection.">
  [131] pusharglistnoret 1 ...................... <"Unexpected early closing of connection.">
  [133] extcall 25 .............................. return "Unexpected early closing of connection."
  [135] jmp [366]
  [138] peek 0
  [140] pushint16 4154 .......................... <4154>
  [143] eq
  [144] jmpifz [158] ............................ (case) 4154:
  [147] pop 1
  [149] pushcons 17 ............................. <"Operation could not be completed due to timeout.">
  [151] pusharglistnoret 1 ...................... <"Operation could not be completed due to timeout.">
  [153] extcall 25 .............................. return "Operation could not be completed due to timeout."
  [155] jmp [366]
  [158] peek 0
  [160] pushint16 4155 .......................... <4155>
  [163] eq
  [164] jmpifz [178] ............................ (case) 4155:
  [167] pop 1
  [169] pushcons 18 ............................. <"Not enough memory available to complete the transaction.">
  [171] pusharglistnoret 1 ...................... <"Not enough memory available to complete the transaction.">
  [173] extcall 25 .............................. return "Not enough memory available to complete the transaction."
  [175] jmp [366]
  [178] peek 0
  [180] pushint16 4156 .......................... <4156>
  [183] eq
  [184] jmpifz [198] ............................ (case) 4156:
  [187] pop 1
  [189] pushcons 19 ............................. <"Protocol reply to request indicates an error in the reply.">
  [191] pusharglistnoret 1 ...................... <"Protocol reply to request indicates an error in the reply.">
  [193] extcall 25 .............................. return "Protocol reply to request indicates an error in the reply."
  [195] jmp [366]
  [198] peek 0
  [200] pushint16 4157 .......................... <4157>
  [203] eq
  [204] jmpifz [218] ............................ (case) 4157:
  [207] pop 1
  [209] pushcons 20 ............................. <"Transaction failed to be authenticated.">
  [211] pusharglistnoret 1 ...................... <"Transaction failed to be authenticated.">
  [213] extcall 25 .............................. return "Transaction failed to be authenticated."
  [215] jmp [366]
  [218] peek 0
  [220] pushint16 4159 .......................... <4159>
  [223] eq
  [224] jmpifz [238] ............................ (case) 4159:
  [227] pop 1
  [229] pushcons 21 ............................. <"Invalid URL.">
  [231] pusharglistnoret 1 ...................... <"Invalid URL.">
  [233] extcall 25 .............................. return "Invalid URL."
  [235] jmp [366]
  [238] peek 0
  [240] pushint16 4164 .......................... <4164>
  [243] eq
  [244] jmpifz [258] ............................ (case) 4164:
  [247] pop 1
  [249] pushcons 22 ............................. <"Could not create a socket.">
  [251] pusharglistnoret 1 ...................... <"Could not create a socket.">
  [253] extcall 25 .............................. return "Could not create a socket."
  [255] jmp [366]
  [258] peek 0
  [260] pushint16 4165 .......................... <4165>
  [263] eq
  [264] jmpifz [278] ............................ (case) 4165:
  [267] pop 1
  [269] pushcons 23 ............................. <"Requested object could not be found (URL may be incorrect).">
  [271] pusharglistnoret 1 ...................... <"Requested object could not be found (URL may be incorrect).">
  [273] extcall 25 .............................. return "Requested object could not be found (URL may be incorrect)."
  [275] jmp [366]
  [278] peek 0
  [280] pushint16 4166 .......................... <4166>
  [283] eq
  [284] jmpifz [298] ............................ (case) 4166:
  [287] pop 1
  [289] pushcons 24 ............................. <"Generic proxy failure.">
  [291] pusharglistnoret 1 ...................... <"Generic proxy failure.">
  [293] extcall 25 .............................. return "Generic proxy failure."
  [295] jmp [366]
  [298] peek 0
  [300] pushint16 4167 .......................... <4167>
  [303] eq
  [304] jmpifz [318] ............................ (case) 4167:
  [307] pop 1
  [309] pushcons 25 ............................. <"Transfer was intentionally interrupted by client.">
  [311] pusharglistnoret 1 ...................... <"Transfer was intentionally interrupted by client.">
  [313] extcall 25 .............................. return "Transfer was intentionally interrupted by client."
  [315] jmp [366]
  [318] peek 0
  [320] pushint16 4242 .......................... <4242>
  [323] eq
  [324] jmpifz [338] ............................ (case) 4242:
  [327] pop 1
  [329] pushcons 26 ............................. <"Download stopped by netAbort(url).">
  [331] pusharglistnoret 1 ...................... <"Download stopped by netAbort(url).">
  [333] extcall 25 .............................. return "Download stopped by netAbort(url)."
  [335] jmp [366]
  [338] peek 0
  [340] pushint16 4836 .......................... <4836>
  [343] eq
  [344] jmpifz [358] ............................ (case) 4836:
  [347] pop 1
  [349] pushcons 27 ............................. <"Download stopped for an unknown reason, possibly a network error, or the download was abandoned.">
  [351] pusharglistnoret 1 ...................... <"Download stopped for an unknown reason, possibly a network error, or the download was abandoned.">
  [353] extcall 25 .............................. return "Download stopped for an unknown reason, possibly a network error, or the download was abandoned."
  [355] jmp [366] ............................... (case) otherwise:
  [358] pop 1
  [360] pushcons 28 ............................. <"Unknown error!">
  [362] pusharglistnoret 1 ...................... <"Unknown error!">
  [364] extcall 25 .............................. return "Unknown error!"
  [366] pop 1 ................................... end case
  [368] ret
end

on print me
  [  0] getprop 758 ............................. <pActiveTasks>
  [  3] getprop 757 ............................. <pTaskQueue>
  [  6] getprop 759 ............................. <pReceivedTasks>
  [  9] pusharglist 3 ........................... <[pActiveTasks, pTaskQueue, pReceivedTasks]>
  [ 11] pushlist ................................ <[pActiveTasks, pTaskQueue, pReceivedTasks]>
  [ 12] setlocal 0 .............................. tListList = [pActiveTasks, pTaskQueue, pReceivedTasks]
  [ 14] getlocal 0 .............................. <tListList>
  [ 16] peek 0
  [ 18] pusharglist 1
  [ 20] extcall 22
  [ 22] pushint8 1
  [ 24] peek 0
  [ 26] peek 2
  [ 28] lteq
  [ 29] jmpifz [140] ............................ repeat with tList in tListList
  [ 32] peek 2
  [ 34] peek 1
  [ 36] pusharglist 2
  [ 38] extcall 54
  [ 40] setlocal 1
  [ 42] getlocal 1 .............................. <tList>
  [ 44] pusharglist 1 ........................... <tList>
  [ 46] extcall 488 ............................. <ilk(tList)>
  [ 49] setlocal 2 .............................. tListMode = ilk(tList)
  [ 51] pushint8 1 .............................. <1>
  [ 53] setlocal 3
  [ 55] getlocal 3
  [ 57] getlocal 1 .............................. <tList>
  [ 59] getobjprop 22 ........................... <tList.count>
  [ 61] lteq
  [ 62] jmpifz [135] ............................ repeat with i = 1 to tList.count
  [ 65] getlocal 2 .............................. <tListMode>
  [ 67] pushsymb 489 ............................ <#list>
  [ 70] eq ...................................... <tListMode = #list>
  [ 71] jmpifz [ 81] ............................ if tListMode = #list then / else
  [ 74] getlocal 3 .............................. <i>
  [ 76] setlocal 4 .............................. tid = i
  [ 78] jmp [ 91]
  [ 81] getlocal 1 .............................. <tList>
  [ 83] getlocal 3 .............................. <i>
  [ 85] pusharglist 2 ........................... <tList, i>
  [ 87] objcall 23 .............................. <tList.getPropAt(i)>
  [ 89] setlocal 4 .............................. tid = tList.getPropAt(i)
  [ 91] getlocal 4 .............................. <tid>
  [ 93] pusharglist 1 ........................... <tid>
  [ 95] extcall 46 .............................. <symbolp(tid)>
  [ 97] jmpifz [107] ............................ if symbolp(tid) then
  [100] pushcons 29 ............................. <"#">
  [102] getlocal 4 .............................. <tid>
  [104] joinstr ................................. <"#" & tid>
  [105] setlocal 4 .............................. tid = "#" & tid
  [107] getlocal 4 .............................. <tid>
  [109] pushcons 30 ............................. <":">
  [111] joinpadstr .............................. <tid && ":">
  [112] getlocal 1 .............................. <tList>
  [114] getlocal 3 .............................. <i>
  [116] pusharglist 2 ........................... <tList, i>
  [118] objcall 54 .............................. <tList[i]>
  [120] joinpadstr .............................. <tid && ":" && tList[i]>
  [121] pusharglistnoret 1 ...................... <tid && ":" && tList[i]>
  [123] extcall 642 ............................. put tid && ":" && tList[i]
  [126] pushint8 1
  [128] getlocal 3
  [130] add
  [131] setlocal 3
  [133] endrepeat [ 55]
  [135] pushint8 1
  [137] add
  [138] endrepeat [ 24]
  [140] pop 3
  [142] pushint8 1 .............................. <1>
  [144] pusharglistnoret 1 ...................... <1>
  [146] extcall 25 .............................. return 1
  [148] ret
end

on update me
  [  0] pushsymb 672 ............................ <#update>
  [  3] getprop 758 ............................. <pActiveTasks>
  [  6] pusharglistnoret 2 ...................... <#update, pActiveTasks>
  [  8] extcall 68 .............................. call(#update, pActiveTasks)
  [ 10] ret
end

on searchTask me, tMemNameOrNum
  [  0] getparam 1 .............................. <tMemNameOrNum>
  [  2] pusharglist 1 ........................... <tMemNameOrNum>
  [  4] extcall 38 .............................. <stringp(tMemNameOrNum)>
  [  6] jmpifz [196] ............................ if stringp(tMemNameOrNum) then / else
  [  9] getprop 759 ............................. <pReceivedTasks>
  [ 12] getparam 1 .............................. <tMemNameOrNum>
  [ 14] pusharglist 2 ........................... <pReceivedTasks, tMemNameOrNum>
  [ 16] objcall 517 ............................. <pReceivedTasks.getPos(tMemNameOrNum)>
  [ 19] pushint8 1 .............................. <1>
  [ 21] lt ...................................... <pReceivedTasks.getPos(tMemNameOrNum) < 1>
  [ 22] jmpifz [ 30] ............................ if pReceivedTasks.getPos(tMemNameOrNum) < 1 then
  [ 25] pushzero ................................ <0>
  [ 26] pusharglistnoret 1 ...................... <0>
  [ 28] extcall 25 .............................. return 0
  [ 30] pushsymb 725 ............................ <#name>
  [ 33] getparam 1 .............................. <tMemNameOrNum>
  [ 35] pushsymb 658 ............................ <#number>
  [ 38] getparam 1 .............................. <tMemNameOrNum>
  [ 40] pusharglist 1 ........................... <tMemNameOrNum>
  [ 42] extcall 52 .............................. <getmemnum(tMemNameOrNum)>
  [ 44] pushsymb 765 ............................ <#status>
  [ 47] pusharglist 0 ........................... <>
  [ 49] extcall 32 .............................. <VOID>
  [ 51] pusharglist 6 ........................... <[#name: tMemNameOrNum, #number: getmemnum(tMemNameOrNum), #status: VOID]>
  [ 53] pushproplist ............................ <[#name: tMemNameOrNum, #number: getmemnum(tMemNameOrNum), #status: VOID]>
  [ 54] setlocal 0 .............................. tTaskData = [#name: tMemNameOrNum, #number: getmemnum(tMemNameOrNum), #status: VOID]
  [ 56] getprop 757 ............................. <pTaskQueue>
  [ 59] getparam 1 .............................. <tMemNameOrNum>
  [ 61] pusharglist 2 ........................... <pTaskQueue, tMemNameOrNum>
  [ 63] objcall 54 .............................. <pTaskQueue[tMemNameOrNum]>
  [ 65] setlocal 1 .............................. tResource = pTaskQueue[tMemNameOrNum]
  [ 67] getlocal 1 .............................. <tResource>
  [ 69] pusharglist 1 ........................... <tResource>
  [ 71] extcall 20 .............................. <voidp(tResource)>
  [ 73] not ..................................... <not voidp(tResource)>
  [ 74] jmpifz [ 88] ............................ if not voidp(tResource) then
  [ 77] getlocal 0 .............................. <tTaskData>
  [ 79] pushsymb 765 ............................ <#status>
  [ 82] pushsymb 207 ............................ <#queue>
  [ 84] pusharglistnoret 3 ...................... <tTaskData, #status, #queue>
  [ 86] objcall 24 .............................. tTaskData[#status] = #queue
  [ 88] getprop 758 ............................. <pActiveTasks>
  [ 91] getparam 1 .............................. <tMemNameOrNum>
  [ 93] pusharglist 2 ........................... <pActiveTasks, tMemNameOrNum>
  [ 95] objcall 54 .............................. <pActiveTasks[tMemNameOrNum]>
  [ 97] setlocal 1 .............................. tResource = pActiveTasks[tMemNameOrNum]
  [ 99] getlocal 1 .............................. <tResource>
  [101] pusharglist 1 ........................... <tResource>
  [103] extcall 20 .............................. <voidp(tResource)>
  [105] not ..................................... <not voidp(tResource)>
  [106] jmpifz [121] ............................ if not voidp(tResource) then
  [109] getlocal 0 .............................. <tTaskData>
  [111] pushsymb 765 ............................ <#status>
  [114] pushsymb 770 ............................ <#Active>
  [117] pusharglistnoret 3 ...................... <tTaskData, #status, #Active>
  [119] objcall 24 .............................. tTaskData[#status] = #Active
  [121] getprop 760 ............................. <pCompleteTasks>
  [124] getparam 1 .............................. <tMemNameOrNum>
  [126] pusharglist 2 ........................... <pCompleteTasks, tMemNameOrNum>
  [128] objcall 517 ............................. <pCompleteTasks.getPos(tMemNameOrNum)>
  [131] setlocal 1 .............................. tResource = pCompleteTasks.getPos(tMemNameOrNum)
  [133] getlocal 1 .............................. <tResource>
  [135] pushzero ................................ <0>
  [136] gt ...................................... <tResource > 0>
  [137] jmpifz [152] ............................ if tResource > 0 then
  [140] getlocal 0 .............................. <tTaskData>
  [142] pushsymb 765 ............................ <#status>
  [145] pushsymb 766 ............................ <#complete>
  [148] pusharglistnoret 3 ...................... <tTaskData, #status, #complete>
  [150] objcall 24 .............................. tTaskData[#status] = #complete
  [152] getlocal 0 .............................. <tTaskData>
  [154] pushsymb 765 ............................ <#status>
  [157] pusharglist 2 ........................... <tTaskData, #status>
  [159] objcall 54 .............................. <tTaskData[#status]>
  [161] pusharglist 0 ........................... <>
  [163] extcall 32 .............................. <VOID>
  [165] nteq .................................... <tTaskData[#status] <> VOID>
  [166] jmpifz [175] ............................ if tTaskData[#status] <> VOID then
  [169] getlocal 0 .............................. <tTaskData>
  [171] pusharglistnoret 1 ...................... <tTaskData>
  [173] extcall 25 .............................. return tTaskData
  [175] getparam 0 .............................. <me>
  [177] pushcons 31 ............................. <"Referred task not found:">
  [179] getparam 1 .............................. <tMemNameOrNum>
  [181] joinpadstr .............................. <"Referred task not found:" && tMemNameOrNum>
  [182] pushsymb 751 ............................ <#searchTask>
  [185] pusharglist 3 ........................... <me, "Referred task not found:" && tMemNameOrNum, #searchTask>
  [187] extcall 39 .............................. <error(me, "Referred task not found:" && tMemNameOrNum, #searchTask)>
  [189] pusharglistnoret 1 ...................... <error(me, "Referred task not found:" && tMemNameOrNum, #searchTask)>
  [191] extcall 25 .............................. return error(me, "Referred task not found:" && tMemNameOrNum, #searchTask)
  [193] jmp [225]
  [196] getparam 1 .............................. <tMemNameOrNum>
  [198] pusharglist 1 ........................... <tMemNameOrNum>
  [200] extcall 681 ............................. <integerp(tMemNameOrNum)>
  [203] jmpifz [225] ............................ if integerp(tMemNameOrNum) then
  [206] getparam 0 .............................. <me>
  [208] getparam 1 .............................. <tMemNameOrNum>
  [210] pusharglist 1 ........................... <tMemNameOrNum>
  [212] extcall 41 .............................. <member(tMemNameOrNum)>
  [214] getobjprop 725 .......................... <member(tMemNameOrNum).name>
  [217] pusharglist 2 ........................... <me, member(tMemNameOrNum).name>
  [219] localcall 13 ............................ <searchTask(me, member(tMemNameOrNum).name)>
  [221] pusharglistnoret 1 ...................... <searchTask(me, member(tMemNameOrNum).name)>
  [223] extcall 25 .............................. return searchTask(me, member(tMemNameOrNum).name)
  [225] getparam 0 .............................. <me>
  [227] pushcons 4 .............................. <"Member's name or number expected:">
  [229] getparam 1 .............................. <tMemNameOrNum>
  [231] joinpadstr .............................. <"Member's name or number expected:" && tMemNameOrNum>
  [232] pushsymb 751 ............................ <#searchTask>
  [235] pusharglist 3 ........................... <me, "Member's name or number expected:" && tMemNameOrNum, #searchTask>
  [237] extcall 39 .............................. <error(me, "Member's name or number expected:" && tMemNameOrNum, #searchTask)>
  [239] pusharglistnoret 1 ...................... <error(me, "Member's name or number expected:" && tMemNameOrNum, #searchTask)>
  [241] extcall 25 .............................. return error(me, "Member's name or number expected:" && tMemNameOrNum, #searchTask)
  [243] ret
end

on updateQueue me
  [  0] getprop 758 ............................. <pActiveTasks>
  [  3] getobjprop 22 ........................... <pActiveTasks.count>
  [  5] pushcons 9 .............................. <"net.operation.count">
  [  7] pusharglist 1 ........................... <"net.operation.count">
  [  9] extcall 373 ............................. <getIntVariable("net.operation.count")>
  [ 12] lt ...................................... <pActiveTasks.count < getIntVariable("net.operation.count")>
  [ 13] jmpifz [108] ............................ if pActiveTasks.count < getIntVariable("net.operation.count") then
  [ 16] getprop 757 ............................. <pTaskQueue>
  [ 19] getobjprop 22 ........................... <pTaskQueue.count>
  [ 21] pushzero ................................ <0>
  [ 22] gt ...................................... <pTaskQueue.count > 0>
  [ 23] jmpifz [108] ............................ if pTaskQueue.count > 0 then
  [ 26] getprop 757 ............................. <pTaskQueue>
  [ 29] pushint8 1 .............................. <1>
  [ 31] pusharglist 2 ........................... <pTaskQueue, 1>
  [ 33] objcall 23 .............................. <pTaskQueue.getPropAt(1)>
  [ 35] setlocal 0 .............................. tTaskName = pTaskQueue.getPropAt(1)
  [ 37] getprop 757 ............................. <pTaskQueue>
  [ 40] getlocal 0 .............................. <tTaskName>
  [ 42] pusharglist 2 ........................... <pTaskQueue, tTaskName>
  [ 44] objcall 54 .............................. <pTaskQueue[tTaskName]>
  [ 46] setlocal 1 .............................. tTaskData = pTaskQueue[tTaskName]
  [ 48] getprop 757 ............................. <pTaskQueue>
  [ 51] getlocal 0 .............................. <tTaskName>
  [ 53] pusharglistnoret 2 ...................... <pTaskQueue, tTaskName>
  [ 55] objcall 659 ............................. pTaskQueue.deleteProp(tTaskName)
  [ 58] getprop 758 ............................. <pActiveTasks>
  [ 61] getlocal 0 .............................. <tTaskName>
  [ 63] pushsymb 656 ............................ <#temp>
  [ 66] pushcons 32 ............................. <"download.instance.class">
  [ 68] pusharglist 1 ........................... <"download.instance.class">
  [ 70] extcall 155 ............................. <getClassVariable("download.instance.class")>
  [ 72] pusharglist 2 ........................... <#temp, getClassVariable("download.instance.class")>
  [ 74] extcall 94 .............................. <createObject(#temp, getClassVariable("download.instance.class"))>
  [ 76] pusharglistnoret 3 ...................... <pActiveTasks, tTaskName, createObject(#temp, getClassVariable("download.instance.class"))>
  [ 78] objcall 24 .............................. pActiveTasks[tTaskName] = createObject(#temp, getClassVariable("download.instance.class"))
  [ 80] getprop 758 ............................. <pActiveTasks>
  [ 83] getlocal 0 .............................. <tTaskName>
  [ 85] pusharglist 2 ........................... <pActiveTasks, tTaskName>
  [ 87] objcall 54 .............................. <pActiveTasks[tTaskName]>
  [ 89] getlocal 0 .............................. <tTaskName>
  [ 91] getlocal 1 .............................. <tTaskData>
  [ 93] pusharglistnoret 3 ...................... <pActiveTasks[tTaskName], tTaskName, tTaskData>
  [ 95] objcall 434 ............................. pActiveTasks[tTaskName].define(tTaskName, tTaskData)
  [ 98] getparam 0 .............................. <me>
  [100] pusharglist 1 ........................... <me>
  [102] objcall 3 ............................... <me.getID()>
  [104] pusharglistnoret 1 ...................... <me.getID()>
  [106] extcall 108 ............................. receiveUpdate(me.getID())
  [108] getprop 758 ............................. <pActiveTasks>
  [111] getobjprop 22 ........................... <pActiveTasks.count>
  [113] pushzero ................................ <0>
  [114] eq ...................................... <pActiveTasks.count = 0>
  [115] jmpifz [128] ............................ if pActiveTasks.count = 0 then
  [118] getparam 0 .............................. <me>
  [120] pusharglist 1 ........................... <me>
  [122] objcall 3 ............................... <me.getID()>
  [124] pusharglistnoret 1 ...................... <me.getID()>
  [126] extcall 109 ............................. removeUpdate(me.getID())
  [128] pushint8 1 .............................. <1>
  [130] pusharglistnoret 1 ...................... <1>
  [132] extcall 25 .............................. return 1
  [134] ret
end

on removeActiveTask me, tMemName, tCallback
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getprop 758 ............................. <pActiveTasks>
  [  9] getobjprop 22 ........................... <pActiveTasks.count>
  [ 11] lteq
  [ 12] jmpifz [ 84] ............................ repeat with i = 1 to pActiveTasks.count
  [ 15] getprop 758 ............................. <pActiveTasks>
  [ 18] getlocal 0 .............................. <i>
  [ 20] pusharglist 2 ........................... <pActiveTasks, i>
  [ 22] objcall 54 .............................. <pActiveTasks[i]>
  [ 24] getobjprop 782 .......................... <pActiveTasks[i].pMemName>
  [ 27] getparam 1 .............................. <tMemName>
  [ 29] eq ...................................... <pActiveTasks[i].pMemName = tMemName>
  [ 30] jmpifz [ 75] ............................ if pActiveTasks[i].pMemName = tMemName then
  [ 33] getprop 758 ............................. <pActiveTasks>
  [ 36] getlocal 0 .............................. <i>
  [ 38] pusharglist 2 ........................... <pActiveTasks, i>
  [ 40] objcall 54 .............................. <pActiveTasks[i]>
  [ 42] pusharglistnoret 1 ...................... <pActiveTasks[i]>
  [ 44] objcall 119 ............................. pActiveTasks[i].deconstruct()
  [ 46] getprop 758 ............................. <pActiveTasks>
  [ 49] getlocal 0 .............................. <i>
  [ 51] pusharglistnoret 2 ...................... <pActiveTasks, i>
  [ 53] objcall 723 ............................. pActiveTasks.deleteAt(i)
  [ 56] getprop 760 ............................. <pCompleteTasks>
  [ 59] getparam 1 .............................. <tMemName>
  [ 61] pusharglistnoret 2 ...................... <pCompleteTasks, tMemName>
  [ 63] objcall 122 ............................. pCompleteTasks.add(tMemName)
  [ 65] getparam 0 .............................. <me>
  [ 67] pusharglistnoret 1 ...................... <me>
  [ 69] objcall 752 ............................. me.updateQueue()
  [ 72] jmp [ 84] ............................... exit repeat
  [ 75] pushint8 1
  [ 77] getlocal 0
  [ 79] add
  [ 80] setlocal 0
  [ 82] endrepeat [  4]
  [ 84] getparam 2 .............................. <tCallback>
  [ 86] pusharglist 1 ........................... <tCallback>
  [ 88] extcall 20 .............................. <voidp(tCallback)>
  [ 90] not ..................................... <not voidp(tCallback)>
  [ 91] jmpifz [145] ............................ if not voidp(tCallback) then
  [ 94] getparam 2 .............................. <tCallback>
  [ 96] pushsymb 768 ............................ <#client>
  [ 99] pusharglist 2 ........................... <tCallback, #client>
  [101] objcall 54 .............................. <tCallback[#client]>
  [103] pusharglist 1 ........................... <tCallback[#client]>
  [105] extcall 67 .............................. <objectExists(tCallback[#client])>
  [107] jmpifz [145] ............................ if objectExists(tCallback[#client]) then
  [110] getparam 2 .............................. <tCallback>
  [112] pushsymb 767 ............................ <#method>
  [115] pusharglist 2 ........................... <tCallback, #method>
  [117] objcall 54 .............................. <tCallback[#method]>
  [119] getparam 2 .............................. <tCallback>
  [121] pushsymb 768 ............................ <#client>
  [124] pusharglist 2 ........................... <tCallback, #client>
  [126] objcall 54 .............................. <tCallback[#client]>
  [128] pusharglist 1 ........................... <tCallback[#client]>
  [130] extcall 58 .............................. <getObject(tCallback[#client])>
  [132] getparam 2 .............................. <tCallback>
  [134] pushsymb 769 ............................ <#argument>
  [137] pusharglist 2 ........................... <tCallback, #argument>
  [139] objcall 54 .............................. <tCallback[#argument]>
  [141] pusharglistnoret 3 ...................... <tCallback[#method], getObject(tCallback[#client]), tCallback[#argument]>
  [143] extcall 68 .............................. call(tCallback[#method], getObject(tCallback[#client]), tCallback[#argument])
  [145] pushzero ................................ <0>
  [146] pusharglistnoret 1 ...................... <0>
  [148] extcall 25 .............................. return 0
  [150] ret
end

on eraseDownloadedItems me
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getprop 759 ............................. <pReceivedTasks>
  [  9] getobjprop 22 ........................... <pReceivedTasks.count>
  [ 11] lteq
  [ 12] jmpifz [ 37] ............................ repeat with i = 1 to pReceivedTasks.count
  [ 15] getprop 759 ............................. <pReceivedTasks>
  [ 18] getlocal 0 .............................. <i>
  [ 20] pusharglist 2 ........................... <pReceivedTasks, i>
  [ 22] objcall 54 .............................. <pReceivedTasks[i]>
  [ 24] pusharglistnoret 1 ...................... <pReceivedTasks[i]>
  [ 26] extcall 165 ............................. removeMember(pReceivedTasks[i])
  [ 28] pushint8 1
  [ 30] getlocal 0
  [ 32] add
  [ 33] setlocal 0
  [ 35] endrepeat [  4]
  [ 37] pushint8 1 .............................. <1>
  [ 39] pusharglistnoret 1 ...................... <1>
  [ 41] extcall 25 .............................. return 1
  [ 43] ret
end

on recognizeMemberType me, tURL
  [  0] getprop 761 ............................. <pTypeDefList>
  [  3] getobjprop 22 ........................... <pTypeDefList.count>
  [  5] pushzero ................................ <0>
  [  6] eq ...................................... <pTypeDefList.count = 0>
  [  7] jmpifz [ 17] ............................ if pTypeDefList.count = 0 then
  [ 10] getparam 0 .............................. <me>
  [ 12] pusharglistnoret 1 ...................... <me>
  [ 14] objcall 756 ............................. me.fillTypeDefinitions()
  [ 17] getparam 1 .............................. <tURL>
  [ 19] pushsymb 291 ............................ <#char>
  [ 22] getparam 1 .............................. <tURL>
  [ 24] pusharglist 1 ........................... <tURL>
  [ 26] extcall 293 ............................. <length(tURL)>
  [ 29] pushint8 5 .............................. <5>
  [ 31] sub ..................................... <length(tURL) - 5>
  [ 32] getparam 1 .............................. <tURL>
  [ 34] pusharglist 1 ........................... <tURL>
  [ 36] extcall 293 ............................. <length(tURL)>
  [ 39] pusharglist 4 ........................... <tURL, #char, length(tURL) - 5, length(tURL)>
  [ 41] objcall 290 ............................. <tURL.char[length(tURL) - 5..length(tURL)]>
  [ 44] setlocal 0 .............................. tFileType = tURL.char[length(tURL) - 5..length(tURL)]
  [ 46] getlocal 0 .............................. <tFileType>
  [ 48] pushsymb 291 ............................ <#char>
  [ 51] pushcons 33 ............................. <".">
  [ 53] getlocal 0 .............................. <tFileType>
  [ 55] pusharglist 2 ........................... <".", tFileType>
  [ 57] extcall 292 ............................. <offset(".", tFileType)>
  [ 60] pushint8 1 .............................. <1>
  [ 62] add ..................................... <offset(".", tFileType) + 1>
  [ 63] getlocal 0 .............................. <tFileType>
  [ 65] pusharglist 1 ........................... <tFileType>
  [ 67] extcall 293 ............................. <length(tFileType)>
  [ 70] pusharglist 4 ........................... <tFileType, #char, offset(".", tFileType) + 1, length(tFileType)>
  [ 72] objcall 290 ............................. <tFileType.char[offset(".", tFileType) + 1..length(tFileType)]>
  [ 75] setlocal 0 .............................. tFileType = tFileType.char[offset(".", tFileType) + 1..length(tFileType)]
  [ 77] getprop 761 ............................. <pTypeDefList>
  [ 80] getlocal 0 .............................. <tFileType>
  [ 82] pusharglist 2 ........................... <pTypeDefList, tFileType>
  [ 84] objcall 54 .............................. <pTypeDefList[tFileType]>
  [ 86] setlocal 0 .............................. tFileType = pTypeDefList[tFileType]
  [ 88] getlocal 0 .............................. <tFileType>
  [ 90] pusharglist 1 ........................... <tFileType>
  [ 92] extcall 46 .............................. <symbolp(tFileType)>
  [ 94] not ..................................... <not symbolp(tFileType)>
  [ 95] jmpifz [122] ............................ if not symbolp(tFileType) then / else
  [ 98] getparam 0 .............................. <me>
  [100] pushcons 34 ............................. <"Couldn't recognize member's type:">
  [102] getparam 1 .............................. <tURL>
  [104] joinpadstr .............................. <"Couldn't recognize member's type:" && tURL>
  [105] pushsymb 755 ............................ <#recognizeMemberType>
  [108] pusharglistnoret 3 ...................... <me, "Couldn't recognize member's type:" && tURL, #recognizeMemberType>
  [110] extcall 39 .............................. error(me, "Couldn't recognize member's type:" && tURL, #recognizeMemberType)
  [112] pushsymb 784 ............................ <#field>
  [115] pusharglistnoret 1 ...................... <#field>
  [117] extcall 25 .............................. return #field
  [119] jmp [128]
  [122] getlocal 0 .............................. <tFileType>
  [124] pusharglistnoret 1 ...................... <tFileType>
  [126] extcall 25 .............................. return tFileType
  [128] ret
end

on fillTypeDefinitions me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 761 ............................. pTypeDefList = [:]
  [  6] getprop 761 ............................. <pTypeDefList>
  [  9] pushcons 35 ............................. <"gif">
  [ 11] pushsymb 722 ............................ <#bitmap>
  [ 14] pusharglistnoret 3 ...................... <pTypeDefList, "gif", #bitmap>
  [ 16] objcall 24 .............................. pTypeDefList["gif"] = #bitmap
  [ 18] getprop 761 ............................. <pTypeDefList>
  [ 21] pushcons 36 ............................. <"jpg">
  [ 23] pushsymb 722 ............................ <#bitmap>
  [ 26] pusharglistnoret 3 ...................... <pTypeDefList, "jpg", #bitmap>
  [ 28] objcall 24 .............................. pTypeDefList["jpg"] = #bitmap
  [ 30] getprop 761 ............................. <pTypeDefList>
  [ 33] pushcons 37 ............................. <"bmp">
  [ 35] pushsymb 722 ............................ <#bitmap>
  [ 38] pusharglistnoret 3 ...................... <pTypeDefList, "bmp", #bitmap>
  [ 40] objcall 24 .............................. pTypeDefList["bmp"] = #bitmap
  [ 42] getprop 761 ............................. <pTypeDefList>
  [ 45] pushcons 38 ............................. <"png">
  [ 47] pushsymb 722 ............................ <#bitmap>
  [ 50] pusharglistnoret 3 ...................... <pTypeDefList, "png", #bitmap>
  [ 52] objcall 24 .............................. pTypeDefList["png"] = #bitmap
  [ 54] getprop 761 ............................. <pTypeDefList>
  [ 57] pushcons 39 ............................. <"tif">
  [ 59] pushsymb 722 ............................ <#bitmap>
  [ 62] pusharglistnoret 3 ...................... <pTypeDefList, "tif", #bitmap>
  [ 64] objcall 24 .............................. pTypeDefList["tif"] = #bitmap
  [ 66] getprop 761 ............................. <pTypeDefList>
  [ 69] pushcons 40 ............................. <"tiff">
  [ 71] pushsymb 722 ............................ <#bitmap>
  [ 74] pusharglistnoret 3 ...................... <pTypeDefList, "tiff", #bitmap>
  [ 76] objcall 24 .............................. pTypeDefList["tiff"] = #bitmap
  [ 78] getprop 761 ............................. <pTypeDefList>
  [ 81] pushcons 41 ............................. <"psd">
  [ 83] pushsymb 722 ............................ <#bitmap>
  [ 86] pusharglistnoret 3 ...................... <pTypeDefList, "psd", #bitmap>
  [ 88] objcall 24 .............................. pTypeDefList["psd"] = #bitmap
  [ 90] getprop 761 ............................. <pTypeDefList>
  [ 93] pushcons 42 ............................. <"txt">
  [ 95] pushsymb 784 ............................ <#field>
  [ 98] pusharglistnoret 3 ...................... <pTypeDefList, "txt", #field>
  [100] objcall 24 .............................. pTypeDefList["txt"] = #field
  [102] getprop 761 ............................. <pTypeDefList>
  [105] pushcons 43 ............................. <"html">
  [107] pushsymb 784 ............................ <#field>
  [110] pusharglistnoret 3 ...................... <pTypeDefList, "html", #field>
  [112] objcall 24 .............................. pTypeDefList["html"] = #field
  [114] getprop 761 ............................. <pTypeDefList>
  [117] pushcons 44 ............................. <"htm">
  [119] pushsymb 784 ............................ <#field>
  [122] pusharglistnoret 3 ...................... <pTypeDefList, "htm", #field>
  [124] objcall 24 .............................. pTypeDefList["htm"] = #field
  [126] getprop 761 ............................. <pTypeDefList>
  [129] pushcons 45 ............................. <"jsp">
  [131] pushsymb 784 ............................ <#field>
  [134] pusharglistnoret 3 ...................... <pTypeDefList, "jsp", #field>
  [136] objcall 24 .............................. pTypeDefList["jsp"] = #field
  [138] getprop 761 ............................. <pTypeDefList>
  [141] pushcons 46 ............................. <"xml">
  [143] pushsymb 784 ............................ <#field>
  [146] pusharglistnoret 3 ...................... <pTypeDefList, "xml", #field>
  [148] objcall 24 .............................. pTypeDefList["xml"] = #field
  [150] getprop 761 ............................. <pTypeDefList>
  [153] pushcons 47 ............................. <"nfo">
  [155] pushsymb 784 ............................ <#field>
  [158] pusharglistnoret 3 ...................... <pTypeDefList, "nfo", #field>
  [160] objcall 24 .............................. pTypeDefList["nfo"] = #field
  [162] getprop 761 ............................. <pTypeDefList>
  [165] pushcons 48 ............................. <"js">
  [167] pushsymb 784 ............................ <#field>
  [170] pusharglistnoret 3 ...................... <pTypeDefList, "js", #field>
  [172] objcall 24 .............................. pTypeDefList["js"] = #field
  [174] getprop 761 ............................. <pTypeDefList>
  [177] pushcons 49 ............................. <"css">
  [179] pushsymb 784 ............................ <#field>
  [182] pusharglistnoret 3 ...................... <pTypeDefList, "css", #field>
  [184] objcall 24 .............................. pTypeDefList["css"] = #field
  [186] getprop 761 ............................. <pTypeDefList>
  [189] pushcons 50 ............................. <"avi">
  [191] pushsymb 785 ............................ <#digitalVideo>
  [194] pusharglistnoret 3 ...................... <pTypeDefList, "avi", #digitalVideo>
  [196] objcall 24 .............................. pTypeDefList["avi"] = #digitalVideo
  [198] getprop 761 ............................. <pTypeDefList>
  [201] pushcons 51 ............................. <"mpg">
  [203] pushsymb 785 ............................ <#digitalVideo>
  [206] pusharglistnoret 3 ...................... <pTypeDefList, "mpg", #digitalVideo>
  [208] objcall 24 .............................. pTypeDefList["mpg"] = #digitalVideo
  [210] getprop 761 ............................. <pTypeDefList>
  [213] pushcons 52 ............................. <"mpeg">
  [215] pushsymb 785 ............................ <#digitalVideo>
  [218] pusharglistnoret 3 ...................... <pTypeDefList, "mpeg", #digitalVideo>
  [220] objcall 24 .............................. pTypeDefList["mpeg"] = #digitalVideo
  [222] getprop 761 ............................. <pTypeDefList>
  [225] pushcons 53 ............................. <"mp3">
  [227] pushsymb 786 ............................ <#sound>
  [230] pusharglistnoret 3 ...................... <pTypeDefList, "mp3", #sound>
  [232] objcall 24 .............................. pTypeDefList["mp3"] = #sound
  [234] getprop 761 ............................. <pTypeDefList>
  [237] pushcons 54 ............................. <"wav">
  [239] pushsymb 786 ............................ <#sound>
  [242] pusharglistnoret 3 ...................... <pTypeDefList, "wav", #sound>
  [244] objcall 24 .............................. pTypeDefList["wav"] = #sound
  [246] getprop 761 ............................. <pTypeDefList>
  [249] pushcons 55 ............................. <"snd">
  [251] pushsymb 786 ............................ <#sound>
  [254] pusharglistnoret 3 ...................... <pTypeDefList, "snd", #sound>
  [256] objcall 24 .............................. pTypeDefList["snd"] = #sound
  [258] getprop 761 ............................. <pTypeDefList>
  [261] pushcons 56 ............................. <"swa">
  [263] pushsymb 787 ............................ <#swa>
  [266] pusharglistnoret 3 ...................... <pTypeDefList, "swa", #swa>
  [268] objcall 24 .............................. pTypeDefList["swa"] = #swa
  [270] getprop 761 ............................. <pTypeDefList>
  [273] pushcons 57 ............................. <"fla">
  [275] pushsymb 788 ............................ <#flash>
  [278] pusharglistnoret 3 ...................... <pTypeDefList, "fla", #flash>
  [280] objcall 24 .............................. pTypeDefList["fla"] = #flash
  [282] getprop 761 ............................. <pTypeDefList>
  [285] pushcons 58 ............................. <"fnt">
  [287] pushsymb 594 ............................ <#font>
  [290] pusharglistnoret 3 ...................... <pTypeDefList, "fnt", #font>
  [292] objcall 24 .............................. pTypeDefList["fnt"] = #font
  [294] getprop 761 ............................. <pTypeDefList>
  [297] pushcons 59 ............................. <"ttf">
  [299] pushsymb 594 ............................ <#font>
  [302] pusharglistnoret 3 ...................... <pTypeDefList, "ttf", #font>
  [304] objcall 24 .............................. pTypeDefList["ttf"] = #font
  [306] getprop 761 ............................. <pTypeDefList>
  [309] pushcons 60 ............................. <"cur">
  [311] pushsymb 45 ............................. <#cursor>
  [313] pusharglistnoret 3 ...................... <pTypeDefList, "cur", #cursor>
  [315] objcall 24 .............................. pTypeDefList["cur"] = #cursor
  [317] pushint8 1 .............................. <1>
  [319] pusharglistnoret 1 ...................... <1>
  [321] extcall 25 .............................. return 1
  [323] ret
end
