property pConnectionId, pTimeOutID, pQueue, pCrypto, pUseCrypto, pHandshakeFinished

on construct me
  [  0] gettoplevelprop 907 ..................... <_player>
  [  3] pusharglist 0 ........................... <>
  [  5] extcall 32 .............................. <VOID>
  [  7] nteq .................................... <_player <> VOID>
  [  8] jmpifz [ 32] ............................ if _player <> VOID then
  [ 11] gettoplevelprop 907 ..................... <_player>
  [ 14] getobjprop 1023 ......................... <_player.traceScript>
  [ 17] gettoplevelprop 1024 .................... <_movie>
  [ 20] getobjprop 1023 ......................... <_movie.traceScript>
  [ 23] or ...................................... <_player.traceScript or _movie.traceScript>
  [ 24] jmpifz [ 32] ............................ if _player.traceScript or _movie.traceScript then
  [ 27] pushzero ................................ <0>
  [ 28] pusharglistnoret 1 ...................... <0>
  [ 30] extcall 25 .............................. return 0
  [ 32] gettoplevelprop 907 ..................... <_player>
  [ 35] pushzero ................................ <0>
  [ 36] setobjprop 1023 ......................... _player.traceScript = 0
  [ 39] gettoplevelprop 1024 .................... <_movie>
  [ 42] pushzero ................................ <0>
  [ 43] setobjprop 1023 ......................... _movie.traceScript = 0
  [ 46] pushcons 0 .............................. <"connection.mus.id">
  [ 48] pushsymb 1026 ........................... <#mus>
  [ 51] pusharglist 2 ........................... <"connection.mus.id", #mus>
  [ 53] extcall 372 ............................. <getVariable("connection.mus.id", #mus)>
  [ 56] setprop 1025 ............................ pConnectionId = getVariable("connection.mus.id", #mus)
  [ 59] pushcons 1 .............................. <"mus_close_delay">
  [ 61] setprop 1027 ............................ pTimeOutID = "mus_close_delay"
  [ 64] pusharglist 0 ........................... <[:]>
  [ 66] pushproplist ............................ <[:]>
  [ 67] setlocal 0 .............................. pCallBacks = [:]
  [ 69] pusharglist 0 ........................... <[]>
  [ 71] pushlist ................................ <[]>
  [ 72] setprop 1028 ............................ pQueue = []
  [ 75] pushsymb 656 ............................ <#temp>
  [ 78] pushcons 2 .............................. <"RC4 Class">
  [ 80] pusharglist 1 ........................... <["RC4 Class"]>
  [ 82] pushlist ................................ <["RC4 Class"]>
  [ 83] pusharglist 2 ........................... <#temp, ["RC4 Class"]>
  [ 85] extcall 94 .............................. <createObject(#temp, ["RC4 Class"])>
  [ 87] setprop 1029 ............................ pCrypto = createObject(#temp, ["RC4 Class"])
  [ 90] pushzero ................................ <0>
  [ 91] setprop 1030 ............................ pUseCrypto = 0
  [ 94] pushzero ................................ <0>
  [ 95] setprop 1031 ............................ pHandshakeFinished = 0
  [ 98] getparam 0 .............................. <me>
  [100] pushint8 1 .............................. <1>
  [102] pusharglist 2 ........................... <me, 1>
  [104] objcall 1019 ............................ <me.registerCmds(1)>
  [107] pusharglistnoret 1 ...................... <me.registerCmds(1)>
  [109] extcall 25 .............................. return me.registerCmds(1)
  [111] ret
end

on deconstruct me
  [  0] getparam 0 .............................. <me>
  [  2] pushzero ................................ <0>
  [  3] pusharglistnoret 2 ...................... <me, 0>
  [  5] objcall 1019 ............................ me.registerCmds(0)
  [  8] pushzero ................................ <0>
  [  9] setprop 1031 ............................ pHandshakeFinished = 0
  [ 12] pushzero ................................ <0>
  [ 13] setprop 1030 ............................ pUseCrypto = 0
  [ 16] getprop 1025 ............................ <pConnectionId>
  [ 19] pusharglist 1 ........................... <pConnectionId>
  [ 21] extcall 429 ............................. <removeMultiuser(pConnectionId)>
  [ 24] pusharglistnoret 1 ...................... <removeMultiuser(pConnectionId)>
  [ 26] extcall 25 .............................. return removeMultiuser(pConnectionId)
  [ 28] ret
end

on retrieveData me, tid, tAuth, tCallBackObj
  [  0] getprop 1028 ............................ <pQueue>
  [  3] pushsymb 454 ............................ <#type>
  [  6] pushsymb 1033 ........................... <#retrieve>
  [  9] pushsymb 34 ............................. <#id>
  [ 11] getparam 1 .............................. <tid>
  [ 13] pushsymb 1034 ........................... <#auth>
  [ 16] getparam 2 .............................. <tAuth>
  [ 18] pushsymb 764 ............................ <#callback>
  [ 21] getparam 3 .............................. <tCallBackObj>
  [ 23] pusharglist 8 ........................... <[#type: #retrieve, #id: tid, #auth: tAuth, #callback: tCallBackObj]>
  [ 25] pushproplist ............................ <[#type: #retrieve, #id: tid, #auth: tAuth, #callback: tCallBackObj]>
  [ 26] pusharglistnoret 2 ...................... <pQueue, [#type: #retrieve, #id: tid, #auth: tAuth, #callback: tCallBackObj]>
  [ 28] objcall 122 ............................. pQueue.add([#type: #retrieve, #id: tid, #auth: tAuth, #callback: tCallBackObj])
  [ 30] getprop 1028 ............................ <pQueue>
  [ 33] pusharglist 1 ........................... <pQueue>
  [ 35] extcall 22 .............................. <count(pQueue)>
  [ 37] pushint8 1 .............................. <1>
  [ 39] eq ...................................... <count(pQueue) = 1>
  [ 40] getprop 1025 ............................ <pConnectionId>
  [ 43] pusharglist 1 ........................... <pConnectionId>
  [ 45] extcall 431 ............................. <multiuserExists(pConnectionId)>
  [ 48] not ..................................... <not multiuserExists(pConnectionId)>
  [ 49] or ...................................... <(count(pQueue) = 1) or not multiuserExists(pConnectionId)>
  [ 50] jmpifz [ 60] ............................ if (count(pQueue) = 1) or not multiuserExists(pConnectionId) then
  [ 53] getparam 0 .............................. <me>
  [ 55] pusharglistnoret 1 ...................... <me>
  [ 57] objcall 1014 ............................ me.next()
  [ 60] ret
end

on storeData me, tdata, tCallBackObj
  [  0] getprop 1028 ............................ <pQueue>
  [  3] pushsymb 454 ............................ <#type>
  [  6] pushsymb 1036 ........................... <#store>
  [  9] pushsymb 1037 ........................... <#data>
  [ 12] getparam 1 .............................. <tdata>
  [ 14] pushsymb 764 ............................ <#callback>
  [ 17] getparam 2 .............................. <tCallBackObj>
  [ 19] pusharglist 6 ........................... <[#type: #store, #data: tdata, #callback: tCallBackObj]>
  [ 21] pushproplist ............................ <[#type: #store, #data: tdata, #callback: tCallBackObj]>
  [ 22] pusharglistnoret 2 ...................... <pQueue, [#type: #store, #data: tdata, #callback: tCallBackObj]>
  [ 24] objcall 122 ............................. pQueue.add([#type: #store, #data: tdata, #callback: tCallBackObj])
  [ 26] getprop 1028 ............................ <pQueue>
  [ 29] pusharglist 1 ........................... <pQueue>
  [ 31] extcall 22 .............................. <count(pQueue)>
  [ 33] pushint8 1 .............................. <1>
  [ 35] eq ...................................... <count(pQueue) = 1>
  [ 36] getprop 1025 ............................ <pConnectionId>
  [ 39] pusharglist 1 ........................... <pConnectionId>
  [ 41] extcall 431 ............................. <multiuserExists(pConnectionId)>
  [ 44] not ..................................... <not multiuserExists(pConnectionId)>
  [ 45] or ...................................... <(count(pQueue) = 1) or not multiuserExists(pConnectionId)>
  [ 46] jmpifz [ 56] ............................ if (count(pQueue) = 1) or not multiuserExists(pConnectionId) then
  [ 49] getparam 0 .............................. <me>
  [ 51] pusharglistnoret 1 ...................... <me>
  [ 53] objcall 1014 ............................ me.next()
  [ 56] ret
end

on addMessageToQueue me, tMsg
  [  0] getprop 1028 ............................ <pQueue>
  [  3] pushsymb 454 ............................ <#type>
  [  6] pushsymb 1038 ........................... <#fusemsg>
  [  9] pushsymb 1039 ........................... <#message>
  [ 12] getparam 1 .............................. <tMsg>
  [ 14] pusharglist 4 ........................... <[#type: #fusemsg, #message: tMsg]>
  [ 16] pushproplist ............................ <[#type: #fusemsg, #message: tMsg]>
  [ 17] pusharglistnoret 2 ...................... <pQueue, [#type: #fusemsg, #message: tMsg]>
  [ 19] objcall 122 ............................. pQueue.add([#type: #fusemsg, #message: tMsg])
  [ 21] getprop 1028 ............................ <pQueue>
  [ 24] pusharglist 1 ........................... <pQueue>
  [ 26] extcall 22 .............................. <count(pQueue)>
  [ 28] pushint8 1 .............................. <1>
  [ 30] eq ...................................... <count(pQueue) = 1>
  [ 31] getprop 1025 ............................ <pConnectionId>
  [ 34] pusharglist 1 ........................... <pConnectionId>
  [ 36] extcall 431 ............................. <multiuserExists(pConnectionId)>
  [ 39] not ..................................... <not multiuserExists(pConnectionId)>
  [ 40] or ...................................... <(count(pQueue) = 1) or not multiuserExists(pConnectionId)>
  [ 41] jmpifz [ 51] ............................ if (count(pQueue) = 1) or not multiuserExists(pConnectionId) then
  [ 44] getparam 0 .............................. <me>
  [ 46] pusharglistnoret 1 ...................... <me>
  [ 48] objcall 1014 ............................ me.next()
  [ 51] ret
end

on checkConnection me
  [  0] getprop 1025 ............................ <pConnectionId>
  [  3] pusharglist 1 ........................... <pConnectionId>
  [  5] extcall 431 ............................. <multiuserExists(pConnectionId)>
  [  8] not ..................................... <not multiuserExists(pConnectionId)>
  [  9] jmpifz [ 34] ............................ if not multiuserExists(pConnectionId) then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 3 .............................. <"MUS connection not found:">
  [ 16] getprop 1025 ............................ <pConnectionId>
  [ 19] joinpadstr .............................. <"MUS connection not found:" && pConnectionId>
  [ 20] pushsymb 1013 ........................... <#checkConnection>
  [ 23] pushsymb 932 ............................ <#minor>
  [ 26] pusharglist 4 ........................... <me, "MUS connection not found:" && pConnectionId, #checkConnection, #minor>
  [ 28] extcall 39 .............................. <error(me, "MUS connection not found:" && pConnectionId, #checkConnection, #minor)>
  [ 30] pusharglistnoret 1 ...................... <error(me, "MUS connection not found:" && pConnectionId, #checkConnection, #minor)>
  [ 32] extcall 25 .............................. return error(me, "MUS connection not found:" && pConnectionId, #checkConnection, #minor)
  [ 34] getprop 1025 ............................ <pConnectionId>
  [ 37] pusharglist 1 ........................... <pConnectionId>
  [ 39] extcall 430 ............................. <getMultiuser(pConnectionId)>
  [ 42] pusharglist 1 ........................... <getMultiuser(pConnectionId)>
  [ 44] objcall 1040 ............................ <getMultiuser(pConnectionId).connectionReady()>
  [ 47] getprop 1031 ............................ <pHandshakeFinished>
  [ 50] and ..................................... <getMultiuser(pConnectionId).connectionReady() and pHandshakeFinished>
  [ 51] jmpifz [126] ............................ if getMultiuser(pConnectionId).connectionReady() and pHandshakeFinished then / else
  [ 54] pushsymb 59 ............................. <#session>
  [ 56] pusharglist 1 ........................... <#session>
  [ 58] extcall 58 .............................. <getObject(#session)>
  [ 60] pushcons 4 .............................. <"mus_ticket">
  [ 62] pusharglist 2 ........................... <getObject(#session), "mus_ticket">
  [ 64] objcall 90 .............................. <getObject(#session).get("mus_ticket")>
  [ 66] setlocal 0 .............................. tTicket = getObject(#session).get("mus_ticket")
  [ 68] getprop 1030 ............................ <pUseCrypto>
  [ 71] jmpifz [ 98] ............................ if pUseCrypto then
  [ 74] getprop 1029 ............................ <pCrypto>
  [ 77] getlocal 1 .............................. <tUserID>
  [ 79] pusharglist 2 ........................... <pCrypto, tUserID>
  [ 81] objcall 1041 ............................ <pCrypto.encipher(tUserID)>
  [ 84] setlocal 1 .............................. tUserID = pCrypto.encipher(tUserID)
  [ 86] getprop 1029 ............................ <pCrypto>
  [ 89] getlocal 2 .............................. <tMachineID>
  [ 91] pusharglist 2 ........................... <pCrypto, tMachineID>
  [ 93] objcall 1041 ............................ <pCrypto.encipher(tMachineID)>
  [ 96] setlocal 2 .............................. tMachineID = pCrypto.encipher(tMachineID)
  [ 98] getprop 1025 ............................ <pConnectionId>
  [101] pusharglist 1 ........................... <pConnectionId>
  [103] extcall 430 ............................. <getMultiuser(pConnectionId)>
  [106] pushcons 5 .............................. <"LOGIN">
  [108] getlocal 0 .............................. <tTicket>
  [110] joinpadstr .............................. <"LOGIN" && tTicket>
  [111] pusharglistnoret 2 ...................... <getMultiuser(pConnectionId), "LOGIN" && tTicket>
  [113] objcall 1042 ............................ getMultiuser(pConnectionId).send("LOGIN" && tTicket)
  [116] getparam 0 .............................. <me>
  [118] pusharglistnoret 1 ...................... <me>
  [120] objcall 1014 ............................ me.next()
  [123] jmp [139]
  [126] getparam 0 .............................. <me>
  [128] pushint16 1000 .......................... <1000>
  [131] pushsymb 1013 ........................... <#checkConnection>
  [134] pusharglistnoret 3 ...................... <me, 1000, #checkConnection>
  [136] objcall 549 ............................. me.delay(1000, #checkConnection)
  [139] ret
end

on next me
  [  0] getprop 1025 ............................ <pConnectionId>
  [  3] pusharglist 1 ........................... <pConnectionId>
  [  5] extcall 431 ............................. <multiuserExists(pConnectionId)>
  [  8] not ..................................... <not multiuserExists(pConnectionId)>
  [  9] jmpifz [ 72] ............................ if not multiuserExists(pConnectionId) then / else
  [ 12] getprop 1025 ............................ <pConnectionId>
  [ 15] pushcons 6 .............................. <"connection.mus.host">
  [ 17] pusharglist 1 ........................... <"connection.mus.host">
  [ 19] extcall 372 ............................. <getVariable("connection.mus.host")>
  [ 22] pushcons 7 .............................. <"connection.mus.port">
  [ 24] pusharglist 1 ........................... <"connection.mus.port">
  [ 26] extcall 373 ............................. <getIntVariable("connection.mus.port")>
  [ 29] pusharglistnoret 3 ...................... <pConnectionId, getVariable("connection.mus.host"), getIntVariable("connection.mus.port")>
  [ 31] extcall 428 ............................. createMultiuser(pConnectionId, getVariable("connection.mus.host"), getIntVariable("connection.mus.port"))
  [ 34] getprop 1025 ............................ <pConnectionId>
  [ 37] pusharglist 1 ........................... <pConnectionId>
  [ 39] extcall 430 ............................. <getMultiuser(pConnectionId)>
  [ 42] getparam 0 .............................. <me>
  [ 44] pusharglist 1 ........................... <me>
  [ 46] objcall 3 ............................... <me.getID()>
  [ 48] pushsymb 1017 ........................... <#binaryDataReceived>
  [ 51] pusharglistnoret 3 ...................... <getMultiuser(pConnectionId), me.getID(), #binaryDataReceived>
  [ 53] objcall 1046 ............................ getMultiuser(pConnectionId).registerBinaryDataHandler(me.getID(), #binaryDataReceived)
  [ 56] getparam 0 .............................. <me>
  [ 58] pushint16 1000 .......................... <1000>
  [ 61] pushsymb 1013 ........................... <#checkConnection>
  [ 64] pusharglistnoret 3 ...................... <me, 1000, #checkConnection>
  [ 66] objcall 549 ............................. me.delay(1000, #checkConnection)
  [ 69] jmp [295]
  [ 72] getprop 1025 ............................ <pConnectionId>
  [ 75] pusharglist 1 ........................... <pConnectionId>
  [ 77] extcall 430 ............................. <getMultiuser(pConnectionId)>
  [ 80] pusharglist 1 ........................... <getMultiuser(pConnectionId)>
  [ 82] objcall 1040 ............................ <getMultiuser(pConnectionId).connectionReady()>
  [ 85] jmpifz [295] ............................ if getMultiuser(pConnectionId).connectionReady() then
  [ 88] getprop 1027 ............................ <pTimeOutID>
  [ 91] pusharglist 1 ........................... <pTimeOutID>
  [ 93] extcall 246 ............................. <timeoutExists(pTimeOutID)>
  [ 95] jmpifz [105] ............................ if timeoutExists(pTimeOutID) then
  [ 98] getprop 1027 ............................ <pTimeOutID>
  [101] pusharglistnoret 1 ...................... <pTimeOutID>
  [103] extcall 244 ............................. removeTimeout(pTimeOutID)
  [105] getprop 1028 ............................ <pQueue>
  [108] pusharglist 1 ........................... <pQueue>
  [110] extcall 22 .............................. <count(pQueue)>
  [112] pushzero ................................ <0>
  [113] gt ...................................... <count(pQueue) > 0>
  [114] jmpifz [270] ............................ if count(pQueue) > 0 then / else
  [117] getprop 1028 ............................ <pQueue>
  [120] pushint8 1 .............................. <1>
  [122] pusharglist 2 ........................... <pQueue, 1>
  [124] objcall 54 .............................. <pQueue[1]>
  [126] setlocal 0 .............................. tTask = pQueue[1]
  [128] getlocal 0 .............................. <tTask>
  [130] getobjprop 454 .......................... <tTask.type>
  [133] peek 0 .................................. case tTask.type of
  [135] pushsymb 1036 ........................... <#store>
  [138] eq
  [139] jmpifz [169] ............................ (case) #store:
  [142] pop 1
  [144] getprop 1025 ............................ <pConnectionId>
  [147] pusharglist 1 ........................... <pConnectionId>
  [149] extcall 430 ............................. <getMultiuser(pConnectionId)>
  [152] getlocal 0 .............................. <tTask>
  [154] getobjprop 1037 ......................... <tTask.data>
  [157] pusharglist 2 ........................... <getMultiuser(pConnectionId), tTask.data>
  [159] objcall 1047 ............................ <getMultiuser(pConnectionId).sendBinary(tTask.data)>
  [162] pusharglistnoret 1 ...................... <getMultiuser(pConnectionId).sendBinary(tTask.data)>
  [164] extcall 25 .............................. return getMultiuser(pConnectionId).sendBinary(tTask.data)
  [166] jmp [265]
  [169] peek 0
  [171] pushsymb 1033 ........................... <#retrieve>
  [174] eq
  [175] jmpifz [213] ............................ (case) #retrieve:
  [178] pop 1
  [180] getprop 1025 ............................ <pConnectionId>
  [183] pusharglist 1 ........................... <pConnectionId>
  [185] extcall 430 ............................. <getMultiuser(pConnectionId)>
  [188] pushcons 8 .............................. <"GETBINDATA">
  [190] getlocal 0 .............................. <tTask>
  [192] getobjprop 34 ........................... <tTask.id>
  [194] joinpadstr .............................. <"GETBINDATA" && tTask.id>
  [195] getlocal 0 .............................. <tTask>
  [197] getobjprop 1034 ......................... <tTask.auth>
  [200] joinpadstr .............................. <"GETBINDATA" && tTask.id && tTask.auth>
  [201] pusharglist 2 ........................... <getMultiuser(pConnectionId), "GETBINDATA" && tTask.id && tTask.auth>
  [203] objcall 1042 ............................ <getMultiuser(pConnectionId).send("GETBINDATA" && tTask.id && tTask.auth)>
  [206] pusharglistnoret 1 ...................... <getMultiuser(pConnectionId).send("GETBINDATA" && tTask.id && tTask.auth)>
  [208] extcall 25 .............................. return getMultiuser(pConnectionId).send("GETBINDATA" && tTask.id && tTask.auth)
  [210] jmp [265]
  [213] peek 0
  [215] pushsymb 1038 ........................... <#fusemsg>
  [218] eq
  [219] jmpifz [265] ............................ (case) #fusemsg:
  [222] getprop 1028 ............................ <pQueue>
  [225] pushint8 1 .............................. <1>
  [227] pusharglistnoret 2 ...................... <pQueue, 1>
  [229] objcall 723 ............................. pQueue.deleteAt(1)
  [232] getprop 1025 ............................ <pConnectionId>
  [235] pusharglist 1 ........................... <pConnectionId>
  [237] extcall 430 ............................. <getMultiuser(pConnectionId)>
  [240] getlocal 0 .............................. <tTask>
  [242] getobjprop 1039 ......................... <tTask.message>
  [245] pusharglistnoret 2 ...................... <getMultiuser(pConnectionId), tTask.message>
  [247] objcall 1042 ............................ getMultiuser(pConnectionId).send(tTask.message)
  [250] getparam 0 .............................. <me>
  [252] pusharglistnoret 1 ...................... <me>
  [254] objcall 1014 ............................ me.next()
  [257] pop 1
  [259] pushint8 1 .............................. <1>
  [261] pusharglistnoret 1 ...................... <1>
  [263] extcall 25 .............................. return 1
  [265] pop 1 ................................... end case
  [267] jmp [295]
  [270] getprop 1027 ............................ <pTimeOutID>
  [273] pushint16 30000 ......................... <30000>
  [276] pushsymb 1018 ........................... <#delayedClosing>
  [279] getparam 0 .............................. <me>
  [281] pusharglist 1 ........................... <me>
  [283] objcall 3 ............................... <me.getID()>
  [285] pusharglist 0 ........................... <>
  [287] extcall 32 .............................. <VOID>
  [289] pushint8 1 .............................. <1>
  [291] pusharglistnoret 6 ...................... <pTimeOutID, 30000, #delayedClosing, me.getID(), VOID, 1>
  [293] extcall 243 ............................. createTimeout(pTimeOutID, 30000, #delayedClosing, me.getID(), VOID, 1)
  [295] ret
end

on binaryDataStored me, tMsg
  [  0] getprop 1028 ............................ <pQueue>
  [  3] pushint8 1 .............................. <1>
  [  5] pusharglist 2 ........................... <pQueue, 1>
  [  7] objcall 54 .............................. <pQueue[1]>
  [  9] setlocal 0 .............................. tTask = pQueue[1]
  [ 11] getlocal 0 .............................. <tTask>
  [ 13] pushsymb 764 ............................ <#callback>
  [ 16] pusharglist 2 ........................... <tTask, #callback>
  [ 18] objcall 54 .............................. <tTask[#callback]>
  [ 20] pusharglist 0 ........................... <>
  [ 22] extcall 32 .............................. <VOID>
  [ 24] nteq .................................... <tTask[#callback] <> VOID>
  [ 25] jmpifz [ 73] ............................ if tTask[#callback] <> VOID then
  [ 28] getlocal 0 .............................. <tTask>
  [ 30] pushsymb 764 ............................ <#callback>
  [ 33] pusharglist 2 ........................... <tTask, #callback>
  [ 35] objcall 54 .............................. <tTask[#callback]>
  [ 37] pusharglist 1 ........................... <tTask[#callback]>
  [ 39] extcall 58 .............................. <getObject(tTask[#callback])>
  [ 41] setlocal 1 .............................. tObject = getObject(tTask[#callback])
  [ 43] getlocal 1 .............................. <tObject>
  [ 45] getobjprop 488 .......................... <tObject.ilk>
  [ 48] pushsymb 661 ............................ <#instance>
  [ 51] eq ...................................... <tObject.ilk = #instance>
  [ 52] jmpifz [ 73] ............................ if tObject.ilk = #instance then
  [ 55] pushsymb 1015 ........................... <#binaryDataStored>
  [ 58] getlocal 1 .............................. <tObject>
  [ 60] getparam 1 .............................. <tMsg>
  [ 62] pushsymb 485 ............................ <#content>
  [ 65] pusharglist 2 ........................... <tMsg, #content>
  [ 67] objcall 31 .............................. <tMsg.getaProp(#content)>
  [ 69] pusharglistnoret 3 ...................... <#binaryDataStored, tObject, tMsg.getaProp(#content)>
  [ 71] extcall 68 .............................. call(#binaryDataStored, tObject, tMsg.getaProp(#content))
  [ 73] getprop 1028 ............................ <pQueue>
  [ 76] pushint8 1 .............................. <1>
  [ 78] pusharglistnoret 2 ...................... <pQueue, 1>
  [ 80] objcall 723 ............................. pQueue.deleteAt(1)
  [ 83] getparam 0 .............................. <me>
  [ 85] pusharglistnoret 1 ...................... <me>
  [ 87] objcall 1014 ............................ me.next()
  [ 90] ret
end

on binaryDataAuthKeyError me
  [  0] getprop 1028 ............................ <pQueue>
  [  3] pushint8 1 .............................. <1>
  [  5] pusharglistnoret 2 ...................... <pQueue, 1>
  [  7] objcall 723 ............................. pQueue.deleteAt(1)
  [ 10] getparam 0 .............................. <me>
  [ 12] pusharglistnoret 1 ...................... <me>
  [ 14] objcall 1014 ............................ me.next()
  [ 17] ret
end

on binaryDataReceived me, tdata
  [  0] getprop 1028 ............................ <pQueue>
  [  3] pushint8 1 .............................. <1>
  [  5] pusharglist 2 ........................... <pQueue, 1>
  [  7] objcall 54 .............................. <pQueue[1]>
  [  9] setlocal 0 .............................. tTask = pQueue[1]
  [ 11] getprop 1028 ............................ <pQueue>
  [ 14] pushint8 1 .............................. <1>
  [ 16] pusharglistnoret 2 ...................... <pQueue, 1>
  [ 18] objcall 723 ............................. pQueue.deleteAt(1)
  [ 21] getlocal 0 .............................. <tTask>
  [ 23] pushsymb 764 ............................ <#callback>
  [ 26] pusharglist 2 ........................... <tTask, #callback>
  [ 28] objcall 54 .............................. <tTask[#callback]>
  [ 30] pusharglist 0 ........................... <>
  [ 32] extcall 32 .............................. <VOID>
  [ 34] nteq .................................... <tTask[#callback] <> VOID>
  [ 35] jmpifz [ 84] ............................ if tTask[#callback] <> VOID then
  [ 38] getlocal 0 .............................. <tTask>
  [ 40] pushsymb 764 ............................ <#callback>
  [ 43] pusharglist 2 ........................... <tTask, #callback>
  [ 45] objcall 54 .............................. <tTask[#callback]>
  [ 47] pusharglist 1 ........................... <tTask[#callback]>
  [ 49] extcall 58 .............................. <getObject(tTask[#callback])>
  [ 51] setlocal 1 .............................. tObject = getObject(tTask[#callback])
  [ 53] getlocal 1 .............................. <tObject>
  [ 55] getobjprop 488 .......................... <tObject.ilk>
  [ 58] pushsymb 661 ............................ <#instance>
  [ 61] eq ...................................... <tObject.ilk = #instance>
  [ 62] jmpifz [ 84] ............................ if tObject.ilk = #instance then
  [ 65] pushsymb 1017 ........................... <#binaryDataReceived>
  [ 68] getlocal 1 .............................. <tObject>
  [ 70] getparam 1 .............................. <tdata>
  [ 72] getlocal 0 .............................. <tTask>
  [ 74] pushsymb 34 ............................. <#id>
  [ 76] pusharglist 2 ........................... <tTask, #id>
  [ 78] objcall 54 .............................. <tTask[#id]>
  [ 80] pusharglistnoret 4 ...................... <#binaryDataReceived, tObject, tdata, tTask[#id]>
  [ 82] extcall 68 .............................. call(#binaryDataReceived, tObject, tdata, tTask[#id])
  [ 84] getparam 0 .............................. <me>
  [ 86] pusharglistnoret 1 ...................... <me>
  [ 88] objcall 1014 ............................ me.next()
  [ 91] ret
end

on delayedClosing me
  [  0] getprop 1025 ............................ <pConnectionId>
  [  3] pusharglist 1 ........................... <pConnectionId>
  [  5] extcall 431 ............................. <multiuserExists(pConnectionId)>
  [  8] getprop 1028 ............................ <pQueue>
  [ 11] pusharglist 1 ........................... <pQueue>
  [ 13] extcall 22 .............................. <count(pQueue)>
  [ 15] pushzero ................................ <0>
  [ 16] eq ...................................... <count(pQueue) = 0>
  [ 17] and ..................................... <multiuserExists(pConnectionId) and (count(pQueue) = 0)>
  [ 18] jmpifz [ 29] ............................ if multiuserExists(pConnectionId) and (count(pQueue) = 0) then
  [ 21] getprop 1025 ............................ <pConnectionId>
  [ 24] pusharglistnoret 1 ...................... <pConnectionId>
  [ 26] extcall 429 ............................. removeMultiuser(pConnectionId)
  [ 29] ret
end

on registerCmds me, tBool
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setlocal 0 .............................. tList = [:]
  [  5] getlocal 0 .............................. <tList>
  [  7] pushcons 9 .............................. <"BINDATA_SAVED">
  [  9] pushsymb 1015 ........................... <#binaryDataStored>
  [ 12] pusharglistnoret 3 ...................... <tList, "BINDATA_SAVED", #binaryDataStored>
  [ 14] objcall 24 .............................. tList["BINDATA_SAVED"] = #binaryDataStored
  [ 16] getlocal 0 .............................. <tList>
  [ 18] pushcons 10 ............................. <"BINDATA_AUTHKEYERROR">
  [ 20] pushsymb 1016 ........................... <#binaryDataAuthKeyError>
  [ 23] pusharglistnoret 3 ...................... <tList, "BINDATA_AUTHKEYERROR", #binaryDataAuthKeyError>
  [ 25] objcall 24 .............................. tList["BINDATA_AUTHKEYERROR"] = #binaryDataAuthKeyError
  [ 27] getlocal 0 .............................. <tList>
  [ 29] pushcons 11 ............................. <"DISCONNECT">
  [ 31] pushsymb 119 ............................ <#deconstruct>
  [ 33] pusharglistnoret 3 ...................... <tList, "DISCONNECT", #deconstruct>
  [ 35] objcall 24 .............................. tList["DISCONNECT"] = #deconstruct
  [ 37] getlocal 0 .............................. <tList>
  [ 39] pushcons 12 ............................. <"HELLO">
  [ 41] pushsymb 1021 ........................... <#helloReply>
  [ 44] pusharglistnoret 3 ...................... <tList, "HELLO", #helloReply>
  [ 46] objcall 24 .............................. tList["HELLO"] = #helloReply
  [ 48] getlocal 0 .............................. <tList>
  [ 50] pushcons 13 ............................. <"U_RTS">
  [ 52] pushsymb 1020 ........................... <#foo>
  [ 55] pusharglistnoret 3 ...................... <tList, "U_RTS", #foo>
  [ 57] objcall 24 .............................. tList["U_RTS"] = #foo
  [ 59] getparam 1 .............................. <tBool>
  [ 61] jmpifz [ 91] ............................ if tBool then / else
  [ 64] pusharglist 0 ........................... <>
  [ 66] extcall 427 ............................. <getMultiuserManager()>
  [ 69] getprop 1025 ............................ <pConnectionId>
  [ 72] getparam 0 .............................. <me>
  [ 74] pusharglist 1 ........................... <me>
  [ 76] objcall 3 ............................... <me.getID()>
  [ 78] getlocal 0 .............................. <tList>
  [ 80] pusharglist 4 ........................... <getMultiuserManager(), pConnectionId, me.getID(), tList>
  [ 82] objcall 219 ............................. <getMultiuserManager().registerListener(pConnectionId, me.getID(), tList)>
  [ 84] pusharglistnoret 1 ...................... <getMultiuserManager().registerListener(pConnectionId, me.getID(), tList)>
  [ 86] extcall 25 .............................. return getMultiuserManager().registerListener(pConnectionId, me.getID(), tList)
  [ 88] jmp [115]
  [ 91] pusharglist 0 ........................... <>
  [ 93] extcall 427 ............................. <getMultiuserManager()>
  [ 96] getprop 1025 ............................ <pConnectionId>
  [ 99] getparam 0 .............................. <me>
  [101] pusharglist 1 ........................... <me>
  [103] objcall 3 ............................... <me.getID()>
  [105] getlocal 0 .............................. <tList>
  [107] pusharglist 4 ........................... <getMultiuserManager(), pConnectionId, me.getID(), tList>
  [109] objcall 220 ............................. <getMultiuserManager().unregisterListener(pConnectionId, me.getID(), tList)>
  [111] pusharglistnoret 1 ...................... <getMultiuserManager().unregisterListener(pConnectionId, me.getID(), tList)>
  [113] extcall 25 .............................. return getMultiuserManager().unregisterListener(pConnectionId, me.getID(), tList)
  [115] ret
end

on foo me
  [  0] ret
end

on helloReply me, tMsg
  [  0] getparam 1 .............................. <tMsg>
  [  2] pushsymb 485 ............................ <#content>
  [  5] pusharglist 2 ........................... <tMsg, #content>
  [  7] objcall 54 .............................. <tMsg[#content]>
  [  9] setlocal 0 .............................. tSecretKey = tMsg[#content]
  [ 11] getlocal 0 .............................. <tSecretKey>
  [ 13] pusharglist 1 ........................... <tSecretKey>
  [ 15] extcall 955 ............................. <integer(tSecretKey)>
  [ 18] setlocal 0 .............................. tSecretKey = integer(tSecretKey)
  [ 20] getlocal 0 .............................. <tSecretKey>
  [ 22] pusharglist 1 ........................... <tSecretKey>
  [ 24] extcall 20 .............................. <voidp(tSecretKey)>
  [ 26] getlocal 0 .............................. <tSecretKey>
  [ 28] pushcons 14 ............................. <EMPTY>
  [ 30] eq ...................................... <tSecretKey = EMPTY>
  [ 31] or ...................................... <voidp(tSecretKey) or (tSecretKey = EMPTY)>
  [ 32] getlocal 0 .............................. <tSecretKey>
  [ 34] pushzero ................................ <0>
  [ 35] eq ...................................... <tSecretKey = 0>
  [ 36] or ...................................... <voidp(tSecretKey) or (tSecretKey = EMPTY) or (tSecretKey = 0)>
  [ 37] jmpifz [ 47] ............................ if voidp(tSecretKey) or (tSecretKey = EMPTY) or (tSecretKey = 0) then / else
  [ 40] pushzero ................................ <0>
  [ 41] setprop 1030 ............................ pUseCrypto = 0
  [ 44] jmp [ 65]
  [ 47] getprop 1029 ............................ <pCrypto>
  [ 50] getlocal 0 .............................. <tSecretKey>
  [ 52] pushsymb 1049 ........................... <#initPremix>
  [ 55] pusharglistnoret 3 ...................... <pCrypto, tSecretKey, #initPremix>
  [ 57] objcall 1050 ............................ pCrypto.setKey(tSecretKey, #initPremix)
  [ 60] pushint8 1 .............................. <1>
  [ 62] setprop 1030 ............................ pUseCrypto = 1
  [ 65] pushint8 1 .............................. <1>
  [ 67] setprop 1031 ............................ pHandshakeFinished = 1
  [ 70] ret
end

on handlers
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] pusharglistnoret 1 ...................... <[]>
  [  5] extcall 25 .............................. return []
  [  7] ret
end
