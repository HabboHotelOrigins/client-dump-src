property pAllMemNumList, pDynMemNumList, pBmpMemNumList, pLegalDuplicates, pBin

on construct me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 714 ............................. pAllMemNumList = [:]
  [  6] getprop 714 ............................. <pAllMemNumList>
  [  9] pusharglistnoret 1 ...................... <pAllMemNumList>
  [ 11] objcall 640 ............................. pAllMemNumList.sort()
  [ 14] pusharglist 0 ........................... <[]>
  [ 16] pushlist ................................ <[]>
  [ 17] setprop 715 ............................. pDynMemNumList = []
  [ 20] getprop 715 ............................. <pDynMemNumList>
  [ 23] pusharglistnoret 1 ...................... <pDynMemNumList>
  [ 25] objcall 640 ............................. pDynMemNumList.sort()
  [ 28] pusharglist 0 ........................... <[]>
  [ 30] pushlist ................................ <[]>
  [ 31] setprop 716 ............................. pBmpMemNumList = []
  [ 34] getprop 716 ............................. <pBmpMemNumList>
  [ 37] pusharglistnoret 1 ...................... <pBmpMemNumList>
  [ 39] objcall 640 ............................. pBmpMemNumList.sort()
  [ 42] pushcons 0 .............................. <"dynamic.bin.cast">
  [ 44] pushcons 1 .............................. <"bin">
  [ 46] pusharglist 2 ........................... <"dynamic.bin.cast", "bin">
  [ 48] extcall 372 ............................. <getVariable("dynamic.bin.cast", "bin")>
  [ 51] setprop 717 ............................. pBin = getVariable("dynamic.bin.cast", "bin")
  [ 54] pusharglist 0 ........................... <[]>
  [ 56] pushlist ................................ <[]>
  [ 57] setprop 718 ............................. pLegalDuplicates = []
  [ 60] getprop 718 ............................. <pLegalDuplicates>
  [ 63] pushcons 2 .............................. <"thread.index.field">
  [ 65] pusharglist 1 ........................... <"thread.index.field">
  [ 67] extcall 372 ............................. <getVariable("thread.index.field")>
  [ 70] pusharglistnoret 2 ...................... <pLegalDuplicates, getVariable("thread.index.field")>
  [ 72] objcall 122 ............................. pLegalDuplicates.add(getVariable("thread.index.field"))
  [ 74] getprop 718 ............................. <pLegalDuplicates>
  [ 77] pushcons 3 .............................. <"alias.index.field">
  [ 79] pusharglist 1 ........................... <"alias.index.field">
  [ 81] extcall 372 ............................. <getVariable("alias.index.field")>
  [ 84] pusharglistnoret 2 ...................... <pLegalDuplicates, getVariable("alias.index.field")>
  [ 86] objcall 122 ............................. pLegalDuplicates.add(getVariable("alias.index.field"))
  [ 88] getprop 718 ............................. <pLegalDuplicates>
  [ 91] pushcons 4 .............................. <"texts.index.field">
  [ 93] pusharglist 1 ........................... <"texts.index.field">
  [ 95] extcall 372 ............................. <getVariable("texts.index.field")>
  [ 98] pusharglistnoret 2 ...................... <pLegalDuplicates, getVariable("texts.index.field")>
  [100] objcall 122 ............................. pLegalDuplicates.add(getVariable("texts.index.field"))
  [102] getprop 718 ............................. <pLegalDuplicates>
  [105] pushcons 5 .............................. <"props.index.field">
  [107] pusharglist 1 ........................... <"props.index.field">
  [109] extcall 372 ............................. <getVariable("props.index.field")>
  [112] pusharglistnoret 2 ...................... <pLegalDuplicates, getVariable("props.index.field")>
  [114] objcall 122 ............................. pLegalDuplicates.add(getVariable("props.index.field"))
  [116] getmovieprop 82 ......................... <the runMode>
  [118] pushcons 6 .............................. <"Author">
  [120] containsstr ............................. <the runMode contains "Author">
  [121] jmpifz [131] ............................ if the runMode contains "Author" then
  [124] getparam 0 .............................. <me>
  [126] pusharglistnoret 1 ...................... <me>
  [128] objcall 712 ............................. me.emptyDynamicBin()
  [131] pushint8 1 .............................. <1>
  [133] pusharglistnoret 1 ...................... <1>
  [135] extcall 25 .............................. return 1
  [137] ret
end

on deconstruct me
  [  0] getmovieprop 82 ......................... <the runMode>
  [  2] pushcons 6 .............................. <"Author">
  [  4] containsstr ............................. <the runMode contains "Author">
  [  5] jmpifz [ 15] ............................ if the runMode contains "Author" then
  [  8] getparam 0 .............................. <me>
  [ 10] pusharglistnoret 1 ...................... <me>
  [ 12] objcall 713 ............................. me.deleteDynamicMembers()
  [ 15] pusharglist 0 ........................... <[:]>
  [ 17] pushproplist ............................ <[:]>
  [ 18] setprop 714 ............................. pAllMemNumList = [:]
  [ 21] pushint8 1 .............................. <1>
  [ 23] pusharglistnoret 1 ...................... <1>
  [ 25] extcall 25 .............................. return 1
  [ 27] ret
end

on getProperty me, tPropID
  [  0] getparam 1 .............................. <tPropID>
  [  2] peek 0 .................................. case tPropID of
  [  4] pushsymb 719 ............................ <#memberCount>
  [  7] eq
  [  8] jmpifz [ 27] ............................ (case) #memberCount:
  [ 11] pop 1
  [ 13] getprop 714 ............................. <pAllMemNumList>
  [ 16] pusharglist 1 ........................... <pAllMemNumList>
  [ 18] objcall 22 .............................. <pAllMemNumList.count()>
  [ 20] pusharglistnoret 1 ...................... <pAllMemNumList.count()>
  [ 22] extcall 25 .............................. return pAllMemNumList.count()
  [ 24] jmp [ 59]
  [ 27] peek 0
  [ 29] pushsymb 720 ............................ <#dynMemCount>
  [ 32] eq
  [ 33] jmpifz [ 52] ............................ (case) #dynMemCount:
  [ 36] pop 1
  [ 38] getprop 715 ............................. <pDynMemNumList>
  [ 41] pusharglist 1 ........................... <pDynMemNumList>
  [ 43] objcall 22 .............................. <pDynMemNumList.count()>
  [ 45] pusharglistnoret 1 ...................... <pDynMemNumList.count()>
  [ 47] extcall 25 .............................. return pDynMemNumList.count()
  [ 49] jmp [ 59] ............................... (case) otherwise:
  [ 52] pop 1
  [ 54] pushzero ................................ <0>
  [ 55] pusharglistnoret 1 ...................... <0>
  [ 57] extcall 25 .............................. return 0
  [ 59] pop 1 ................................... end case
  [ 61] ret
end

on setProperty me, tPropID, tValue
  [  0] getparam 1 .............................. <tPropID>
  [  2] jmp [ 12] ............................... case tPropID of / otherwise:
  [  5] pop 1
  [  7] pushzero ................................ <0>
  [  8] pusharglistnoret 1 ...................... <0>
  [ 10] extcall 25 .............................. return 0
  [ 12] pop 1 ................................... end case
  [ 14] ret
end

on createMember me, tMemName, ttype
  [  0] getprop 714 ............................. <pAllMemNumList>
  [  3] getparam 1 .............................. <tMemName>
  [  5] pusharglist 2 ........................... <pAllMemNumList, tMemName>
  [  7] objcall 54 .............................. <pAllMemNumList[tMemName]>
  [  9] pusharglist 1 ........................... <pAllMemNumList[tMemName]>
  [ 11] extcall 20 .............................. <voidp(pAllMemNumList[tMemName])>
  [ 13] not ..................................... <not voidp(pAllMemNumList[tMemName])>
  [ 14] jmpifz [ 42] ............................ if not voidp(pAllMemNumList[tMemName]) then
  [ 17] getparam 0 .............................. <me>
  [ 19] pushcons 7 .............................. <"Member already exists:">
  [ 21] getparam 1 .............................. <tMemName>
  [ 23] joinpadstr .............................. <"Member already exists:" && tMemName>
  [ 24] pushsymb 164 ............................ <#createMember>
  [ 26] pusharglistnoret 3 ...................... <me, "Member already exists:" && tMemName, #createMember>
  [ 28] extcall 39 .............................. error(me, "Member already exists:" && tMemName, #createMember)
  [ 30] getparam 0 .............................. <me>
  [ 32] getparam 1 .............................. <tMemName>
  [ 34] pusharglist 2 ........................... <me, tMemName>
  [ 36] objcall 52 .............................. <me.getmemnum(tMemName)>
  [ 38] pusharglistnoret 1 ...................... <me.getmemnum(tMemName)>
  [ 40] extcall 25 .............................. return me.getmemnum(tMemName)
  [ 42] getparam 2 .............................. <ttype>
  [ 44] pushsymb 722 ............................ <#bitmap>
  [ 47] eq ...................................... <ttype = #bitmap>
  [ 48] getprop 716 ............................. <pBmpMemNumList>
  [ 51] getobjprop 22 ........................... <pBmpMemNumList.count>
  [ 53] pushzero ................................ <0>
  [ 54] gt ...................................... <pBmpMemNumList.count > 0>
  [ 55] and ..................................... <(ttype = #bitmap) and (pBmpMemNumList.count > 0)>
  [ 56] jmpifz [ 87] ............................ if (ttype = #bitmap) and (pBmpMemNumList.count > 0) then / else
  [ 59] getprop 716 ............................. <pBmpMemNumList>
  [ 62] pushint8 1 .............................. <1>
  [ 64] pusharglist 2 ........................... <pBmpMemNumList, 1>
  [ 66] objcall 54 .............................. <pBmpMemNumList[1]>
  [ 68] pusharglist 1 ........................... <pBmpMemNumList[1]>
  [ 70] extcall 41 .............................. <member(pBmpMemNumList[1])>
  [ 72] setlocal 0 .............................. tmember = member(pBmpMemNumList[1])
  [ 74] getprop 716 ............................. <pBmpMemNumList>
  [ 77] pushint8 1 .............................. <1>
  [ 79] pusharglistnoret 2 ...................... <pBmpMemNumList, 1>
  [ 81] objcall 723 ............................. pBmpMemNumList.deleteAt(1)
  [ 84] jmp [136]
  [ 87] getparam 2 .............................. <ttype>
  [ 89] getprop 717 ............................. <pBin>
  [ 92] pusharglist 1 ........................... <pBin>
  [ 94] extcall 724 ............................. <castLib(pBin)>
  [ 97] pusharglist 2 ........................... <ttype, castLib(pBin)>
  [ 99] extcall 116 ............................. <new(ttype, castLib(pBin))>
  [101] setlocal 0 .............................. tmember = new(ttype, castLib(pBin))
  [103] getlocal 0 .............................. <tmember>
  [105] pushsymb 41 ............................. <#member>
  [107] pusharglist 2 ........................... <tmember, #member>
  [109] extcall 488 ............................. <ilk(tmember, #member)>
  [112] not ..................................... <not ilk(tmember, #member)>
  [113] jmpifz [136] ............................ if not ilk(tmember, #member) then
  [116] getparam 0 .............................. <me>
  [118] pushcons 8 .............................. <"Failed to create member:">
  [120] getparam 1 .............................. <tMemName>
  [122] joinpadstr .............................. <"Failed to create member:" && tMemName>
  [123] getparam 2 .............................. <ttype>
  [125] joinpadstr .............................. <"Failed to create member:" && tMemName && ttype>
  [126] pushsymb 164 ............................ <#createMember>
  [128] pusharglist 3 ........................... <me, "Failed to create member:" && tMemName && ttype, #createMember>
  [130] extcall 39 .............................. <error(me, "Failed to create member:" && tMemName && ttype, #createMember)>
  [132] pusharglistnoret 1 ...................... <error(me, "Failed to create member:" && tMemName && ttype, #createMember)>
  [134] extcall 25 .............................. return error(me, "Failed to create member:" && tMemName && ttype, #createMember)
  [136] getlocal 0 .............................. <tmember>
  [138] getparam 1 .............................. <tMemName>
  [140] setobjprop 725 .......................... tmember.name = tMemName
  [143] getlocal 0 .............................. <tmember>
  [145] getobjprop 658 .......................... <tmember.number>
  [148] setlocal 1 .............................. tMemNum = tmember.number
  [150] getprop 714 ............................. <pAllMemNumList>
  [153] getparam 1 .............................. <tMemName>
  [155] getlocal 1 .............................. <tMemNum>
  [157] pusharglistnoret 3 ...................... <pAllMemNumList, tMemName, tMemNum>
  [159] objcall 24 .............................. pAllMemNumList[tMemName] = tMemNum
  [161] getprop 715 ............................. <pDynMemNumList>
  [164] getlocal 1 .............................. <tMemNum>
  [166] pusharglistnoret 2 ...................... <pDynMemNumList, tMemNum>
  [168] objcall 122 ............................. pDynMemNumList.add(tMemNum)
  [170] getlocal 1 .............................. <tMemNum>
  [172] pusharglistnoret 1 ...................... <tMemNum>
  [174] extcall 25 .............................. return tMemNum
  [176] ret
end

on removeMember me, tMemName
  [  0] getprop 714 ............................. <pAllMemNumList>
  [  3] getparam 1 .............................. <tMemName>
  [  5] pusharglist 2 ........................... <pAllMemNumList, tMemName>
  [  7] objcall 54 .............................. <pAllMemNumList[tMemName]>
  [  9] setlocal 0 .............................. tMemNum = pAllMemNumList[tMemName]
  [ 11] getprop 715 ............................. <pDynMemNumList>
  [ 14] getlocal 0 .............................. <tMemNum>
  [ 16] pusharglist 2 ........................... <pDynMemNumList, tMemNum>
  [ 18] objcall 517 ............................. <pDynMemNumList.getPos(tMemNum)>
  [ 21] pushint8 1 .............................. <1>
  [ 23] lt ...................................... <pDynMemNumList.getPos(tMemNum) < 1>
  [ 24] jmpifz [ 44] ............................ if pDynMemNumList.getPos(tMemNum) < 1 then
  [ 27] getparam 0 .............................. <me>
  [ 29] pushcons 9 .............................. <"Can't delete member:">
  [ 31] getparam 1 .............................. <tMemName>
  [ 33] joinpadstr .............................. <"Can't delete member:" && tMemName>
  [ 34] pushsymb 165 ............................ <#removeMember>
  [ 36] pusharglist 3 ........................... <me, "Can't delete member:" && tMemName, #removeMember>
  [ 38] extcall 39 .............................. <error(me, "Can't delete member:" && tMemName, #removeMember)>
  [ 40] pusharglistnoret 1 ...................... <error(me, "Can't delete member:" && tMemName, #removeMember)>
  [ 42] extcall 25 .............................. return error(me, "Can't delete member:" && tMemName, #removeMember)
  [ 44] getlocal 0 .............................. <tMemNum>
  [ 46] pusharglist 1 ........................... <tMemNum>
  [ 48] extcall 41 .............................. <member(tMemNum)>
  [ 50] setlocal 1 .............................. tmember = member(tMemNum)
  [ 52] getlocal 1 .............................. <tmember>
  [ 54] getobjprop 454 .......................... <tmember.type>
  [ 57] pushsymb 722 ............................ <#bitmap>
  [ 60] eq ...................................... <tmember.type = #bitmap>
  [ 61] jmpifz [ 83] ............................ if tmember.type = #bitmap then / else
  [ 64] getlocal 1 .............................. <tmember>
  [ 66] pushcons 10 ............................. <EMPTY>
  [ 68] setobjprop 725 .......................... tmember.name = EMPTY
  [ 71] getprop 716 ............................. <pBmpMemNumList>
  [ 74] getlocal 0 .............................. <tMemNum>
  [ 76] pusharglistnoret 2 ...................... <pBmpMemNumList, tMemNum>
  [ 78] objcall 122 ............................. pBmpMemNumList.add(tMemNum)
  [ 80] jmp [ 90]
  [ 83] getlocal 1 .............................. <tmember>
  [ 85] pusharglistnoret 1 ...................... <tmember>
  [ 87] objcall 726 ............................. tmember.erase()
  [ 90] getprop 715 ............................. <pDynMemNumList>
  [ 93] getlocal 0 .............................. <tMemNum>
  [ 95] pusharglistnoret 2 ...................... <pDynMemNumList, tMemNum>
  [ 97] objcall 527 ............................. pDynMemNumList.deleteOne(tMemNum)
  [100] getprop 714 ............................. <pAllMemNumList>
  [103] getparam 1 .............................. <tMemName>
  [105] pusharglistnoret 2 ...................... <pAllMemNumList, tMemName>
  [107] objcall 659 ............................. pAllMemNumList.deleteProp(tMemName)
  [110] pushint8 1 .............................. <1>
  [112] pusharglistnoret 1 ...................... <1>
  [114] extcall 25 .............................. return 1
  [116] ret
end

on getMember me, tMemName
  [  0] getprop 714 ............................. <pAllMemNumList>
  [  3] getparam 1 .............................. <tMemName>
  [  5] pusharglist 2 ........................... <pAllMemNumList, tMemName>
  [  7] objcall 54 .............................. <pAllMemNumList[tMemName]>
  [  9] setlocal 0 .............................. tMemNum = pAllMemNumList[tMemName]
  [ 11] getlocal 0 .............................. <tMemNum>
  [ 13] pusharglist 1 ........................... <tMemNum>
  [ 15] extcall 20 .............................. <voidp(tMemNum)>
  [ 17] jmpifz [ 23] ............................ if voidp(tMemNum) then
  [ 20] pushzero ................................ <0>
  [ 21] setlocal 0 .............................. tMemNum = 0
  [ 23] getlocal 0 .............................. <tMemNum>
  [ 25] pusharglist 1 ........................... <tMemNum>
  [ 27] extcall 41 .............................. <member(tMemNum)>
  [ 29] pusharglistnoret 1 ...................... <member(tMemNum)>
  [ 31] extcall 25 .............................. return member(tMemNum)
  [ 33] ret
end

on updateMember me, tMemName
  [  0] getparam 1 .............................. <tMemName>
  [  2] getobjprop 488 .......................... <tMemName.ilk>
  [  5] pushsymb 593 ............................ <#string>
  [  8] nteq .................................... <tMemName.ilk <> #string>
  [  9] jmpifz [ 29] ............................ if tMemName.ilk <> #string then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 11 ............................. <"Member's name required:">
  [ 16] getparam 1 .............................. <tMemName>
  [ 18] joinpadstr .............................. <"Member's name required:" && tMemName>
  [ 19] pushsymb 166 ............................ <#updateMember>
  [ 21] pusharglist 3 ........................... <me, "Member's name required:" && tMemName, #updateMember>
  [ 23] extcall 39 .............................. <error(me, "Member's name required:" && tMemName, #updateMember)>
  [ 25] pusharglistnoret 1 ...................... <error(me, "Member's name required:" && tMemName, #updateMember)>
  [ 27] extcall 25 .............................. return error(me, "Member's name required:" && tMemName, #updateMember)
  [ 29] getparam 0 .............................. <me>
  [ 31] getparam 1 .............................. <tMemName>
  [ 33] pusharglist 2 ........................... <me, tMemName>
  [ 35] objcall 168 ............................. <me.unregisterMember(tMemName)>
  [ 37] not ..................................... <not me.unregisterMember(tMemName)>
  [ 38] jmpifz [ 46] ............................ if not me.unregisterMember(tMemName) then
  [ 41] pushzero ................................ <0>
  [ 42] pusharglistnoret 1 ...................... <0>
  [ 44] extcall 25 .............................. return 0
  [ 46] getparam 0 .............................. <me>
  [ 48] getparam 1 .............................. <tMemName>
  [ 50] pusharglist 2 ........................... <me, tMemName>
  [ 52] objcall 167 ............................. <me.registerMember(tMemName)>
  [ 54] not ..................................... <not me.registerMember(tMemName)>
  [ 55] jmpifz [ 63] ............................ if not me.registerMember(tMemName) then
  [ 58] pushzero ................................ <0>
  [ 59] pusharglistnoret 1 ...................... <0>
  [ 61] extcall 25 .............................. return 0
  [ 63] pushint8 1 .............................. <1>
  [ 65] pusharglistnoret 1 ...................... <1>
  [ 67] extcall 25 .............................. return 1
  [ 69] ret
end

on registerMember me, tMemName, tMemberNum
  [  0] getparam 2 .............................. <tMemberNum>
  [  2] pusharglist 1 ........................... <tMemberNum>
  [  4] extcall 20 .............................. <voidp(tMemberNum)>
  [  6] jmpifz [ 20] ............................ if voidp(tMemberNum) then
  [  9] getparam 1 .............................. <tMemName>
  [ 11] pusharglist 1 ........................... <tMemName>
  [ 13] extcall 41 .............................. <member(tMemName)>
  [ 15] getobjprop 658 .......................... <member(tMemName).number>
  [ 18] setparam 2 .............................. tMemberNum = member(tMemName).number
  [ 20] getparam 2 .............................. <tMemberNum>
  [ 22] pushint8 1 .............................. <1>
  [ 24] lt ...................................... <tMemberNum < 1>
  [ 25] jmpifz [ 33] ............................ if tMemberNum < 1 then
  [ 28] pushzero ................................ <0>
  [ 29] pusharglistnoret 1 ...................... <0>
  [ 31] extcall 25 .............................. return 0
  [ 33] getprop 714 ............................. <pAllMemNumList>
  [ 36] getparam 1 .............................. <tMemName>
  [ 38] getparam 2 .............................. <tMemberNum>
  [ 40] pusharglistnoret 3 ...................... <pAllMemNumList, tMemName, tMemberNum>
  [ 42] objcall 24 .............................. pAllMemNumList[tMemName] = tMemberNum
  [ 44] getparam 2 .............................. <tMemberNum>
  [ 46] pusharglistnoret 1 ...................... <tMemberNum>
  [ 48] extcall 25 .............................. return tMemberNum
  [ 50] ret
end

on unregisterMember me, tMemName
  [  0] getprop 714 ............................. <pAllMemNumList>
  [  3] getparam 1 .............................. <tMemName>
  [  5] pusharglist 2 ........................... <pAllMemNumList, tMemName>
  [  7] objcall 54 .............................. <pAllMemNumList[tMemName]>
  [  9] pusharglist 1 ........................... <pAllMemNumList[tMemName]>
  [ 11] extcall 20 .............................. <voidp(pAllMemNumList[tMemName])>
  [ 13] jmpifz [ 21] ............................ if voidp(pAllMemNumList[tMemName]) then
  [ 16] pushzero ................................ <0>
  [ 17] pusharglistnoret 1 ...................... <0>
  [ 19] extcall 25 .............................. return 0
  [ 21] getprop 714 ............................. <pAllMemNumList>
  [ 24] getparam 1 .............................. <tMemName>
  [ 26] pusharglistnoret 2 ...................... <pAllMemNumList, tMemName>
  [ 28] objcall 659 ............................. pAllMemNumList.deleteProp(tMemName)
  [ 31] pushint8 1 .............................. <1>
  [ 33] pusharglistnoret 1 ...................... <1>
  [ 35] extcall 25 .............................. return 1
  [ 37] ret
end

on preIndexMembers me, tCastNum
  [  0] getparam 1 .............................. <tCastNum>
  [  2] pusharglist 1 ........................... <tCastNum>
  [  4] extcall 681 ............................. <integerp(tCastNum)>
  [  7] jmpifz [ 21] ............................ if integerp(tCastNum) then / else
  [ 10] getparam 1 .............................. <tCastNum>
  [ 12] setlocal 0 .............................. tFirstCast = tCastNum
  [ 14] getparam 1 .............................. <tCastNum>
  [ 16] setlocal 1 .............................. tLastCast = tCastNum
  [ 18] jmp [ 45]
  [ 21] pusharglist 0 ........................... <[:]>
  [ 23] pushproplist ............................ <[:]>
  [ 24] setprop 714 ............................. pAllMemNumList = [:]
  [ 27] getprop 714 ............................. <pAllMemNumList>
  [ 30] pusharglistnoret 1 ...................... <pAllMemNumList>
  [ 32] objcall 640 ............................. pAllMemNumList.sort()
  [ 35] pushint8 1 .............................. <1>
  [ 37] setlocal 0 .............................. tFirstCast = 1
  [ 39] pushint8 4 .............................. <4>
  [ 41] get 8 ................................... <the number of castLibs>
  [ 43] setlocal 1 .............................. tLastCast = the number of castLibs
  [ 45] pushcons 12 ............................. <"duplicate.name.alert">
  [ 47] pusharglist 1 ........................... <"duplicate.name.alert">
  [ 49] extcall 373 ............................. <getIntVariable("duplicate.name.alert")>
  [ 52] setlocal 2 .............................. tNameAlertFlag = getIntVariable("duplicate.name.alert")
  [ 54] getlocal 0 .............................. <tFirstCast>
  [ 56] setlocal 3
  [ 58] getlocal 3
  [ 60] getlocal 1 .............................. <tLastCast>
  [ 62] lteq
  [ 63] jmpifz [642] ............................ repeat with tCastLib = tFirstCast to tLastCast
  [ 66] getlocal 3 .............................. <tCastLib>
  [ 68] pushint8 2 .............................. <2>
  [ 70] get 8 ................................... <the number of castMembers of castLib tCastLib>
  [ 72] setlocal 4 .............................. tMemberCount = the number of castMembers of castLib tCastLib
  [ 74] pushint8 1 .............................. <1>
  [ 76] setlocal 5
  [ 78] getlocal 5
  [ 80] getlocal 4 .............................. <tMemberCount>
  [ 82] lteq
  [ 83] jmpifz [301] ............................ repeat with i = 1 to tMemberCount
  [ 86] getlocal 5 .............................. <i>
  [ 88] getlocal 3 .............................. <tCastLib>
  [ 90] pusharglist 2 ........................... <i, tCastLib>
  [ 92] extcall 41 .............................. <member(i, tCastLib)>
  [ 94] setlocal 6 .............................. tmember = member(i, tCastLib)
  [ 96] getlocal 6 .............................. <tmember>
  [ 98] getobjprop 725 .......................... <tmember.name>
  [101] pusharglist 1 ........................... <tmember.name>
  [103] extcall 293 ............................. <length(tmember.name)>
  [106] pushzero ................................ <0>
  [107] gt ...................................... <length(tmember.name) > 0>
  [108] jmpifz [292] ............................ if length(tmember.name) > 0 then
  [111] getlocal 2 .............................. <tNameAlertFlag>
  [113] jmpifz [275] ............................ if tNameAlertFlag then
  [116] getprop 714 ............................. <pAllMemNumList>
  [119] getlocal 6 .............................. <tmember>
  [121] getobjprop 725 .......................... <tmember.name>
  [124] pusharglist 2 ........................... <pAllMemNumList, tmember.name>
  [126] objcall 54 .............................. <pAllMemNumList[tmember.name]>
  [128] pusharglist 1 ........................... <pAllMemNumList[tmember.name]>
  [130] extcall 20 .............................. <voidp(pAllMemNumList[tmember.name])>
  [132] not ..................................... <not voidp(pAllMemNumList[tmember.name])>
  [133] jmpifz [275] ............................ if not voidp(pAllMemNumList[tmember.name]) then
  [136] getprop 718 ............................. <pLegalDuplicates>
  [139] getlocal 6 .............................. <tmember>
  [141] getobjprop 725 .......................... <tmember.name>
  [144] pusharglist 2 ........................... <pLegalDuplicates, tmember.name>
  [146] objcall 517 ............................. <pLegalDuplicates.getPos(tmember.name)>
  [149] pushzero ................................ <0>
  [150] eq ...................................... <pLegalDuplicates.getPos(tmember.name) = 0>
  [151] jmpifz [275] ............................ if pLegalDuplicates.getPos(tmember.name) = 0 then
  [154] getprop 714 ............................. <pAllMemNumList>
  [157] getlocal 6 .............................. <tmember>
  [159] getobjprop 725 .......................... <tmember.name>
  [162] pusharglist 2 ........................... <pAllMemNumList, tmember.name>
  [164] objcall 54 .............................. <pAllMemNumList[tmember.name]>
  [166] getlocal 6 .............................. <tmember>
  [168] getobjprop 658 .......................... <tmember.number>
  [171] nteq .................................... <pAllMemNumList[tmember.name] <> tmember.number>
  [172] jmpifz [275] ............................ if pAllMemNumList[tmember.name] <> tmember.number then
  [175] getprop 714 ............................. <pAllMemNumList>
  [178] getlocal 6 .............................. <tmember>
  [180] getobjprop 725 .......................... <tmember.name>
  [183] pusharglist 2 ........................... <pAllMemNumList, tmember.name>
  [185] objcall 54 .............................. <pAllMemNumList[tmember.name]>
  [187] pusharglist 1 ........................... <pAllMemNumList[tmember.name]>
  [189] extcall 41 .............................. <member(pAllMemNumList[tmember.name])>
  [191] setlocal 7 .............................. tMemA = member(pAllMemNumList[tmember.name])
  [193] getlocal 6 .............................. <tmember>
  [195] setlocal 8 .............................. tMemB = tmember
  [197] getlocal 7 .............................. <tMemA>
  [199] getobjprop 725 .......................... <tMemA.name>
  [202] pushcons 10 ............................. <EMPTY>
  [204] nteq .................................... <tMemA.name <> EMPTY>
  [205] getlocal 8 .............................. <tMemB>
  [207] getobjprop 725 .......................... <tMemB.name>
  [210] pushcons 10 ............................. <EMPTY>
  [212] nteq .................................... <tMemB.name <> EMPTY>
  [213] and ..................................... <(tMemA.name <> EMPTY) and (tMemB.name <> EMPTY)>
  [214] jmpifz [275] ............................ if (tMemA.name <> EMPTY) and (tMemB.name <> EMPTY) then
  [217] getlocal 7 .............................. <tMemA>
  [219] getobjprop 694 .......................... <tMemA.castLibNum>
  [222] pusharglist 1 ........................... <tMemA.castLibNum>
  [224] extcall 724 ............................. <castLib(tMemA.castLibNum)>
  [227] getobjprop 725 .......................... <castLib(tMemA.castLibNum).name>
  [230] setlocal 9 .............................. tLibA = castLib(tMemA.castLibNum).name
  [232] getlocal 8 .............................. <tMemB>
  [234] getobjprop 694 .......................... <tMemB.castLibNum>
  [237] pusharglist 1 ........................... <tMemB.castLibNum>
  [239] extcall 724 ............................. <castLib(tMemB.castLibNum)>
  [242] getobjprop 725 .......................... <castLib(tMemB.castLibNum).name>
  [245] setlocal 10 ............................. tLibB = castLib(tMemB.castLibNum).name
  [247] getparam 0 .............................. <me>
  [249] pushcons 13 ............................. <"Duplicate member names:">
  [251] getlocal 6 .............................. <tmember>
  [253] getobjprop 725 .......................... <tmember.name>
  [256] joinpadstr .............................. <"Duplicate member names:" && tmember.name>
  [257] pushcons 14 ............................. <"/">
  [259] joinpadstr .............................. <"Duplicate member names:" && tmember.name && "/">
  [260] getlocal 9 .............................. <tLibA>
  [262] joinpadstr .............................. <"Duplicate member names:" && tmember.name && "/" && tLibA>
  [263] pushcons 14 ............................. <"/">
  [265] joinpadstr .............................. <"Duplicate member names:" && tmember.name && "/" && tLibA && "/">
  [266] getlocal 10 ............................. <tLibB>
  [268] joinpadstr .............................. <"Duplicate member names:" && tmember.name && "/" && tLibA && "/" && tLibB>
  [269] pushsymb 77 ............................. <#preIndexMembers>
  [271] pusharglistnoret 3 ...................... <me, "Duplicate member names:" && tmember.name && "/" && tLibA && "/" && tLibB, #preIndexMembers>
  [273] extcall 39 .............................. error(me, "Duplicate member names:" && tmember.name && "/" && tLibA && "/" && tLibB, #preIndexMembers)
  [275] getprop 714 ............................. <pAllMemNumList>
  [278] getlocal 6 .............................. <tmember>
  [280] getobjprop 725 .......................... <tmember.name>
  [283] getlocal 6 .............................. <tmember>
  [285] getobjprop 658 .......................... <tmember.number>
  [288] pusharglistnoret 3 ...................... <pAllMemNumList, tmember.name, tmember.number>
  [290] objcall 24 .............................. pAllMemNumList[tmember.name] = tmember.number
  [292] pushint8 1
  [294] getlocal 5
  [296] add
  [297] setlocal 5
  [299] endrepeat [ 78]
  [301] pushcons 5 .............................. <"props.index.field">
  [303] pusharglist 1 ........................... <"props.index.field">
  [305] extcall 372 ............................. <getVariable("props.index.field")>
  [308] setlocal 11 ............................. tVarIndex = getVariable("props.index.field")
  [310] getlocal 11 ............................. <tVarIndex>
  [312] getlocal 3 .............................. <tCastLib>
  [314] pusharglist 2 ........................... <tVarIndex, tCastLib>
  [316] extcall 41 .............................. <member(tVarIndex, tCastLib)>
  [318] getobjprop 658 .......................... <member(tVarIndex, tCastLib).number>
  [321] pushzero ................................ <0>
  [322] gt ...................................... <member(tVarIndex, tCastLib).number > 0>
  [323] jmpifz [347] ............................ if member(tVarIndex, tCastLib).number > 0 then
  [326] pusharglist 0 ........................... <>
  [328] extcall 368 ............................. <getVariableManager()>
  [331] getlocal 11 ............................. <tVarIndex>
  [333] getlocal 3 .............................. <tCastLib>
  [335] pusharglist 2 ........................... <tVarIndex, tCastLib>
  [337] extcall 41 .............................. <member(tVarIndex, tCastLib)>
  [339] getobjprop 658 .......................... <member(tVarIndex, tCastLib).number>
  [342] pusharglistnoret 2 ...................... <getVariableManager(), member(tVarIndex, tCastLib).number>
  [344] objcall 265 ............................. getVariableManager().dump(member(tVarIndex, tCastLib).number)
  [347] pushcons 3 .............................. <"alias.index.field">
  [349] pusharglist 1 ........................... <"alias.index.field">
  [351] extcall 372 ............................. <getVariable("alias.index.field")>
  [354] setlocal 12 ............................. tAliasIndex = getVariable("alias.index.field")
  [356] getlocal 12 ............................. <tAliasIndex>
  [358] getlocal 3 .............................. <tCastLib>
  [360] pusharglist 2 ........................... <tAliasIndex, tCastLib>
  [362] extcall 41 .............................. <member(tAliasIndex, tCastLib)>
  [364] getobjprop 658 .......................... <member(tAliasIndex, tCastLib).number>
  [367] pushzero ................................ <0>
  [368] gt ...................................... <member(tAliasIndex, tCastLib).number > 0>
  [369] jmpifz [584] ............................ if member(tAliasIndex, tCastLib).number > 0 then
  [372] getlocal 12 ............................. <tAliasIndex>
  [374] getlocal 3 .............................. <tCastLib>
  [376] getfield ................................ <field(tAliasIndex, tCastLib)>
  [377] setlocal 13 ............................. tAliasList = field(tAliasIndex, tCastLib)
  [379] getmovieprop 286 ........................ <the itemDelimiter>
  [382] setlocal 14 ............................. tItemDeLim = the itemDelimiter
  [384] pushcons 15 ............................. <"=">
  [386] setmovieprop 286 ........................ the itemDelimiter = "="
  [389] pushint8 1 .............................. <1>
  [391] setlocal 5
  [393] getlocal 5
  [395] getlocal 13 ............................. <tAliasList>
  [397] pushsymb 598 ............................ <#line>
  [400] pusharglist 2 ........................... <tAliasList, #line>
  [402] objcall 22 .............................. <tAliasList.line.count>
  [404] lteq
  [405] jmpifz [579] ............................ repeat with i = 1 to tAliasList.line.count
  [408] getlocal 13 ............................. <tAliasList>
  [410] pushsymb 598 ............................ <#line>
  [413] getlocal 5 .............................. <i>
  [415] pusharglist 3 ........................... <tAliasList, #line, i>
  [417] objcall 290 ............................. <tAliasList.line[i]>
  [420] setlocal 15 ............................. tLine = tAliasList.line[i]
  [422] getlocal 15 ............................. <tLine>
  [424] pusharglist 1 ........................... <tLine>
  [426] extcall 293 ............................. <length(tLine)>
  [429] pushint8 2 .............................. <2>
  [431] gt ...................................... <length(tLine) > 2>
  [432] jmpifz [570] ............................ if length(tLine) > 2 then
  [435] pushzero ................................ <0>
  [436] pushzero ................................ <0>
  [437] pushzero ................................ <0>
  [438] pushzero ................................ <0>
  [439] pushint8 2 .............................. <2>
  [441] getlocal 15 ............................. <tLine>
  [443] pushint8 3 .............................. <3>
  [445] get 1 ................................... <the number of items in tLine>
  [447] pushzero ................................ <0>
  [448] pushzero ................................ <0>
  [449] getlocal 15 ............................. <tLine>
  [451] getchunk ................................ <item 2 to the number of items in tLine of tLine>
  [452] setlocal 16 ............................. tName = item 2 to the number of items in tLine of tLine
  [454] getlocal 16 ............................. <tName>
  [456] pushint8 12 ............................. <12>
  [458] get 0 ................................... <the last char in tName>
  [460] pushcons 16 ............................. <"*">
  [462] eq ...................................... <the last char in tName = "*">
  [463] jmpifz [523] ............................ if the last char in tName = "*" then / else
  [466] getlocal 16 ............................. <tName>
  [468] pushsymb 291 ............................ <#char>
  [471] pushint8 1 .............................. <1>
  [473] getlocal 16 ............................. <tName>
  [475] pusharglist 1 ........................... <tName>
  [477] extcall 293 ............................. <length(tName)>
  [480] pushint8 1 .............................. <1>
  [482] sub ..................................... <length(tName) - 1>
  [483] pusharglist 4 ........................... <tName, #char, 1, length(tName) - 1>
  [485] objcall 290 ............................. <tName.char[1..length(tName) - 1]>
  [488] setlocal 16 ............................. tName = tName.char[1..length(tName) - 1]
  [490] getprop 714 ............................. <pAllMemNumList>
  [493] getlocal 16 ............................. <tName>
  [495] pusharglist 2 ........................... <pAllMemNumList, tName>
  [497] objcall 54 .............................. <pAllMemNumList[tName]>
  [499] setlocal 17 ............................. tNumber = pAllMemNumList[tName]
  [501] getlocal 17 ............................. <tNumber>
  [503] pushzero ................................ <0>
  [504] gt ...................................... <tNumber > 0>
  [505] jmpifz [516] ............................ if tNumber > 0 then / else
  [508] getlocal 17 ............................. <tNumber>
  [510] inv ..................................... <-tNumber>
  [511] setlocal 18 ............................. tReplacingNum = -tNumber
  [513] jmp [520]
  [516] getlocal 17 ............................. <tNumber>
  [518] setlocal 18 ............................. tReplacingNum = tNumber
  [520] jmp [538]
  [523] getprop 714 ............................. <pAllMemNumList>
  [526] getlocal 16 ............................. <tName>
  [528] pusharglist 2 ........................... <pAllMemNumList, tName>
  [530] objcall 54 .............................. <pAllMemNumList[tName]>
  [532] setlocal 17 ............................. tNumber = pAllMemNumList[tName]
  [534] getlocal 17 ............................. <tNumber>
  [536] setlocal 18 ............................. tReplacingNum = tNumber
  [538] getlocal 17 ............................. <tNumber>
  [540] pushzero ................................ <0>
  [541] gt ...................................... <tNumber > 0>
  [542] jmpifz [570] ............................ if tNumber > 0 then
  [545] pushzero ................................ <0>
  [546] pushzero ................................ <0>
  [547] pushzero ................................ <0>
  [548] pushzero ................................ <0>
  [549] pushint8 1 .............................. <1>
  [551] pushzero ................................ <0>
  [552] pushzero ................................ <0>
  [553] pushzero ................................ <0>
  [554] getlocal 15 ............................. <tLine>
  [556] getchunk ................................ <item 1 of tLine>
  [557] setlocal 19 ............................. tMemName = item 1 of tLine
  [559] getprop 714 ............................. <pAllMemNumList>
  [562] getlocal 19 ............................. <tMemName>
  [564] getlocal 18 ............................. <tReplacingNum>
  [566] pusharglistnoret 3 ...................... <pAllMemNumList, tMemName, tReplacingNum>
  [568] objcall 24 .............................. pAllMemNumList[tMemName] = tReplacingNum
  [570] pushint8 1
  [572] getlocal 5
  [574] add
  [575] setlocal 5
  [577] endrepeat [393]
  [579] getlocal 14 ............................. <tItemDeLim>
  [581] setmovieprop 286 ........................ the itemDelimiter = tItemDeLim
  [584] pushcons 17 ............................. <"class.index.field">
  [586] pusharglist 1 ........................... <"class.index.field">
  [588] extcall 372 ............................. <getVariable("class.index.field")>
  [591] setlocal 20 ............................. tClsIndex = getVariable("class.index.field")
  [593] getlocal 20 ............................. <tClsIndex>
  [595] getlocal 3 .............................. <tCastLib>
  [597] pusharglist 2 ........................... <tClsIndex, tCastLib>
  [599] extcall 41 .............................. <member(tClsIndex, tCastLib)>
  [601] getobjprop 658 .......................... <member(tClsIndex, tCastLib).number>
  [604] pushzero ................................ <0>
  [605] gt ...................................... <member(tClsIndex, tCastLib).number > 0>
  [606] jmpifz [632] ............................ if member(tClsIndex, tCastLib).number > 0 then
  [609] pushsymb 728 ............................ <#classes>
  [612] pusharglist 1 ........................... <#classes>
  [614] extcall 58 .............................. <getObject(#classes)>
  [616] getlocal 20 ............................. <tClsIndex>
  [618] getlocal 3 .............................. <tCastLib>
  [620] pusharglist 2 ........................... <tClsIndex, tCastLib>
  [622] extcall 41 .............................. <member(tClsIndex, tCastLib)>
  [624] getobjprop 658 .......................... <member(tClsIndex, tCastLib).number>
  [627] pusharglistnoret 2 ...................... <getObject(#classes), member(tClsIndex, tCastLib).number>
  [629] objcall 265 ............................. getObject(#classes).dump(member(tClsIndex, tCastLib).number)
  [632] pushint8 1
  [634] getlocal 3
  [636] add
  [637] setlocal 3
  [639] endrepeat [ 58]
  [642] pushint8 1 .............................. <1>
  [644] pusharglistnoret 1 ...................... <1>
  [646] extcall 25 .............................. return 1
  [648] ret
end

on unregisterMembers me, tCastNum
  [  0] getparam 1 .............................. <tCastNum>
  [  2] pusharglist 1 ........................... <tCastNum>
  [  4] extcall 20 .............................. <voidp(tCastNum)>
  [  6] jmpifz [ 20] ............................ if voidp(tCastNum) then
  [  9] getparam 0 .............................. <me>
  [ 11] pusharglist 1 ........................... <me>
  [ 13] objcall 711 ............................. <me.clearMemNumLists()>
  [ 16] pusharglistnoret 1 ...................... <me.clearMemNumLists()>
  [ 18] extcall 25 .............................. return me.clearMemNumLists()
  [ 20] getparam 1 .............................. <tCastNum>
  [ 22] pushint8 2 .............................. <2>
  [ 24] get 8 ................................... <the number of castMembers of castLib tCastNum>
  [ 26] setlocal 0 .............................. tMemberCount = the number of castMembers of castLib tCastNum
  [ 28] pushint8 1 .............................. <1>
  [ 30] setlocal 1
  [ 32] getlocal 1
  [ 34] getlocal 0 .............................. <tMemberCount>
  [ 36] lteq
  [ 37] jmpifz [146] ............................ repeat with i = 1 to tMemberCount
  [ 40] getlocal 1 .............................. <i>
  [ 42] getparam 1 .............................. <tCastNum>
  [ 44] pusharglist 2 ........................... <i, tCastNum>
  [ 46] extcall 41 .............................. <member(i, tCastNum)>
  [ 48] setlocal 2 .............................. tmember = member(i, tCastNum)
  [ 50] getprop 714 ............................. <pAllMemNumList>
  [ 53] getlocal 2 .............................. <tmember>
  [ 55] getobjprop 725 .......................... <tmember.name>
  [ 58] pusharglist 2 ........................... <pAllMemNumList, tmember.name>
  [ 60] objcall 54 .............................. <pAllMemNumList[tmember.name]>
  [ 62] setlocal 3 .............................. tTempNum = pAllMemNumList[tmember.name]
  [ 64] getlocal 3 .............................. <tTempNum>
  [ 66] pusharglist 0 ........................... <>
  [ 68] extcall 32 .............................. <VOID>
  [ 70] nteq .................................... <tTempNum <> VOID>
  [ 71] jmpifz [ 98] ............................ if tTempNum <> VOID then
  [ 74] getlocal 3 .............................. <tTempNum>
  [ 76] getlocal 2 .............................. <tmember>
  [ 78] getobjprop 658 .......................... <tmember.number>
  [ 81] eq ...................................... <tTempNum = tmember.number>
  [ 82] jmpifz [ 98] ............................ if tTempNum = tmember.number then
  [ 85] getprop 714 ............................. <pAllMemNumList>
  [ 88] getlocal 2 .............................. <tmember>
  [ 90] getobjprop 725 .......................... <tmember.name>
  [ 93] pusharglistnoret 2 ...................... <pAllMemNumList, tmember.name>
  [ 95] objcall 659 ............................. pAllMemNumList.deleteProp(tmember.name)
  [ 98] getprop 715 ............................. <pDynMemNumList>
  [101] getlocal 2 .............................. <tmember>
  [103] getobjprop 725 .......................... <tmember.name>
  [106] pusharglist 2 ........................... <pDynMemNumList, tmember.name>
  [108] objcall 517 ............................. <pDynMemNumList.getPos(tmember.name)>
  [111] pushzero ................................ <0>
  [112] gt ...................................... <pDynMemNumList.getPos(tmember.name) > 0>
  [113] jmpifz [137] ............................ if pDynMemNumList.getPos(tmember.name) > 0 then
  [116] getprop 715 ............................. <pDynMemNumList>
  [119] getprop 715 ............................. <pDynMemNumList>
  [122] getlocal 2 .............................. <tmember>
  [124] getobjprop 725 .......................... <tmember.name>
  [127] pusharglist 2 ........................... <pDynMemNumList, tmember.name>
  [129] objcall 517 ............................. <pDynMemNumList.getPos(tmember.name)>
  [132] pusharglistnoret 2 ...................... <pDynMemNumList, pDynMemNumList.getPos(tmember.name)>
  [134] objcall 723 ............................. pDynMemNumList.deleteAt(pDynMemNumList.getPos(tmember.name))
  [137] pushint8 1
  [139] getlocal 1
  [141] add
  [142] setlocal 1
  [144] endrepeat [ 32]
  [146] pushcons 3 .............................. <"alias.index.field">
  [148] pusharglist 1 ........................... <"alias.index.field">
  [150] extcall 372 ............................. <getVariable("alias.index.field")>
  [153] setlocal 4 .............................. tAliasIndex = getVariable("alias.index.field")
  [155] getlocal 4 .............................. <tAliasIndex>
  [157] getparam 1 .............................. <tCastNum>
  [159] pusharglist 2 ........................... <tAliasIndex, tCastNum>
  [161] extcall 41 .............................. <member(tAliasIndex, tCastNum)>
  [163] getobjprop 658 .......................... <member(tAliasIndex, tCastNum).number>
  [166] pushzero ................................ <0>
  [167] gt ...................................... <member(tAliasIndex, tCastNum).number > 0>
  [168] jmpifz [336] ............................ if member(tAliasIndex, tCastNum).number > 0 then
  [171] getlocal 4 .............................. <tAliasIndex>
  [173] getparam 1 .............................. <tCastNum>
  [175] getfield ................................ <field(tAliasIndex, tCastNum)>
  [176] setlocal 5 .............................. tAliasList = field(tAliasIndex, tCastNum)
  [178] pushint8 1 .............................. <1>
  [180] setlocal 1
  [182] getlocal 1
  [184] getlocal 5 .............................. <tAliasList>
  [186] pushint8 4 .............................. <4>
  [188] get 1 ................................... <the number of lines in tAliasList>
  [190] lteq
  [191] jmpifz [336] ............................ repeat with i = 1 to the number of lines in tAliasList
  [194] getlocal 5 .............................. <tAliasList>
  [196] pushsymb 598 ............................ <#line>
  [199] getlocal 1 .............................. <i>
  [201] pusharglist 3 ........................... <tAliasList, #line, i>
  [203] objcall 290 ............................. <tAliasList.line[i]>
  [206] setlocal 6 .............................. tLine = tAliasList.line[i]
  [208] getlocal 6 .............................. <tLine>
  [210] pusharglist 1 ........................... <tLine>
  [212] extcall 293 ............................. <length(tLine)>
  [215] pushint8 2 .............................. <2>
  [217] gt ...................................... <length(tLine) > 2>
  [218] jmpifz [327] ............................ if length(tLine) > 2 then
  [221] pushzero ................................ <0>
  [222] pushzero ................................ <0>
  [223] pushzero ................................ <0>
  [224] pushzero ................................ <0>
  [225] pushint8 2 .............................. <2>
  [227] getlocal 6 .............................. <tLine>
  [229] pushint8 3 .............................. <3>
  [231] get 1 ................................... <the number of items in tLine>
  [233] pushzero ................................ <0>
  [234] pushzero ................................ <0>
  [235] getlocal 6 .............................. <tLine>
  [237] getchunk ................................ <item 2 to the number of items in tLine of tLine>
  [238] setlocal 7 .............................. tName = item 2 to the number of items in tLine of tLine
  [240] getlocal 7 .............................. <tName>
  [242] pushint8 12 ............................. <12>
  [244] get 0 ................................... <the last char in tName>
  [246] pushcons 16 ............................. <"*">
  [248] eq ...................................... <the last char in tName = "*">
  [249] jmpifz [276] ............................ if the last char in tName = "*" then
  [252] getlocal 7 .............................. <tName>
  [254] pushsymb 291 ............................ <#char>
  [257] pushint8 1 .............................. <1>
  [259] getlocal 7 .............................. <tName>
  [261] pusharglist 1 ........................... <tName>
  [263] extcall 293 ............................. <length(tName)>
  [266] pushint8 1 .............................. <1>
  [268] sub ..................................... <length(tName) - 1>
  [269] pusharglist 4 ........................... <tName, #char, 1, length(tName) - 1>
  [271] objcall 290 ............................. <tName.char[1..length(tName) - 1]>
  [274] setlocal 7 .............................. tName = tName.char[1..length(tName) - 1]
  [276] getprop 714 ............................. <pAllMemNumList>
  [279] getlocal 7 .............................. <tName>
  [281] pusharglist 2 ........................... <pAllMemNumList, tName>
  [283] objcall 54 .............................. <pAllMemNumList[tName]>
  [285] pusharglist 1 ........................... <pAllMemNumList[tName]>
  [287] extcall 20 .............................. <voidp(pAllMemNumList[tName])>
  [289] not ..................................... <not voidp(pAllMemNumList[tName])>
  [290] jmpifz [327] ............................ if not voidp(pAllMemNumList[tName]) then
  [293] pushzero ................................ <0>
  [294] pushzero ................................ <0>
  [295] pushzero ................................ <0>
  [296] pushzero ................................ <0>
  [297] pushint8 1 .............................. <1>
  [299] pushzero ................................ <0>
  [300] pushzero ................................ <0>
  [301] pushzero ................................ <0>
  [302] getlocal 6 .............................. <tLine>
  [304] getchunk ................................ <item 1 of tLine>
  [305] setlocal 8 .............................. tMemName = item 1 of tLine
  [307] getlocal 8 .............................. <tMemName>
  [309] pusharglist 1 ........................... <tMemName>
  [311] extcall 20 .............................. <voidp(tMemName)>
  [313] not ..................................... <not voidp(tMemName)>
  [314] jmpifz [327] ............................ if not voidp(tMemName) then
  [317] getprop 714 ............................. <pAllMemNumList>
  [320] getlocal 8 .............................. <tMemName>
  [322] pusharglistnoret 2 ...................... <pAllMemNumList, tMemName>
  [324] objcall 659 ............................. pAllMemNumList.deleteProp(tMemName)
  [327] pushint8 1
  [329] getlocal 1
  [331] add
  [332] setlocal 1
  [334] endrepeat [182]
  [336] pushint8 1 .............................. <1>
  [338] pusharglistnoret 1 ...................... <1>
  [340] extcall 25 .............................. return 1
  [342] ret
end

on replaceMember me, tExistingMemName, tReplacingMemName
  [  0] getprop 714 ............................. <pAllMemNumList>
  [  3] getparam 2 .............................. <tReplacingMemName>
  [  5] pusharglist 2 ........................... <pAllMemNumList, tReplacingMemName>
  [  7] objcall 54 .............................. <pAllMemNumList[tReplacingMemName]>
  [  9] pusharglist 1 ........................... <pAllMemNumList[tReplacingMemName]>
  [ 11] extcall 20 .............................. <voidp(pAllMemNumList[tReplacingMemName])>
  [ 13] jmpifz [ 21] ............................ if voidp(pAllMemNumList[tReplacingMemName]) then
  [ 16] pushzero ................................ <0>
  [ 17] pusharglistnoret 1 ...................... <0>
  [ 19] extcall 25 .............................. return 0
  [ 21] getprop 714 ............................. <pAllMemNumList>
  [ 24] getparam 1 .............................. <tExistingMemName>
  [ 26] getprop 714 ............................. <pAllMemNumList>
  [ 29] getparam 2 .............................. <tReplacingMemName>
  [ 31] pusharglist 2 ........................... <pAllMemNumList, tReplacingMemName>
  [ 33] objcall 54 .............................. <pAllMemNumList[tReplacingMemName]>
  [ 35] pusharglistnoret 3 ...................... <pAllMemNumList, tExistingMemName, pAllMemNumList[tReplacingMemName]>
  [ 37] objcall 24 .............................. pAllMemNumList[tExistingMemName] = pAllMemNumList[tReplacingMemName]
  [ 39] pushint8 1 .............................. <1>
  [ 41] pusharglistnoret 1 ...................... <1>
  [ 43] extcall 25 .............................. return 1
  [ 45] ret
end

on exists me, tMemName
  [  0] getprop 714 ............................. <pAllMemNumList>
  [  3] getparam 1 .............................. <tMemName>
  [  5] pusharglist 2 ........................... <pAllMemNumList, tMemName>
  [  7] objcall 54 .............................. <pAllMemNumList[tMemName]>
  [  9] pusharglist 1 ........................... <pAllMemNumList[tMemName]>
  [ 11] extcall 20 .............................. <voidp(pAllMemNumList[tMemName])>
  [ 13] not ..................................... <not voidp(pAllMemNumList[tMemName])>
  [ 14] pusharglistnoret 1 ...................... <not voidp(pAllMemNumList[tMemName])>
  [ 16] extcall 25 .............................. return not voidp(pAllMemNumList[tMemName])
  [ 18] ret
end

on getmemnum me, tMemName
  [  0] getprop 714 ............................. <pAllMemNumList>
  [  3] getparam 1 .............................. <tMemName>
  [  5] pusharglist 2 ........................... <pAllMemNumList, tMemName>
  [  7] objcall 54 .............................. <pAllMemNumList[tMemName]>
  [  9] setlocal 0 .............................. tMemNum = pAllMemNumList[tMemName]
  [ 11] getlocal 0 .............................. <tMemNum>
  [ 13] pusharglist 1 ........................... <tMemNum>
  [ 15] extcall 20 .............................. <voidp(tMemNum)>
  [ 17] jmpifz [ 23] ............................ if voidp(tMemNum) then
  [ 20] pushzero ................................ <0>
  [ 21] setlocal 0 .............................. tMemNum = 0
  [ 23] getlocal 0 .............................. <tMemNum>
  [ 25] pusharglistnoret 1 ...................... <tMemNum>
  [ 27] extcall 25 .............................. return tMemNum
  [ 29] ret
end

on print me
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getprop 714 ............................. <pAllMemNumList>
  [  9] getobjprop 22 ........................... <pAllMemNumList.count>
  [ 11] lteq
  [ 12] jmpifz [ 51] ............................ repeat with i = 1 to pAllMemNumList.count
  [ 15] getprop 714 ............................. <pAllMemNumList>
  [ 18] getlocal 0 .............................. <i>
  [ 20] pusharglist 2 ........................... <pAllMemNumList, i>
  [ 22] objcall 23 .............................. <pAllMemNumList.getPropAt(i)>
  [ 24] pushcons 18 ............................. <"--">
  [ 26] joinpadstr .............................. <pAllMemNumList.getPropAt(i) && "--">
  [ 27] getprop 714 ............................. <pAllMemNumList>
  [ 30] getlocal 0 .............................. <i>
  [ 32] pusharglist 2 ........................... <pAllMemNumList, i>
  [ 34] objcall 54 .............................. <pAllMemNumList[i]>
  [ 36] joinpadstr .............................. <pAllMemNumList.getPropAt(i) && "--" && pAllMemNumList[i]>
  [ 37] pusharglistnoret 1 ...................... <pAllMemNumList.getPropAt(i) && "--" && pAllMemNumList[i]>
  [ 39] extcall 642 ............................. put pAllMemNumList.getPropAt(i) && "--" && pAllMemNumList[i]
  [ 42] pushint8 1
  [ 44] getlocal 0
  [ 46] add
  [ 47] setlocal 0
  [ 49] endrepeat [  4]
  [ 51] pushint8 1 .............................. <1>
  [ 53] pusharglistnoret 1 ...................... <1>
  [ 55] extcall 25 .............................. return 1
  [ 57] ret
end

on clearMemNumLists me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 714 ............................. pAllMemNumList = [:]
  [  6] getprop 714 ............................. <pAllMemNumList>
  [  9] pusharglistnoret 1 ...................... <pAllMemNumList>
  [ 11] objcall 640 ............................. pAllMemNumList.sort()
  [ 14] pushint8 1 .............................. <1>
  [ 16] pusharglistnoret 1 ...................... <1>
  [ 18] extcall 25 .............................. return 1
  [ 20] ret
end

on emptyDynamicBin me
  [  0] getprop 717 ............................. <pBin>
  [  3] pushint8 2 .............................. <2>
  [  5] get 8 ................................... <the number of castMembers of castLib pBin>
  [  7] setlocal 0 .............................. tMemberAmount = the number of castMembers of castLib pBin
  [  9] pushint8 1 .............................. <1>
  [ 11] setlocal 1
  [ 13] getlocal 1
  [ 15] getlocal 0 .............................. <tMemberAmount>
  [ 17] lteq
  [ 18] jmpifz [ 60] ............................ repeat with i = 1 to tMemberAmount
  [ 21] getlocal 1 .............................. <i>
  [ 23] getprop 717 ............................. <pBin>
  [ 26] pusharglist 2 ........................... <i, pBin>
  [ 28] extcall 41 .............................. <member(i, pBin)>
  [ 30] setlocal 2 .............................. tmember = member(i, pBin)
  [ 32] getlocal 2 .............................. <tmember>
  [ 34] getobjprop 454 .......................... <tmember.type>
  [ 37] pushsymb 748 ............................ <#empty>
  [ 40] nteq .................................... <tmember.type <> #empty>
  [ 41] jmpifz [ 51] ............................ if tmember.type <> #empty then
  [ 44] getlocal 2 .............................. <tmember>
  [ 46] pusharglistnoret 1 ...................... <tmember>
  [ 48] objcall 726 ............................. tmember.erase()
  [ 51] pushint8 1
  [ 53] getlocal 1
  [ 55] add
  [ 56] setlocal 1
  [ 58] endrepeat [ 13]
  [ 60] pusharglist 0 ........................... <[]>
  [ 62] pushlist ................................ <[]>
  [ 63] setprop 715 ............................. pDynMemNumList = []
  [ 66] pusharglist 0 ........................... <[]>
  [ 68] pushlist ................................ <[]>
  [ 69] setprop 716 ............................. pBmpMemNumList = []
  [ 72] pushint8 1 .............................. <1>
  [ 74] pusharglistnoret 1 ...................... <1>
  [ 76] extcall 25 .............................. return 1
  [ 78] ret
end

on deleteDynamicMembers me
  [  0] getprop 715 ............................. <pDynMemNumList>
  [  3] peek 0
  [  5] pusharglist 1
  [  7] extcall 22
  [  9] pushint8 1
  [ 11] peek 0
  [ 13] peek 2
  [ 15] lteq
  [ 16] jmpifz [ 45] ............................ repeat with tMemNum in pDynMemNumList
  [ 19] peek 2
  [ 21] peek 1
  [ 23] pusharglist 2
  [ 25] extcall 54
  [ 27] setlocal 0
  [ 29] getlocal 0 .............................. <tMemNum>
  [ 31] pusharglist 1 ........................... <tMemNum>
  [ 33] extcall 41 .............................. <member(tMemNum)>
  [ 35] pusharglistnoret 1 ...................... <member(tMemNum)>
  [ 37] objcall 726 ............................. member(tMemNum).erase()
  [ 40] pushint8 1
  [ 42] add
  [ 43] endrepeat [ 11]
  [ 45] pop 3
  [ 47] getprop 716 ............................. <pBmpMemNumList>
  [ 50] peek 0
  [ 52] pusharglist 1
  [ 54] extcall 22
  [ 56] pushint8 1
  [ 58] peek 0
  [ 60] peek 2
  [ 62] lteq
  [ 63] jmpifz [ 92] ............................ repeat with tMemNum in pBmpMemNumList
  [ 66] peek 2
  [ 68] peek 1
  [ 70] pusharglist 2
  [ 72] extcall 54
  [ 74] setlocal 0
  [ 76] getlocal 0 .............................. <tMemNum>
  [ 78] pusharglist 1 ........................... <tMemNum>
  [ 80] extcall 41 .............................. <member(tMemNum)>
  [ 82] pusharglistnoret 1 ...................... <member(tMemNum)>
  [ 84] objcall 726 ............................. member(tMemNum).erase()
  [ 87] pushint8 1
  [ 89] add
  [ 90] endrepeat [ 58]
  [ 92] pop 3
  [ 94] pusharglist 0 ........................... <[]>
  [ 96] pushlist ................................ <[]>
  [ 97] setprop 715 ............................. pDynMemNumList = []
  [100] pusharglist 0 ........................... <[]>
  [102] pushlist ................................ <[]>
  [103] setprop 716 ............................. pBmpMemNumList = []
  [106] pushint8 1 .............................. <1>
  [108] pusharglistnoret 1 ...................... <1>
  [110] extcall 25 .............................. return 1
  [112] ret
end
