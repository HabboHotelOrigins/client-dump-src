property pGroupId, pStatus, pLoadedSoFar, pCastList, pCastcount, pCallBack, pCurrPercent, pTempPercent, pLastPercent, pTmpLoadCount, pCurLoadCount

on define me, tdata
  [  0] getparam 1 .............................. <tdata>
  [  2] pushsymb 34 ............................. <#id>
  [  4] pusharglist 2 ........................... <tdata, #id>
  [  6] objcall 54 .............................. <tdata[#id]>
  [  8] setprop 1157 ............................ pGroupId = tdata[#id]
  [ 11] getparam 1 .............................. <tdata>
  [ 13] pushsymb 767 ............................ <#status>
  [ 16] pusharglist 2 ........................... <tdata, #status>
  [ 18] objcall 54 .............................. <tdata[#status]>
  [ 20] setprop 1134 ............................ pStatus = tdata[#status]
  [ 23] getparam 1 .............................. <tdata>
  [ 25] pushsymb 815 ............................ <#sofar>
  [ 28] pusharglist 2 ........................... <tdata, #sofar>
  [ 30] objcall 54 .............................. <tdata[#sofar]>
  [ 32] setprop 1163 ............................ pLoadedSoFar = tdata[#sofar]
  [ 35] getparam 1 .............................. <tdata>
  [ 37] pushsymb 816 ............................ <#casts>
  [ 40] pusharglist 2 ........................... <tdata, #casts>
  [ 42] objcall 54 .............................. <tdata[#casts]>
  [ 44] getobjprop 22 ........................... <tdata[#casts].count>
  [ 46] setprop 1164 ............................ pCastcount = tdata[#casts].count
  [ 49] getparam 1 .............................. <tdata>
  [ 51] pushsymb 766 ............................ <#callback>
  [ 54] pusharglist 2 ........................... <tdata, #callback>
  [ 56] objcall 54 .............................. <tdata[#callback]>
  [ 58] setprop 1139 ............................ pCallBack = tdata[#callback]
  [ 61] getparam 1 .............................. <tdata>
  [ 63] pushsymb 775 ............................ <#Percent>
  [ 66] pusharglist 2 ........................... <tdata, #Percent>
  [ 68] objcall 54 .............................. <tdata[#Percent]>
  [ 70] setprop 1165 ............................ pCurrPercent = tdata[#Percent]
  [ 73] pushzero ................................ <0>
  [ 74] setprop 1166 ............................ pTempPercent = 0
  [ 77] pushzero ................................ <0>
  [ 78] setprop 1167 ............................ pLastPercent = 0
  [ 81] pushzero ................................ <0>
  [ 82] setprop 1168 ............................ pCurLoadCount = 0
  [ 85] pushzero ................................ <0>
  [ 86] setprop 1169 ............................ pTmpLoadCount = 0
  [ 89] pusharglist 0 ........................... <[:]>
  [ 91] pushproplist ............................ <[:]>
  [ 92] setprop 1170 ............................ pCastList = [:]
  [ 95] getparam 1 .............................. <tdata>
  [ 97] pushsymb 816 ............................ <#casts>
  [100] pusharglist 2 ........................... <tdata, #casts>
  [102] objcall 54 .............................. <tdata[#casts]>
  [104] peek 0
  [106] pusharglist 1
  [108] extcall 22
  [110] pushint8 1
  [112] peek 0
  [114] peek 2
  [116] lteq
  [117] jmpifz [145] ............................ repeat with tCast in tdata[#casts]
  [120] peek 2
  [122] peek 1
  [124] pusharglist 2
  [126] extcall 54
  [128] setlocal 0
  [130] getprop 1170 ............................ <pCastList>
  [133] getlocal 0 .............................. <tCast>
  [135] pushzero ................................ <0>
  [136] pusharglistnoret 3 ...................... <pCastList, tCast, 0>
  [138] objcall 24 .............................. pCastList[tCast] = 0
  [140] pushint8 1
  [142] add
  [143] endrepeat [112]
  [145] pop 3
  [147] pushint8 1 .............................. <1>
  [149] pusharglistnoret 1 ...................... <1>
  [151] extcall 25 .............................. return 1
  [153] ret
end

on OneCastDone me, tFile
  [  0] getprop 1163 ............................ <pLoadedSoFar>
  [  3] pushfloat32 1.0 ......................... <1.0>
  [  8] add ..................................... <pLoadedSoFar + 1.0>
  [  9] setprop 1163 ............................ pLoadedSoFar = pLoadedSoFar + 1.0
  [ 12] getprop 1163 ............................ <pLoadedSoFar>
  [ 15] pusharglist 1 ........................... <pLoadedSoFar>
  [ 17] extcall 957 ............................. <integer(pLoadedSoFar)>
  [ 20] getprop 1164 ............................ <pCastcount>
  [ 23] eq ...................................... <integer(pLoadedSoFar) = pCastcount>
  [ 24] jmpifz [ 33] ............................ if integer(pLoadedSoFar) = pCastcount then
  [ 27] pushsymb 812 ............................ <#ready>
  [ 30] setprop 1134 ............................ pStatus = #ready
  [ 33] getprop 1170 ............................ <pCastList>
  [ 36] getparam 1 .............................. <tFile>
  [ 38] pushint8 1 .............................. <1>
  [ 40] pusharglistnoret 3 ...................... <pCastList, tFile, 1>
  [ 42] objcall 24 .............................. pCastList[tFile] = 1
  [ 44] pushint8 1 .............................. <1>
  [ 46] jmpifz [139] ............................ repeat while 1
  [ 49] getprop 1170 ............................ <pCastList>
  [ 52] pusharglist 1 ........................... <pCastList>
  [ 54] extcall 22 .............................. <count(pCastList)>
  [ 56] pushzero ................................ <0>
  [ 57] eq ...................................... <count(pCastList) = 0>
  [ 58] jmpifz [ 64] ............................ if count(pCastList) = 0 then
  [ 61] jmp [139] ............................... exit repeat
  [ 64] getprop 1170 ............................ <pCastList>
  [ 67] pushint8 1 .............................. <1>
  [ 69] pusharglist 2 ........................... <pCastList, 1>
  [ 71] objcall 54 .............................. <pCastList[1]>
  [ 73] pushint8 1 .............................. <1>
  [ 75] eq ...................................... <pCastList[1] = 1>
  [ 76] jmpifz [134] ............................ if pCastList[1] = 1 then
  [ 79] getprop 1170 ............................ <pCastList>
  [ 82] pushint8 1 .............................. <1>
  [ 84] pusharglist 2 ........................... <pCastList, 1>
  [ 86] objcall 23 .............................. <pCastList.getPropAt(1)>
  [ 88] setlocal 0 .............................. tCastName = pCastList.getPropAt(1)
  [ 90] pusharglist 0 ........................... <>
  [ 92] extcall 179 ............................. <getCastLoadManager()>
  [ 94] getlocal 0 .............................. <tCastName>
  [ 96] pusharglist 2 ........................... <getCastLoadManager(), tCastName>
  [ 98] objcall 88 .............................. <getCastLoadManager().exists(tCastName)>
  [100] jmpifz [121] ............................ if getCastLoadManager().exists(tCastName) then
  [103] pusharglist 0 ........................... <>
  [105] extcall 79 .............................. <getThreadManager()>
  [107] getlocal 0 .............................. <tCastName>
  [109] pusharglist 1 ........................... <tCastName>
  [111] extcall 726 ............................. <castLib(tCastName)>
  [114] getobjprop 660 .......................... <castLib(tCastName).number>
  [117] pusharglistnoret 2 ...................... <getThreadManager(), castLib(tCastName).number>
  [119] objcall 149 ............................. getThreadManager().initThread(castLib(tCastName).number)
  [121] getprop 1170 ............................ <pCastList>
  [124] getlocal 0 .............................. <tCastName>
  [126] pusharglistnoret 2 ...................... <pCastList, tCastName>
  [128] objcall 661 ............................. pCastList.deleteProp(tCastName)
  [131] jmp [137] ............................... next repeat
  [134] jmp [139] ............................... exit repeat
  [137] endrepeat [ 44]
  [139] pushint8 1 .............................. <1>
  [141] pusharglistnoret 1 ...................... <1>
  [143] extcall 25 .............................. return 1
  [145] ret
end

on changeLoadingCount me, tPosOrNeg
  [  0] getprop 1168 ............................ <pCurLoadCount>
  [  3] getparam 1 .............................. <tPosOrNeg>
  [  5] add ..................................... <pCurLoadCount + tPosOrNeg>
  [  6] setprop 1168 ............................ pCurLoadCount = pCurLoadCount + tPosOrNeg
  [  9] ret
end

on resetPercentCounter me
  [  0] pushzero ................................ <0>
  [  1] setprop 1166 ............................ pTempPercent = 0
  [  4] pushzero ................................ <0>
  [  5] setprop 1169 ............................ pTmpLoadCount = 0
  [  8] pushint8 1 .............................. <1>
  [ 10] pusharglistnoret 1 ...................... <1>
  [ 12] extcall 25 .............................. return 1
  [ 14] ret
end

on UpdateTaskPercent me, tInstancePercent, tFile
  [  0] getprop 1169 ............................ <pTmpLoadCount>
  [  3] pushint8 1 .............................. <1>
  [  5] add ..................................... <pTmpLoadCount + 1>
  [  6] setprop 1169 ............................ pTmpLoadCount = pTmpLoadCount + 1
  [  9] getprop 1166 ............................ <pTempPercent>
  [ 12] getparam 1 .............................. <tInstancePercent>
  [ 14] add ..................................... <pTempPercent + tInstancePercent>
  [ 15] setprop 1166 ............................ pTempPercent = pTempPercent + tInstancePercent
  [ 18] getprop 1169 ............................ <pTmpLoadCount>
  [ 21] getprop 1168 ............................ <pCurLoadCount>
  [ 24] eq ...................................... <pTmpLoadCount = pCurLoadCount>
  [ 25] jmpifz [ 79] ............................ if pTmpLoadCount = pCurLoadCount then
  [ 28] pushfloat32 1.0 ......................... <1.0>
  [ 33] getprop 1166 ............................ <pTempPercent>
  [ 36] getprop 1163 ............................ <pLoadedSoFar>
  [ 39] add ..................................... <pTempPercent + pLoadedSoFar>
  [ 40] mul ..................................... <1.0 * (pTempPercent + pLoadedSoFar)>
  [ 41] getprop 1164 ............................ <pCastcount>
  [ 44] div ..................................... <1.0 * (pTempPercent + pLoadedSoFar) / pCastcount>
  [ 45] setlocal 0 .............................. tTemp = 1.0 * (pTempPercent + pLoadedSoFar) / pCastcount
  [ 47] getlocal 0 .............................. <tTemp>
  [ 49] pushfloat32 1.0 ......................... <1.0>
  [ 54] lteq .................................... <tTemp <= 1.0>
  [ 55] getprop 1167 ............................ <pLastPercent>
  [ 58] getlocal 0 .............................. <tTemp>
  [ 60] lteq .................................... <pLastPercent <= tTemp>
  [ 61] and ..................................... <(tTemp <= 1.0) and (pLastPercent <= tTemp)>
  [ 62] jmpifz [ 73] ............................ if (tTemp <= 1.0) and (pLastPercent <= tTemp) then / else
  [ 65] getlocal 0 .............................. <tTemp>
  [ 67] setprop 1165 ............................ pCurrPercent = tTemp
  [ 70] jmp [ 79]
  [ 73] getprop 1167 ............................ <pLastPercent>
  [ 76] setprop 1165 ............................ pCurrPercent = pLastPercent
  [ 79] ret
end

on getTaskState me
  [  0] getprop 1134 ............................ <pStatus>
  [  3] pusharglistnoret 1 ...................... <pStatus>
  [  5] extcall 25 .............................. return pStatus
  [  7] ret
end

on getTaskPercent me
  [  0] getprop 1165 ............................ <pCurrPercent>
  [  3] pusharglistnoret 1 ...................... <pCurrPercent>
  [  5] extcall 25 .............................. return pCurrPercent
  [  7] ret
end

on DoCallBack me
  [  0] getprop 1134 ............................ <pStatus>
  [  3] pushsymb 812 ............................ <#ready>
  [  6] eq ...................................... <pStatus = #ready>
  [  7] jmpifz [107] ............................ if pStatus = #ready then
  [ 10] getprop 1139 ............................ <pCallBack>
  [ 13] pusharglist 1 ........................... <pCallBack>
  [ 15] extcall 53 .............................. <listp(pCallBack)>
  [ 17] jmpifz [107] ............................ if listp(pCallBack) then
  [ 20] getprop 1139 ............................ <pCallBack>
  [ 23] peek 0
  [ 25] pusharglist 1
  [ 27] extcall 22
  [ 29] pushint8 1
  [ 31] peek 0
  [ 33] peek 2
  [ 35] lteq
  [ 36] jmpifz [105] ............................ repeat with tCall in pCallBack
  [ 39] peek 2
  [ 41] peek 1
  [ 43] pusharglist 2
  [ 45] extcall 54
  [ 47] setlocal 0
  [ 49] getlocal 0 .............................. <tCall>
  [ 51] pushsymb 770 ............................ <#client>
  [ 54] pusharglist 2 ........................... <tCall, #client>
  [ 56] objcall 54 .............................. <tCall[#client]>
  [ 58] pusharglist 1 ........................... <tCall[#client]>
  [ 60] extcall 67 .............................. <objectExists(tCall[#client])>
  [ 62] jmpifz [100] ............................ if objectExists(tCall[#client]) then
  [ 65] getlocal 0 .............................. <tCall>
  [ 67] pushsymb 769 ............................ <#method>
  [ 70] pusharglist 2 ........................... <tCall, #method>
  [ 72] objcall 54 .............................. <tCall[#method]>
  [ 74] getlocal 0 .............................. <tCall>
  [ 76] pushsymb 770 ............................ <#client>
  [ 79] pusharglist 2 ........................... <tCall, #client>
  [ 81] objcall 54 .............................. <tCall[#client]>
  [ 83] pusharglist 1 ........................... <tCall[#client]>
  [ 85] extcall 58 .............................. <getObject(tCall[#client])>
  [ 87] getlocal 0 .............................. <tCall>
  [ 89] pushsymb 771 ............................ <#argument>
  [ 92] pusharglist 2 ........................... <tCall, #argument>
  [ 94] objcall 54 .............................. <tCall[#argument]>
  [ 96] pusharglistnoret 3 ...................... <tCall[#method], getObject(tCall[#client]), tCall[#argument]>
  [ 98] extcall 68 .............................. call(tCall[#method], getObject(tCall[#client]), tCall[#argument])
  [100] pushint8 1
  [102] add
  [103] endrepeat [ 31]
  [105] pop 3
  [107] ret
end

on addCallBack me, tid, tMethod, tClientID, tArgument
  [  0] getparam 2 .............................. <tMethod>
  [  2] pusharglist 1 ........................... <tMethod>
  [  4] extcall 46 .............................. <symbolp(tMethod)>
  [  6] not ..................................... <not symbolp(tMethod)>
  [  7] jmpifz [ 28] ............................ if not symbolp(tMethod) then
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 0 .............................. <"Symbol referring to handler expected:">
  [ 14] getparam 2 .............................. <tMethod>
  [ 16] joinpadstr .............................. <"Symbol referring to handler expected:" && tMethod>
  [ 17] pushsymb 773 ............................ <#addCallBack>
  [ 20] pusharglist 3 ........................... <me, "Symbol referring to handler expected:" && tMethod, #addCallBack>
  [ 22] extcall 39 .............................. <error(me, "Symbol referring to handler expected:" && tMethod, #addCallBack)>
  [ 24] pusharglistnoret 1 ...................... <error(me, "Symbol referring to handler expected:" && tMethod, #addCallBack)>
  [ 26] extcall 25 .............................. return error(me, "Symbol referring to handler expected:" && tMethod, #addCallBack)
  [ 28] getparam 3 .............................. <tClientID>
  [ 30] pusharglist 1 ........................... <tClientID>
  [ 32] extcall 67 .............................. <objectExists(tClientID)>
  [ 34] not ..................................... <not objectExists(tClientID)>
  [ 35] jmpifz [ 56] ............................ if not objectExists(tClientID) then
  [ 38] getparam 0 .............................. <me>
  [ 40] pushcons 1 .............................. <"Object not found:">
  [ 42] getparam 3 .............................. <tClientID>
  [ 44] joinpadstr .............................. <"Object not found:" && tClientID>
  [ 45] pushsymb 773 ............................ <#addCallBack>
  [ 48] pusharglist 3 ........................... <me, "Object not found:" && tClientID, #addCallBack>
  [ 50] extcall 39 .............................. <error(me, "Object not found:" && tClientID, #addCallBack)>
  [ 52] pusharglistnoret 1 ...................... <error(me, "Object not found:" && tClientID, #addCallBack)>
  [ 54] extcall 25 .............................. return error(me, "Object not found:" && tClientID, #addCallBack)
  [ 56] getparam 3 .............................. <tClientID>
  [ 58] pusharglist 1 ........................... <tClientID>
  [ 60] extcall 58 .............................. <getObject(tClientID)>
  [ 62] getparam 2 .............................. <tMethod>
  [ 64] pusharglist 2 ........................... <getObject(tClientID), tMethod>
  [ 66] objcall 662 ............................. <getObject(tClientID).handler(tMethod)>
  [ 69] not ..................................... <not getObject(tClientID).handler(tMethod)>
  [ 70] jmpifz [ 97] ............................ if not getObject(tClientID).handler(tMethod) then
  [ 73] getparam 0 .............................. <me>
  [ 75] pushcons 2 .............................. <"Handler not found in object:">
  [ 77] getparam 2 .............................. <tMethod>
  [ 79] joinpadstr .............................. <"Handler not found in object:" && tMethod>
  [ 80] pushcons 3 .............................. <"/">
  [ 82] joinstr ................................. <"Handler not found in object:" && tMethod & "/">
  [ 83] getparam 3 .............................. <tClientID>
  [ 85] joinstr ................................. <"Handler not found in object:" && tMethod & "/" & tClientID>
  [ 86] pushsymb 773 ............................ <#addCallBack>
  [ 89] pusharglist 3 ........................... <me, "Handler not found in object:" && tMethod & "/" & tClientID, #addCallBack>
  [ 91] extcall 39 .............................. <error(me, "Handler not found in object:" && tMethod & "/" & tClientID, #addCallBack)>
  [ 93] pusharglistnoret 1 ...................... <error(me, "Handler not found in object:" && tMethod & "/" & tClientID, #addCallBack)>
  [ 95] extcall 25 .............................. return error(me, "Handler not found in object:" && tMethod & "/" & tClientID, #addCallBack)
  [ 97] getprop 1134 ............................ <pStatus>
  [100] pushsymb 812 ............................ <#ready>
  [103] eq ...................................... <pStatus = #ready>
  [104] jmpifz [136] ............................ if pStatus = #ready then / else
  [107] getparam 2 .............................. <tMethod>
  [109] getparam 3 .............................. <tClientID>
  [111] pusharglist 1 ........................... <tClientID>
  [113] extcall 58 .............................. <getObject(tClientID)>
  [115] getparam 4 .............................. <tArgument>
  [117] pusharglistnoret 3 ...................... <tMethod, getObject(tClientID), tArgument>
  [119] extcall 68 .............................. call(tMethod, getObject(tClientID), tArgument)
  [121] pusharglist 0 ........................... <>
  [123] extcall 179 ............................. <getCastLoadManager()>
  [125] getprop 1157 ............................ <pGroupId>
  [128] pusharglistnoret 2 ...................... <getCastLoadManager(), pGroupId>
  [130] objcall 795 ............................. getCastLoadManager().removeCastLoadTask(pGroupId)
  [133] jmp [210]
  [136] getprop 1134 ............................ <pStatus>
  [139] pushsymb 813 ............................ <#LOADING>
  [142] eq ...................................... <pStatus = #LOADING>
  [143] jmpifz [210] ............................ if pStatus = #LOADING then
  [146] getprop 1139 ............................ <pCallBack>
  [149] pusharglist 1 ........................... <pCallBack>
  [151] extcall 20 .............................. <voidp(pCallBack)>
  [153] jmpifz [185] ............................ if voidp(pCallBack) then / else
  [156] pushsymb 769 ............................ <#method>
  [159] getparam 2 .............................. <tMethod>
  [161] pushsymb 770 ............................ <#client>
  [164] getparam 3 .............................. <tClientID>
  [166] pushsymb 771 ............................ <#argument>
  [169] getparam 4 .............................. <tArgument>
  [171] pusharglist 6 ........................... <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [173] pushproplist ............................ <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [174] pusharglist 1 ........................... <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [176] extcall 491 ............................. <list([#method: tMethod, #client: tClientID, #argument: tArgument])>
  [179] setprop 1139 ............................ pCallBack = list([#method: tMethod, #client: tClientID, #argument: tArgument])
  [182] jmp [210]
  [185] getprop 1139 ............................ <pCallBack>
  [188] pushsymb 769 ............................ <#method>
  [191] getparam 2 .............................. <tMethod>
  [193] pushsymb 770 ............................ <#client>
  [196] getparam 3 .............................. <tClientID>
  [198] pushsymb 771 ............................ <#argument>
  [201] getparam 4 .............................. <tArgument>
  [203] pusharglist 6 ........................... <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [205] pushproplist ............................ <[#method: tMethod, #client: tClientID, #argument: tArgument]>
  [206] pusharglistnoret 2 ...................... <pCallBack, [#method: tMethod, #client: tClientID, #argument: tArgument]>
  [208] objcall 122 ............................. pCallBack.add([#method: tMethod, #client: tClientID, #argument: tArgument])
  [210] pushint8 1 .............................. <1>
  [212] pusharglistnoret 1 ...................... <1>
  [214] extcall 25 .............................. return 1
  [216] ret
end
