property pItemList

on construct me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 639 ............................. pItemList = [:]
  [  6] getprop 639 ............................. <pItemList>
  [  9] pusharglistnoret 1 ...................... <pItemList>
  [ 11] objcall 640 ............................. pItemList.sort()
  [ 14] pushint8 1 .............................. <1>
  [ 16] pusharglistnoret 1 ...................... <1>
  [ 18] extcall 25 .............................. return 1
  [ 20] ret
end

on deconstruct me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 639 ............................. pItemList = [:]
  [  6] pushint8 1 .............................. <1>
  [  8] pusharglistnoret 1 ...................... <1>
  [ 10] extcall 25 .............................. return 1
  [ 12] ret
end

on create me, tMessage
  [  0] getparam 1 .............................. <tMessage>
  [  2] pusharglist 1 ........................... <tMessage>
  [  4] extcall 46 .............................. <symbolp(tMessage)>
  [  6] not ..................................... <not symbolp(tMessage)>
  [  7] getparam 1 .............................. <tMessage>
  [  9] pusharglist 1 ........................... <tMessage>
  [ 11] extcall 38 .............................. <stringp(tMessage)>
  [ 13] not ..................................... <not stringp(tMessage)>
  [ 14] and ..................................... <not symbolp(tMessage) and not stringp(tMessage)>
  [ 15] jmpifz [ 35] ............................ if not symbolp(tMessage) and not stringp(tMessage) then
  [ 18] getparam 0 .............................. <me>
  [ 20] pushcons 0 .............................. <"Symbol or string expected:">
  [ 22] getparam 1 .............................. <tMessage>
  [ 24] joinpadstr .............................. <"Symbol or string expected:" && tMessage>
  [ 25] pushsymb 81 ............................. <#create>
  [ 27] pusharglist 3 ........................... <me, "Symbol or string expected:" && tMessage, #create>
  [ 29] extcall 39 .............................. <error(me, "Symbol or string expected:" && tMessage, #create)>
  [ 31] pusharglistnoret 1 ...................... <error(me, "Symbol or string expected:" && tMessage, #create)>
  [ 33] extcall 25 .............................. return error(me, "Symbol or string expected:" && tMessage, #create)
  [ 35] getparam 0 .............................. <me>
  [ 37] pushsymb 639 ............................ <#pItemList>
  [ 40] getparam 1 .............................. <tMessage>
  [ 42] pusharglist 3 ........................... <me, #pItemList, tMessage>
  [ 44] objcall 290 ............................. <me.pItemList[tMessage]>
  [ 47] pusharglist 1 ........................... <me.pItemList[tMessage]>
  [ 49] extcall 20 .............................. <voidp(me.pItemList[tMessage])>
  [ 51] not ..................................... <not voidp(me.pItemList[tMessage])>
  [ 52] jmpifz [ 72] ............................ if not voidp(me.pItemList[tMessage]) then
  [ 55] getparam 0 .............................. <me>
  [ 57] pushcons 1 .............................. <"Broker task already exists:">
  [ 59] getparam 1 .............................. <tMessage>
  [ 61] joinpadstr .............................. <"Broker task already exists:" && tMessage>
  [ 62] pushsymb 81 ............................. <#create>
  [ 64] pusharglist 3 ........................... <me, "Broker task already exists:" && tMessage, #create>
  [ 66] extcall 39 .............................. <error(me, "Broker task already exists:" && tMessage, #create)>
  [ 68] pusharglistnoret 1 ...................... <error(me, "Broker task already exists:" && tMessage, #create)>
  [ 70] extcall 25 .............................. return error(me, "Broker task already exists:" && tMessage, #create)
  [ 72] getparam 0 .............................. <me>
  [ 74] pushsymb 639 ............................ <#pItemList>
  [ 77] getparam 1 .............................. <tMessage>
  [ 79] pusharglist 0 ........................... <[:]>
  [ 81] pushproplist ............................ <[:]>
  [ 82] pusharglistnoret 4 ...................... <me, #pItemList, tMessage, [:]>
  [ 84] objcall 889 ............................. me.pItemList[tMessage] = [:]
  [ 87] pushint8 1 .............................. <1>
  [ 89] pusharglistnoret 1 ...................... <1>
  [ 91] extcall 25 .............................. return 1
  [ 93] ret
end

on Remove me, tMessage
  [  0] getparam 1 .............................. <tMessage>
  [  2] pusharglist 1 ........................... <tMessage>
  [  4] extcall 46 .............................. <symbolp(tMessage)>
  [  6] not ..................................... <not symbolp(tMessage)>
  [  7] getparam 1 .............................. <tMessage>
  [  9] pusharglist 1 ........................... <tMessage>
  [ 11] extcall 38 .............................. <stringp(tMessage)>
  [ 13] not ..................................... <not stringp(tMessage)>
  [ 14] and ..................................... <not symbolp(tMessage) and not stringp(tMessage)>
  [ 15] jmpifz [ 35] ............................ if not symbolp(tMessage) and not stringp(tMessage) then
  [ 18] getparam 0 .............................. <me>
  [ 20] pushcons 0 .............................. <"Symbol or string expected:">
  [ 22] getparam 1 .............................. <tMessage>
  [ 24] joinpadstr .............................. <"Symbol or string expected:" && tMessage>
  [ 25] pushsymb 125 ............................ <#Remove>
  [ 27] pusharglist 3 ........................... <me, "Symbol or string expected:" && tMessage, #Remove>
  [ 29] extcall 39 .............................. <error(me, "Symbol or string expected:" && tMessage, #Remove)>
  [ 31] pusharglistnoret 1 ...................... <error(me, "Symbol or string expected:" && tMessage, #Remove)>
  [ 33] extcall 25 .............................. return error(me, "Symbol or string expected:" && tMessage, #Remove)
  [ 35] getparam 0 .............................. <me>
  [ 37] pushsymb 639 ............................ <#pItemList>
  [ 40] getparam 1 .............................. <tMessage>
  [ 42] pusharglist 3 ........................... <me, #pItemList, tMessage>
  [ 44] objcall 290 ............................. <me.pItemList[tMessage]>
  [ 47] pusharglist 1 ........................... <me.pItemList[tMessage]>
  [ 49] extcall 20 .............................. <voidp(me.pItemList[tMessage])>
  [ 51] jmpifz [ 71] ............................ if voidp(me.pItemList[tMessage]) then
  [ 54] getparam 0 .............................. <me>
  [ 56] pushcons 2 .............................. <"Broker task not found:">
  [ 58] getparam 1 .............................. <tMessage>
  [ 60] joinpadstr .............................. <"Broker task not found:" && tMessage>
  [ 61] pushsymb 125 ............................ <#Remove>
  [ 63] pusharglist 3 ........................... <me, "Broker task not found:" && tMessage, #Remove>
  [ 65] extcall 39 .............................. <error(me, "Broker task not found:" && tMessage, #Remove)>
  [ 67] pusharglistnoret 1 ...................... <error(me, "Broker task not found:" && tMessage, #Remove)>
  [ 69] extcall 25 .............................. return error(me, "Broker task not found:" && tMessage, #Remove)
  [ 71] getparam 0 .............................. <me>
  [ 73] getchainedprop 639 ...................... <me.pItemList>
  [ 76] getparam 1 .............................. <tMessage>
  [ 78] pusharglist 2 ........................... <me.pItemList, tMessage>
  [ 80] objcall 659 ............................. <me.pItemList.deleteProp(tMessage)>
  [ 83] pusharglistnoret 1 ...................... <me.pItemList.deleteProp(tMessage)>
  [ 85] extcall 25 .............................. return me.pItemList.deleteProp(tMessage)
  [ 87] ret
end

on register me, tMessage, tClientID, tMethod
  [  0] getparam 1 .............................. <tMessage>
  [  2] pusharglist 1 ........................... <tMessage>
  [  4] extcall 46 .............................. <symbolp(tMessage)>
  [  6] not ..................................... <not symbolp(tMessage)>
  [  7] getparam 1 .............................. <tMessage>
  [  9] pusharglist 1 ........................... <tMessage>
  [ 11] extcall 38 .............................. <stringp(tMessage)>
  [ 13] not ..................................... <not stringp(tMessage)>
  [ 14] and ..................................... <not symbolp(tMessage) and not stringp(tMessage)>
  [ 15] jmpifz [ 36] ............................ if not symbolp(tMessage) and not stringp(tMessage) then
  [ 18] getparam 0 .............................. <me>
  [ 20] pushcons 0 .............................. <"Symbol or string expected:">
  [ 22] getparam 1 .............................. <tMessage>
  [ 24] joinpadstr .............................. <"Symbol or string expected:" && tMessage>
  [ 25] pushsymb 360 ............................ <#register>
  [ 28] pusharglist 3 ........................... <me, "Symbol or string expected:" && tMessage, #register>
  [ 30] extcall 39 .............................. <error(me, "Symbol or string expected:" && tMessage, #register)>
  [ 32] pusharglistnoret 1 ...................... <error(me, "Symbol or string expected:" && tMessage, #register)>
  [ 34] extcall 25 .............................. return error(me, "Symbol or string expected:" && tMessage, #register)
  [ 36] getparam 2 .............................. <tClientID>
  [ 38] pusharglist 1 ........................... <tClientID>
  [ 40] extcall 67 .............................. <objectExists(tClientID)>
  [ 42] not ..................................... <not objectExists(tClientID)>
  [ 43] jmpifz [ 64] ............................ if not objectExists(tClientID) then
  [ 46] getparam 0 .............................. <me>
  [ 48] pushcons 3 .............................. <"Object not found:">
  [ 50] getparam 2 .............................. <tClientID>
  [ 52] joinpadstr .............................. <"Object not found:" && tClientID>
  [ 53] pushsymb 360 ............................ <#register>
  [ 56] pusharglist 3 ........................... <me, "Object not found:" && tClientID, #register>
  [ 58] extcall 39 .............................. <error(me, "Object not found:" && tClientID, #register)>
  [ 60] pusharglistnoret 1 ...................... <error(me, "Object not found:" && tClientID, #register)>
  [ 62] extcall 25 .............................. return error(me, "Object not found:" && tClientID, #register)
  [ 64] getparam 0 .............................. <me>
  [ 66] pushsymb 639 ............................ <#pItemList>
  [ 69] getparam 1 .............................. <tMessage>
  [ 71] pusharglist 3 ........................... <me, #pItemList, tMessage>
  [ 73] objcall 290 ............................. <me.pItemList[tMessage]>
  [ 76] pusharglist 1 ........................... <me.pItemList[tMessage]>
  [ 78] extcall 20 .............................. <voidp(me.pItemList[tMessage])>
  [ 80] jmpifz [ 98] ............................ if voidp(me.pItemList[tMessage]) then
  [ 83] getparam 0 .............................. <me>
  [ 85] pushsymb 639 ............................ <#pItemList>
  [ 88] getparam 1 .............................. <tMessage>
  [ 90] pusharglist 0 ........................... <[:]>
  [ 92] pushproplist ............................ <[:]>
  [ 93] pusharglistnoret 4 ...................... <me, #pItemList, tMessage, [:]>
  [ 95] objcall 889 ............................. me.pItemList[tMessage] = [:]
  [ 98] getparam 0 .............................. <me>
  [100] pushsymb 639 ............................ <#pItemList>
  [103] getparam 1 .............................. <tMessage>
  [105] pusharglist 3 ........................... <me, #pItemList, tMessage>
  [107] objcall 288 ............................. <me.pItemList[tMessage]>
  [110] getparam 2 .............................. <tClientID>
  [112] getparam 3 .............................. <tMethod>
  [114] pusharglistnoret 3 ...................... <me.pItemList[tMessage], tClientID, tMethod>
  [116] objcall 24 .............................. me.pItemList[tMessage][tClientID] = tMethod
  [118] pushint8 1 .............................. <1>
  [120] pusharglistnoret 1 ...................... <1>
  [122] extcall 25 .............................. return 1
  [124] ret
end

on unregister me, tMessage, tClientID
  [  0] getparam 1 .............................. <tMessage>
  [  2] pusharglist 1 ........................... <tMessage>
  [  4] extcall 46 .............................. <symbolp(tMessage)>
  [  6] not ..................................... <not symbolp(tMessage)>
  [  7] getparam 1 .............................. <tMessage>
  [  9] pusharglist 1 ........................... <tMessage>
  [ 11] extcall 38 .............................. <stringp(tMessage)>
  [ 13] not ..................................... <not stringp(tMessage)>
  [ 14] and ..................................... <not symbolp(tMessage) and not stringp(tMessage)>
  [ 15] jmpifz [ 36] ............................ if not symbolp(tMessage) and not stringp(tMessage) then
  [ 18] getparam 0 .............................. <me>
  [ 20] pushcons 0 .............................. <"Symbol or string expected:">
  [ 22] getparam 1 .............................. <tMessage>
  [ 24] joinpadstr .............................. <"Symbol or string expected:" && tMessage>
  [ 25] pushsymb 361 ............................ <#unregister>
  [ 28] pusharglist 3 ........................... <me, "Symbol or string expected:" && tMessage, #unregister>
  [ 30] extcall 39 .............................. <error(me, "Symbol or string expected:" && tMessage, #unregister)>
  [ 32] pusharglistnoret 1 ...................... <error(me, "Symbol or string expected:" && tMessage, #unregister)>
  [ 34] extcall 25 .............................. return error(me, "Symbol or string expected:" && tMessage, #unregister)
  [ 36] getparam 0 .............................. <me>
  [ 38] pushsymb 639 ............................ <#pItemList>
  [ 41] getparam 1 .............................. <tMessage>
  [ 43] pusharglist 3 ........................... <me, #pItemList, tMessage>
  [ 45] objcall 290 ............................. <me.pItemList[tMessage]>
  [ 48] setlocal 0 .............................. tList = me.pItemList[tMessage]
  [ 50] getlocal 0 .............................. <tList>
  [ 52] pusharglist 1 ........................... <tList>
  [ 54] extcall 20 .............................. <voidp(tList)>
  [ 56] jmpifz [ 64] ............................ if voidp(tList) then
  [ 59] pushzero ................................ <0>
  [ 60] pusharglistnoret 1 ...................... <0>
  [ 62] extcall 25 .............................. return 0
  [ 64] getlocal 0 .............................. <tList>
  [ 66] getparam 2 .............................. <tClientID>
  [ 68] pusharglistnoret 2 ...................... <tList, tClientID>
  [ 70] objcall 659 ............................. tList.deleteProp(tClientID)
  [ 73] getlocal 0 .............................. <tList>
  [ 75] getobjprop 22 ........................... <tList.count>
  [ 77] pushzero ................................ <0>
  [ 78] eq ...................................... <tList.count = 0>
  [ 79] jmpifz [ 90] ............................ if tList.count = 0 then
  [ 82] getparam 0 .............................. <me>
  [ 84] getparam 1 .............................. <tMessage>
  [ 86] pusharglistnoret 2 ...................... <me, tMessage>
  [ 88] objcall 125 ............................. me.Remove(tMessage)
  [ 90] pushint8 1 .............................. <1>
  [ 92] pusharglistnoret 1 ...................... <1>
  [ 94] extcall 25 .............................. return 1
  [ 96] ret
end

on execute me, tMessage, tArgA, tArgB, tArgC
  [  0] getparam 0 .............................. <me>
  [  2] pushsymb 639 ............................ <#pItemList>
  [  5] getparam 1 .............................. <tMessage>
  [  7] pusharglist 3 ........................... <me, #pItemList, tMessage>
  [  9] objcall 290 ............................. <me.pItemList[tMessage]>
  [ 12] setlocal 0 .............................. tList = me.pItemList[tMessage]
  [ 14] getlocal 0 .............................. <tList>
  [ 16] pusharglist 1 ........................... <tList>
  [ 18] extcall 20 .............................. <voidp(tList)>
  [ 20] jmpifz [ 28] ............................ if voidp(tList) then
  [ 23] pushzero ................................ <0>
  [ 24] pusharglistnoret 1 ...................... <0>
  [ 26] extcall 25 .............................. return 0
  [ 28] getlocal 0 .............................. <tList>
  [ 30] getobjprop 22 ........................... <tList.count>
  [ 32] setlocal 1
  [ 34] getlocal 1
  [ 36] pushint8 1 .............................. <1>
  [ 38] gteq
  [ 39] jmpifz [118] ............................ repeat with i = tList.count down to 1
  [ 42] getlocal 0 .............................. <tList>
  [ 44] getlocal 1 .............................. <i>
  [ 46] pusharglist 2 ........................... <tList, i>
  [ 48] objcall 23 .............................. <tList.getPropAt(i)>
  [ 50] setlocal 2 .............................. tid = tList.getPropAt(i)
  [ 52] getlocal 0 .............................. <tList>
  [ 54] getlocal 1 .............................. <i>
  [ 56] pusharglist 2 ........................... <tList, i>
  [ 58] objcall 54 .............................. <tList[i]>
  [ 60] setlocal 3 .............................. tMethod = tList[i]
  [ 62] pusharglist 0 ........................... <>
  [ 64] extcall 93 .............................. <getObjectManager()>
  [ 66] getlocal 2 .............................. <tid>
  [ 68] pusharglist 2 ........................... <getObjectManager(), tid>
  [ 70] objcall 90 .............................. <getObjectManager().get(tid)>
  [ 72] setlocal 4 .............................. tObject = getObjectManager().get(tid)
  [ 74] getlocal 4 .............................. <tObject>
  [ 76] pushzero ................................ <0>
  [ 77] eq ...................................... <tObject = 0>
  [ 78] jmpifz [ 95] ............................ if tObject = 0 then
  [ 81] getparam 0 .............................. <me>
  [ 83] getparam 1 .............................. <tMessage>
  [ 85] getlocal 2 .............................. <tid>
  [ 87] pusharglistnoret 3 ...................... <me, tMessage, tid>
  [ 89] objcall 361 ............................. me.unregister(tMessage, tid)
  [ 92] jmp [109] ............................... next repeat
  [ 95] getlocal 3 .............................. <tMethod>
  [ 97] getlocal 4 .............................. <tObject>
  [ 99] getparam 2 .............................. <tArgA>
  [101] getparam 3 .............................. <tArgB>
  [103] getparam 4 .............................. <tArgC>
  [105] pusharglistnoret 5 ...................... <tMethod, tObject, tArgA, tArgB, tArgC>
  [107] extcall 68 .............................. call(tMethod, tObject, tArgA, tArgB, tArgC)
  [109] pushint8 -1
  [111] getlocal 1
  [113] add
  [114] setlocal 1
  [116] endrepeat [ 34]
  [118] pushint8 1 .............................. <1>
  [120] pusharglistnoret 1 ...................... <1>
  [122] extcall 25 .............................. return 1
  [124] ret
end

on exists me, tMessage
  [  0] getparam 0 .............................. <me>
  [  2] pushsymb 639 ............................ <#pItemList>
  [  5] getparam 1 .............................. <tMessage>
  [  7] pusharglist 3 ........................... <me, #pItemList, tMessage>
  [  9] objcall 290 ............................. <me.pItemList[tMessage]>
  [ 12] pusharglist 1 ........................... <me.pItemList[tMessage]>
  [ 14] extcall 20 .............................. <voidp(me.pItemList[tMessage])>
  [ 16] not ..................................... <not voidp(me.pItemList[tMessage])>
  [ 17] pusharglistnoret 1 ...................... <not voidp(me.pItemList[tMessage])>
  [ 19] extcall 25 .............................. return not voidp(me.pItemList[tMessage])
  [ 21] ret
end

on print me, tMessage
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getparam 0 .............................. <me>
  [  8] pushsymb 639 ............................ <#pItemList>
  [ 11] pusharglist 2 ........................... <me, #pItemList>
  [ 13] objcall 22 .............................. <me.pItemList.count>
  [ 15] lteq
  [ 16] jmpifz [125] ............................ repeat with i = 1 to me.pItemList.count
  [ 19] getparam 0 .............................. <me>
  [ 21] getchainedprop 639 ...................... <me.pItemList>
  [ 24] getlocal 0 .............................. <i>
  [ 26] pusharglist 2 ........................... <me.pItemList, i>
  [ 28] objcall 23 .............................. <me.pItemList.getPropAt(i)>
  [ 30] pusharglistnoret 1 ...................... <me.pItemList.getPropAt(i)>
  [ 32] extcall 642 ............................. put me.pItemList.getPropAt(i)
  [ 35] pushint8 1 .............................. <1>
  [ 37] setlocal 1
  [ 39] getlocal 1
  [ 41] getparam 0 .............................. <me>
  [ 43] pushsymb 639 ............................ <#pItemList>
  [ 46] getlocal 0 .............................. <i>
  [ 48] pusharglist 3 ........................... <me, #pItemList, i>
  [ 50] objcall 288 ............................. <me.pItemList[i]>
  [ 53] getobjprop 22 ........................... <me.pItemList[i].count>
  [ 55] lteq
  [ 56] jmpifz [116] ............................ repeat with j = 1 to me.pItemList[i].count
  [ 59] pushcons 4 .............................. <TAB>
  [ 61] getparam 0 .............................. <me>
  [ 63] pushsymb 639 ............................ <#pItemList>
  [ 66] getlocal 0 .............................. <i>
  [ 68] pusharglist 3 ........................... <me, #pItemList, i>
  [ 70] objcall 288 ............................. <me.pItemList[i]>
  [ 73] getlocal 1 .............................. <j>
  [ 75] pusharglist 2 ........................... <me.pItemList[i], j>
  [ 77] objcall 23 .............................. <me.pItemList[i].getPropAt(j)>
  [ 79] joinstr ................................. <TAB & me.pItemList[i].getPropAt(j)>
  [ 80] pushcons 5 .............................. <"->">
  [ 82] joinpadstr .............................. <TAB & me.pItemList[i].getPropAt(j) && "->">
  [ 83] getparam 0 .............................. <me>
  [ 85] pushsymb 639 ............................ <#pItemList>
  [ 88] getlocal 0 .............................. <i>
  [ 90] pusharglist 3 ........................... <me, #pItemList, i>
  [ 92] objcall 288 ............................. <me.pItemList[i]>
  [ 95] getlocal 1 .............................. <j>
  [ 97] pusharglist 2 ........................... <me.pItemList[i], j>
  [ 99] objcall 54 .............................. <me.pItemList[i][j]>
  [101] joinpadstr .............................. <TAB & me.pItemList[i].getPropAt(j) && "->" && me.pItemList[i][j]>
  [102] pusharglistnoret 1 ...................... <TAB & me.pItemList[i].getPropAt(j) && "->" && me.pItemList[i][j]>
  [104] extcall 642 ............................. put TAB & me.pItemList[i].getPropAt(j) && "->" && me.pItemList[i][j]
  [107] pushint8 1
  [109] getlocal 1
  [111] add
  [112] setlocal 1
  [114] endrepeat [ 39]
  [116] pushint8 1
  [118] getlocal 0
  [120] add
  [121] setlocal 0
  [123] endrepeat [  4]
  [125] pushint8 1 .............................. <1>
  [127] pusharglistnoret 1 ...................... <1>
  [129] extcall 25 .............................. return 1
  [131] ret
end
