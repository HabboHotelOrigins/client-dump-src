property pHost, pPort, pXtra, pMsgStruct, pConnectionOk, pConnectionSecured, pConnectionShouldBeKilled, pEncryptionOn, pDecoder, pEncoder, pHeaderDecoder, pHeaderEncoder, pLastContent, pContentChunk, pLogMode, pLogfield, pCommandsPntr, pListenersPntr, pDecipherOn, pD, pUnicodeDirector, pMsgOffset, pMsgSize, pToken, pMsgCount, pTx, pRx, pHelloReceived

on construct me
  [  0] gettoplevelprop 909 ..................... <_player>
  [  3] getobjprop 910 .......................... <_player.productVersion>
  [  6] pushint8 1 .............................. <1>
  [  8] pushint8 2 .............................. <2>
  [ 10] pusharglist 3 ........................... <_player.productVersion, 1, 2>
  [ 12] extcall 932 ............................. <chars(_player.productVersion, 1, 2)>
  [ 15] pusharglist 1 ........................... <chars(_player.productVersion, 1, 2)>
  [ 17] extcall 113 ............................. <value(chars(_player.productVersion, 1, 2))>
  [ 19] pushint8 11 ............................. <11>
  [ 21] gteq .................................... <value(chars(_player.productVersion, 1, 2)) >= 11>
  [ 22] jmpifz [ 33] ............................ if value(chars(_player.productVersion, 1, 2)) >= 11 then / else
  [ 25] pushint8 1 .............................. <1>
  [ 27] setprop 911 ............................. pUnicodeDirector = 1
  [ 30] jmp [ 37]
  [ 33] pushzero ................................ <0>
  [ 34] setprop 911 ............................. pUnicodeDirector = 0
  [ 37] pushzero ................................ <0>
  [ 38] setprop 1203 ............................ pEncryptionOn = 0
  [ 41] pushcons 0 .............................. <"struct.message">
  [ 43] pusharglist 1 ........................... <"struct.message">
  [ 45] extcall 374 ............................. <getStructVariable("struct.message")>
  [ 48] setprop 1204 ............................ pMsgStruct = getStructVariable("struct.message")
  [ 51] getprop 1204 ............................ <pMsgStruct>
  [ 54] pushsymb 1205 ........................... <#connection>
  [ 57] getparam 0 .............................. <me>
  [ 59] pusharglistnoret 3 ...................... <pMsgStruct, #connection, me>
  [ 61] objcall 128 ............................. pMsgStruct.setaProp(#connection, me)
  [ 63] pushzero ................................ <0>
  [ 64] setprop 1206 ............................ pMsgOffset = 0
  [ 67] pushzero ................................ <0>
  [ 68] setprop 1207 ............................ pMsgSize = 0
  [ 71] pushzero ................................ <0>
  [ 72] setprop 1086 ............................ pDecoder = 0
  [ 75] pushzero ................................ <0>
  [ 76] setprop 1208 ............................ pEncoder = 0
  [ 79] pushzero ................................ <0>
  [ 80] setprop 1209 ............................ pHeaderDecoder = 0
  [ 83] pushzero ................................ <0>
  [ 84] setprop 1210 ............................ pHeaderEncoder = 0
  [ 87] pushcons 1 .............................. <EMPTY>
  [ 89] setprop 1211 ............................ pLastContent = EMPTY
  [ 92] pushzero ................................ <0>
  [ 93] setprop 1212 ............................ pConnectionShouldBeKilled = 0
  [ 96] pushcons 2 .............................. <"struct.pointer">
  [ 98] pusharglist 1 ........................... <"struct.pointer">
  [100] extcall 374 ............................. <getStructVariable("struct.pointer")>
  [103] setprop 1213 ............................ pCommandsPntr = getStructVariable("struct.pointer")
  [106] pushcons 2 .............................. <"struct.pointer">
  [108] pusharglist 1 ........................... <"struct.pointer">
  [110] extcall 374 ............................. <getStructVariable("struct.pointer")>
  [113] setprop 1214 ............................ pListenersPntr = getStructVariable("struct.pointer")
  [116] getparam 0 .............................. <me>
  [118] pushcons 3 .............................. <"connection.log.level">
  [120] pushzero ................................ <0>
  [121] pusharglist 2 ........................... <"connection.log.level", 0>
  [123] extcall 373 ............................. <getIntVariable("connection.log.level", 0)>
  [126] pusharglistnoret 2 ...................... <me, getIntVariable("connection.log.level", 0)>
  [128] objcall 1183 ............................ me.setLogMode(getIntVariable("connection.log.level", 0))
  [131] pushcons 1 .............................. <EMPTY>
  [133] setprop 1215 ............................ pToken = EMPTY
  [136] pushzero ................................ <0>
  [137] setprop 1216 ............................ pMsgCount = 0
  [140] pushzero ................................ <0>
  [141] setprop 1217 ............................ pTx = 0
  [144] pushzero ................................ <0>
  [145] setprop 1218 ............................ pRx = 0
  [148] pushzero ................................ <0>
  [149] setprop 1219 ............................ pHelloReceived = 0
  [152] pushint8 1 .............................. <1>
  [154] pusharglistnoret 1 ...................... <1>
  [156] extcall 25 .............................. return 1
  [158] ret
end

on deconstruct me
  [  0] getparam 0 .............................. <me>
  [  2] pushint8 1 .............................. <1>
  [  4] pusharglist 2 ........................... <me, 1>
  [  6] objcall 1174 ............................ <me.disconnect(1)>
  [  9] pusharglistnoret 1 ...................... <me.disconnect(1)>
  [ 11] extcall 25 .............................. return me.disconnect(1)
  [ 13] ret
end

on connect me, tHost, tPort
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getparam 1 .............................. <tHost>
  [ 31] setprop 1220 ............................ pHost = tHost
  [ 34] getparam 2 .............................. <tPort>
  [ 36] setprop 1221 ............................ pPort = tPort
  [ 39] pushcons 4 .............................. <"Multiuser">
  [ 41] pusharglist 1 ........................... <"Multiuser">
  [ 43] extcall 1223 ............................ <xtra("Multiuser")>
  [ 46] pusharglist 1 ........................... <xtra("Multiuser")>
  [ 48] extcall 116 ............................. <new(xtra("Multiuser"))>
  [ 50] setprop 1222 ............................ pXtra = new(xtra("Multiuser"))
  [ 53] getprop 1222 ............................ <pXtra>
  [ 56] pushint8 16 ............................. <16>
  [ 58] pushint16 1024 .......................... <1024>
  [ 61] mul ..................................... <16 * 1024>
  [ 62] pushint8 100 ............................ <100>
  [ 64] pushint16 1024 .......................... <1024>
  [ 67] mul ..................................... <100 * 1024>
  [ 68] pushint8 100 ............................ <100>
  [ 70] pusharglistnoret 4 ...................... <pXtra, 16 * 1024, 100 * 1024, 100>
  [ 72] objcall 1224 ............................ pXtra.setNetBufferLimits(16 * 1024, 100 * 1024, 100)
  [ 75] getprop 1222 ............................ <pXtra>
  [ 78] pushsymb 1199 ........................... <#xtraMsgHandler>
  [ 81] getparam 0 .............................. <me>
  [ 83] pusharglist 3 ........................... <pXtra, #xtraMsgHandler, me>
  [ 85] objcall 1225 ............................ <pXtra.setNetMessageHandler(#xtraMsgHandler, me)>
  [ 88] setlocal 0 .............................. tErrCode = pXtra.setNetMessageHandler(#xtraMsgHandler, me)
  [ 90] getlocal 0 .............................. <tErrCode>
  [ 92] pushzero ................................ <0>
  [ 93] eq ...................................... <tErrCode = 0>
  [ 94] jmpifz [122] ............................ if tErrCode = 0 then / else
  [ 97] getprop 1222 ............................ <pXtra>
  [100] pushcons 5 .............................. <"*">
  [102] pushcons 5 .............................. <"*">
  [104] getprop 1220 ............................ <pHost>
  [107] getprop 1221 ............................ <pPort>
  [110] pushcons 5 .............................. <"*">
  [112] pushint8 1 .............................. <1>
  [114] pusharglistnoret 7 ...................... <pXtra, "*", "*", pHost, pPort, "*", 1>
  [116] objcall 1226 ............................ pXtra.connectToNetServer("*", "*", pHost, pPort, "*", 1)
  [119] jmp [140]
  [122] getparam 0 .............................. <me>
  [124] pushcons 6 .............................. <"Creation of callback failed:">
  [126] getlocal 0 .............................. <tErrCode>
  [128] joinpadstr .............................. <"Creation of callback failed:" && tErrCode>
  [129] pushsymb 856 ............................ <#connect>
  [132] pusharglist 3 ........................... <me, "Creation of callback failed:" && tErrCode, #connect>
  [134] extcall 39 .............................. <error(me, "Creation of callback failed:" && tErrCode, #connect)>
  [136] pusharglistnoret 1 ...................... <error(me, "Creation of callback failed:" && tErrCode, #connect)>
  [138] extcall 25 .............................. return error(me, "Creation of callback failed:" && tErrCode, #connect)
  [140] pushcons 1 .............................. <EMPTY>
  [142] setprop 1211 ............................ pLastContent = EMPTY
  [145] getprop 1227 ............................ <pLogMode>
  [148] pushzero ................................ <0>
  [149] gt ...................................... <pLogMode > 0>
  [150] jmpifz [177] ............................ if pLogMode > 0 then
  [153] getparam 0 .............................. <me>
  [155] pushcons 7 .............................. <"Connection initialized:">
  [157] getparam 0 .............................. <me>
  [159] pusharglist 1 ........................... <me>
  [161] objcall 3 ............................... <me.getID()>
  [163] joinpadstr .............................. <"Connection initialized:" && me.getID()>
  [164] getprop 1220 ............................ <pHost>
  [167] joinpadstr .............................. <"Connection initialized:" && me.getID() && pHost>
  [168] getprop 1221 ............................ <pPort>
  [171] joinpadstr .............................. <"Connection initialized:" && me.getID() && pHost && pPort>
  [172] pusharglistnoret 2 ...................... <me, "Connection initialized:" && me.getID() && pHost && pPort>
  [174] objcall 1202 ............................ me.log("Connection initialized:" && me.getID() && pHost && pPort)
  [177] pushint8 1 .............................. <1>
  [179] pusharglistnoret 1 ...................... <1>
  [181] extcall 25 .............................. return 1
  [183] ret
end

on disconnect me, tControlled
  [  0] getparam 1 .............................. <tControlled>
  [  2] pushint8 1 .............................. <1>
  [  4] nteq .................................... <tControlled <> 1>
  [  5] jmpifz [ 18] ............................ if tControlled <> 1 then
  [  8] getparam 0 .............................. <me>
  [ 10] pushint8 1 .............................. <1>
  [ 12] inv ..................................... <-1>
  [ 13] pusharglistnoret 2 ...................... <me, -1>
  [ 15] objcall 1201 ............................ me.forwardMsg(-1)
  [ 18] pushint8 1 .............................. <1>
  [ 20] setprop 1212 ............................ pConnectionShouldBeKilled = 1
  [ 23] getprop 1222 ............................ <pXtra>
  [ 26] pusharglist 1 ........................... <pXtra>
  [ 28] extcall 112 ............................. <objectp(pXtra)>
  [ 30] jmpifz [ 65] ............................ if objectp(pXtra) then
  [ 33] getprop 1222 ............................ <pXtra>
  [ 36] pushzero ................................ <0>
  [ 37] pushzero ................................ <0>
  [ 38] pushzero ................................ <0>
  [ 39] pusharglist 1 ........................... <0>
  [ 41] extcall 861 ............................. <numToChar(0)>
  [ 44] pusharglistnoret 4 ...................... <pXtra, 0, 0, numToChar(0)>
  [ 46] objcall 1229 ............................ pXtra.sendNetMessage(0, 0, numToChar(0))
  [ 49] getprop 1222 ............................ <pXtra>
  [ 52] pusharglist 0 ........................... <>
  [ 54] extcall 32 .............................. <VOID>
  [ 56] pusharglist 0 ........................... <>
  [ 58] extcall 32 .............................. <VOID>
  [ 60] pusharglistnoret 3 ...................... <pXtra, VOID, VOID>
  [ 62] objcall 1225 ............................ pXtra.setNetMessageHandler(VOID, VOID)
  [ 65] pusharglist 0 ........................... <>
  [ 67] extcall 32 .............................. <VOID>
  [ 69] setprop 1222 ............................ pXtra = VOID
  [ 72] getparam 1 .............................. <tControlled>
  [ 74] not ..................................... <not tControlled>
  [ 75] jmpifz [ 96] ............................ if not tControlled then
  [ 78] getparam 0 .............................. <me>
  [ 80] pushcons 8 .............................. <"Connection disconnected:">
  [ 82] getparam 0 .............................. <me>
  [ 84] pusharglist 1 ........................... <me>
  [ 86] objcall 3 ............................... <me.getID()>
  [ 88] joinpadstr .............................. <"Connection disconnected:" && me.getID()>
  [ 89] pushsymb 1174 ........................... <#disconnect>
  [ 92] pusharglistnoret 3 ...................... <me, "Connection disconnected:" && me.getID(), #disconnect>
  [ 94] extcall 39 .............................. error(me, "Connection disconnected:" && me.getID(), #disconnect)
  [ 96] pushint8 1 .............................. <1>
  [ 98] pusharglistnoret 1 ...................... <1>
  [100] extcall 25 .............................. return 1
  [102] ret
end

on connectionReady me
  [  0] getprop 1231 ............................ <pConnectionOk>
  [  3] getprop 1232 ............................ <pConnectionSecured>
  [  6] and ..................................... <pConnectionOk and pConnectionSecured>
  [  7] pusharglistnoret 1 ...................... <pConnectionOk and pConnectionSecured>
  [  9] extcall 25 .............................. return pConnectionOk and pConnectionSecured
  [ 11] ret
end

on setDecoder me, tDecoder
  [  0] getparam 1 .............................. <tDecoder>
  [  2] pusharglist 1 ........................... <tDecoder>
  [  4] extcall 112 ............................. <objectp(tDecoder)>
  [  6] not ..................................... <not objectp(tDecoder)>
  [  7] jmpifz [ 31] ............................ if not objectp(tDecoder) then / else
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 9 .............................. <"Decoder object expected:">
  [ 14] getparam 1 .............................. <tDecoder>
  [ 16] joinpadstr .............................. <"Decoder object expected:" && tDecoder>
  [ 17] pushsymb 1175 ........................... <#setDecoder>
  [ 20] pusharglist 3 ........................... <me, "Decoder object expected:" && tDecoder, #setDecoder>
  [ 22] extcall 39 .............................. <error(me, "Decoder object expected:" && tDecoder, #setDecoder)>
  [ 24] pusharglistnoret 1 ...................... <error(me, "Decoder object expected:" && tDecoder, #setDecoder)>
  [ 26] extcall 25 .............................. return error(me, "Decoder object expected:" && tDecoder, #setDecoder)
  [ 28] jmp [ 42]
  [ 31] getparam 1 .............................. <tDecoder>
  [ 33] setprop 1086 ............................ pDecoder = tDecoder
  [ 36] pushint8 1 .............................. <1>
  [ 38] pusharglistnoret 1 ...................... <1>
  [ 40] extcall 25 .............................. return 1
  [ 42] ret
end

on getDecoder me
  [  0] getprop 1086 ............................ <pDecoder>
  [  3] pusharglistnoret 1 ...................... <pDecoder>
  [  5] extcall 25 .............................. return pDecoder
  [  7] ret
end

on setEncoder me, tEncoder
  [  0] getparam 1 .............................. <tEncoder>
  [  2] pusharglist 1 ........................... <tEncoder>
  [  4] extcall 112 ............................. <objectp(tEncoder)>
  [  6] not ..................................... <not objectp(tEncoder)>
  [  7] jmpifz [ 34] ............................ if not objectp(tEncoder) then / else
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 10 ............................. <"Encoder object expected:">
  [ 14] getparam 1 .............................. <tEncoder>
  [ 16] joinpadstr .............................. <"Encoder object expected:" && tEncoder>
  [ 17] pushsymb 1177 ........................... <#setEncoder>
  [ 20] pushsymb 972 ............................ <#major>
  [ 23] pusharglist 4 ........................... <me, "Encoder object expected:" && tEncoder, #setEncoder, #major>
  [ 25] extcall 39 .............................. <error(me, "Encoder object expected:" && tEncoder, #setEncoder, #major)>
  [ 27] pusharglistnoret 1 ...................... <error(me, "Encoder object expected:" && tEncoder, #setEncoder, #major)>
  [ 29] extcall 25 .............................. return error(me, "Encoder object expected:" && tEncoder, #setEncoder, #major)
  [ 31] jmp [ 45]
  [ 34] getparam 1 .............................. <tEncoder>
  [ 36] setprop 1208 ............................ pEncoder = tEncoder
  [ 39] pushint8 1 .............................. <1>
  [ 41] pusharglistnoret 1 ...................... <1>
  [ 43] extcall 25 .............................. return 1
  [ 45] ret
end

on getEncoder me
  [  0] getprop 1208 ............................ <pEncoder>
  [  3] pusharglistnoret 1 ...................... <pEncoder>
  [  5] extcall 25 .............................. return pEncoder
  [  7] ret
end

on setHeaderDecoder me, tDecoder
  [  0] getparam 1 .............................. <tDecoder>
  [  2] pusharglist 1 ........................... <tDecoder>
  [  4] extcall 112 ............................. <objectp(tDecoder)>
  [  6] not ..................................... <not objectp(tDecoder)>
  [  7] jmpifz [ 34] ............................ if not objectp(tDecoder) then / else
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 9 .............................. <"Decoder object expected:">
  [ 14] getparam 1 .............................. <tDecoder>
  [ 16] joinpadstr .............................. <"Decoder object expected:" && tDecoder>
  [ 17] pushsymb 1179 ........................... <#setHeaderDecoder>
  [ 20] pushsymb 972 ............................ <#major>
  [ 23] pusharglist 4 ........................... <me, "Decoder object expected:" && tDecoder, #setHeaderDecoder, #major>
  [ 25] extcall 39 .............................. <error(me, "Decoder object expected:" && tDecoder, #setHeaderDecoder, #major)>
  [ 27] pusharglistnoret 1 ...................... <error(me, "Decoder object expected:" && tDecoder, #setHeaderDecoder, #major)>
  [ 29] extcall 25 .............................. return error(me, "Decoder object expected:" && tDecoder, #setHeaderDecoder, #major)
  [ 31] jmp [ 45]
  [ 34] getparam 1 .............................. <tDecoder>
  [ 36] setprop 1209 ............................ pHeaderDecoder = tDecoder
  [ 39] pushint8 1 .............................. <1>
  [ 41] pusharglistnoret 1 ...................... <1>
  [ 43] extcall 25 .............................. return 1
  [ 45] ret
end

on getHeaderDecoder me
  [  0] getprop 1209 ............................ <pHeaderDecoder>
  [  3] pusharglistnoret 1 ...................... <pHeaderDecoder>
  [  5] extcall 25 .............................. return pHeaderDecoder
  [  7] ret
end

on setHeaderEncoder me, tEncoder
  [  0] getparam 1 .............................. <tEncoder>
  [  2] pusharglist 1 ........................... <tEncoder>
  [  4] extcall 112 ............................. <objectp(tEncoder)>
  [  6] not ..................................... <not objectp(tEncoder)>
  [  7] jmpifz [ 34] ............................ if not objectp(tEncoder) then / else
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 10 ............................. <"Encoder object expected:">
  [ 14] getparam 1 .............................. <tEncoder>
  [ 16] joinpadstr .............................. <"Encoder object expected:" && tEncoder>
  [ 17] pushsymb 1181 ........................... <#setHeaderEncoder>
  [ 20] pushsymb 972 ............................ <#major>
  [ 23] pusharglist 4 ........................... <me, "Encoder object expected:" && tEncoder, #setHeaderEncoder, #major>
  [ 25] extcall 39 .............................. <error(me, "Encoder object expected:" && tEncoder, #setHeaderEncoder, #major)>
  [ 27] pusharglistnoret 1 ...................... <error(me, "Encoder object expected:" && tEncoder, #setHeaderEncoder, #major)>
  [ 29] extcall 25 .............................. return error(me, "Encoder object expected:" && tEncoder, #setHeaderEncoder, #major)
  [ 31] jmp [ 45]
  [ 34] getparam 1 .............................. <tEncoder>
  [ 36] setprop 1210 ............................ pHeaderEncoder = tEncoder
  [ 39] pushint8 1 .............................. <1>
  [ 41] pusharglistnoret 1 ...................... <1>
  [ 43] extcall 25 .............................. return 1
  [ 45] ret
end

on getHeaderEncoder me
  [  0] getprop 1210 ............................ <pHeaderEncoder>
  [  3] pusharglistnoret 1 ...................... <pHeaderEncoder>
  [  5] extcall 25 .............................. return pHeaderEncoder
  [  7] ret
end

on setLogMode me, tMode
  [  0] getparam 1 .............................. <tMode>
  [  2] getobjprop 490 .......................... <tMode.ilk>
  [  5] pushsymb 957 ............................ <#integer>
  [  8] nteq .................................... <tMode.ilk <> #integer>
  [  9] jmpifz [ 30] ............................ if tMode.ilk <> #integer then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 11 ............................. <"Invalid argument:">
  [ 16] getparam 1 .............................. <tMode>
  [ 18] joinpadstr .............................. <"Invalid argument:" && tMode>
  [ 19] pushsymb 1183 ........................... <#setLogMode>
  [ 22] pusharglist 3 ........................... <me, "Invalid argument:" && tMode, #setLogMode>
  [ 24] extcall 39 .............................. <error(me, "Invalid argument:" && tMode, #setLogMode)>
  [ 26] pusharglistnoret 1 ...................... <error(me, "Invalid argument:" && tMode, #setLogMode)>
  [ 28] extcall 25 .............................. return error(me, "Invalid argument:" && tMode, #setLogMode)
  [ 30] getparam 1 .............................. <tMode>
  [ 32] setprop 1227 ............................ pLogMode = tMode
  [ 35] getprop 1227 ............................ <pLogMode>
  [ 38] pushint8 2 .............................. <2>
  [ 40] eq ...................................... <pLogMode = 2>
  [ 41] jmpifz [ 81] ............................ if pLogMode = 2 then
  [ 44] pushcons 12 ............................. <"connectionLog.text">
  [ 46] pusharglist 1 ........................... <"connectionLog.text">
  [ 48] extcall 170 ............................. <memberExists("connectionLog.text")>
  [ 50] jmpifz [ 69] ............................ if memberExists("connectionLog.text") then / else
  [ 53] pushcons 12 ............................. <"connectionLog.text">
  [ 55] pusharglist 1 ........................... <"connectionLog.text">
  [ 57] extcall 52 .............................. <getmemnum("connectionLog.text")>
  [ 59] pusharglist 1 ........................... <getmemnum("connectionLog.text")>
  [ 61] extcall 41 .............................. <member(getmemnum("connectionLog.text"))>
  [ 63] setprop 1235 ............................ pLogfield = member(getmemnum("connectionLog.text"))
  [ 66] jmp [ 81]
  [ 69] pusharglist 0 ........................... <>
  [ 71] extcall 32 .............................. <VOID>
  [ 73] setprop 1235 ............................ pLogfield = VOID
  [ 76] pushint8 1 .............................. <1>
  [ 78] setprop 1227 ............................ pLogMode = 1
  [ 81] pushint8 1 .............................. <1>
  [ 83] pusharglistnoret 1 ...................... <1>
  [ 85] extcall 25 .............................. return 1
  [ 87] ret
end

on getLogMode me
  [  0] getprop 1227 ............................ <pLogMode>
  [  3] pusharglistnoret 1 ...................... <pLogMode>
  [  5] extcall 25 .............................. return pLogMode
  [  7] ret
end

on setEncryption me, tBoolean
  [  0] getparam 1 .............................. <tBoolean>
  [  2] setprop 1203 ............................ pEncryptionOn = tBoolean
  [  5] pushint8 1 .............................. <1>
  [  7] setprop 1232 ............................ pConnectionSecured = 1
  [ 10] pushint8 1 .............................. <1>
  [ 12] pusharglistnoret 1 ...................... <1>
  [ 14] extcall 25 .............................. return 1
  [ 16] ret
end

on send me, tCmd, tMsg
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1212 ............................ <pConnectionShouldBeKilled>
  [ 32] jmpifz [ 40] ............................ if pConnectionShouldBeKilled then
  [ 35] pushzero ................................ <0>
  [ 36] pusharglistnoret 1 ...................... <0>
  [ 38] extcall 25 .............................. return 0
  [ 40] getparam 2 .............................. <tMsg>
  [ 42] getobjprop 490 .......................... <tMsg.ilk>
  [ 45] pushsymb 809 ............................ <#propList>
  [ 48] eq ...................................... <tMsg.ilk = #propList>
  [ 49] jmpifz [ 67] ............................ if tMsg.ilk = #propList then
  [ 52] getparam 0 .............................. <me>
  [ 54] getparam 1 .............................. <tCmd>
  [ 56] getparam 2 .............................. <tMsg>
  [ 58] pusharglist 3 ........................... <me, tCmd, tMsg>
  [ 60] objcall 1186 ............................ <me.sendNew(tCmd, tMsg)>
  [ 63] pusharglistnoret 1 ...................... <me.sendNew(tCmd, tMsg)>
  [ 65] extcall 25 .............................. return me.sendNew(tCmd, tMsg)
  [ 67] getprop 1231 ............................ <pConnectionOk>
  [ 70] getprop 1222 ............................ <pXtra>
  [ 73] pusharglist 1 ........................... <pXtra>
  [ 75] extcall 112 ............................. <objectp(pXtra)>
  [ 77] and ..................................... <pConnectionOk and objectp(pXtra)>
  [ 78] not ..................................... <not (pConnectionOk and objectp(pXtra))>
  [ 79] jmpifz [107] ............................ if not (pConnectionOk and objectp(pXtra)) then
  [ 82] getparam 0 .............................. <me>
  [ 84] pushcons 13 ............................. <"Connection not ready:">
  [ 86] getparam 0 .............................. <me>
  [ 88] pusharglist 1 ........................... <me>
  [ 90] objcall 3 ............................... <me.getID()>
  [ 92] joinpadstr .............................. <"Connection not ready:" && me.getID()>
  [ 93] pushsymb 1056 ........................... <#send>
  [ 96] pushsymb 972 ............................ <#major>
  [ 99] pusharglist 4 ........................... <me, "Connection not ready:" && me.getID(), #send, #major>
  [101] extcall 39 .............................. <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [103] pusharglistnoret 1 ...................... <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [105] extcall 25 .............................. return error(me, "Connection not ready:" && me.getID(), #send, #major)
  [107] getparam 2 .............................. <tMsg>
  [109] getobjprop 490 .......................... <tMsg.ilk>
  [112] pushsymb 595 ............................ <#string>
  [115] nteq .................................... <tMsg.ilk <> #string>
  [116] jmpifz [128] ............................ if tMsg.ilk <> #string then
  [119] getparam 2 .............................. <tMsg>
  [121] pusharglist 1 ........................... <tMsg>
  [123] extcall 595 ............................. <string(tMsg)>
  [126] setparam 2 .............................. tMsg = string(tMsg)
  [128] getprop 1203 ............................ <pEncryptionOn>
  [131] not ..................................... <not pEncryptionOn>
  [132] getprop 911 ............................. <pUnicodeDirector>
  [135] and ..................................... <not pEncryptionOn and pUnicodeDirector>
  [136] jmpifz [204] ............................ if not pEncryptionOn and pUnicodeDirector then
  [139] pushint8 1 .............................. <1>
  [141] setlocal 0
  [143] getlocal 0
  [145] getparam 2 .............................. <tMsg>
  [147] getobjprop 293 .......................... <tMsg.length>
  [150] lteq
  [151] jmpifz [204] ............................ repeat with i = 1 to tMsg.length
  [154] getparam 2 .............................. <tMsg>
  [156] pushsymb 291 ............................ <#char>
  [159] getlocal 0 .............................. <i>
  [161] pusharglist 3 ........................... <tMsg, #char, i>
  [163] objcall 290 ............................. <tMsg.char[i]>
  [166] pusharglist 1 ........................... <tMsg.char[i]>
  [168] extcall 917 ............................. <charToNum(tMsg.char[i])>
  [171] pushint8 127 ............................ <127>
  [173] gt ...................................... <charToNum(tMsg.char[i]) > 127>
  [174] jmpifz [195] ............................ if charToNum(tMsg.char[i]) > 127 then
  [177] getparam 0 .............................. <me>
  [179] pushcons 14 ............................. <"Encryption required for non-ascii content with SW11">
  [181] pushsymb 1056 ........................... <#send>
  [184] pushsymb 1237 ........................... <#critical>
  [187] pusharglist 4 ........................... <me, "Encryption required for non-ascii content with SW11", #send, #critical>
  [189] extcall 39 .............................. <error(me, "Encryption required for non-ascii content with SW11", #send, #critical)>
  [191] pusharglistnoret 1 ...................... <error(me, "Encryption required for non-ascii content with SW11", #send, #critical)>
  [193] extcall 25 .............................. return error(me, "Encryption required for non-ascii content with SW11", #send, #critical)
  [195] pushint8 1
  [197] getlocal 0
  [199] add
  [200] setlocal 0
  [202] endrepeat [143]
  [204] getparam 2 .............................. <tMsg>
  [206] pusharglist 1 ........................... <tMsg>
  [208] extcall 283 ............................. <encodeUTF8(tMsg)>
  [211] setparam 2 .............................. tMsg = encodeUTF8(tMsg)
  [213] getparam 1 .............................. <tCmd>
  [215] getobjprop 490 .......................... <tCmd.ilk>
  [218] pushsymb 957 ............................ <#integer>
  [221] nteq .................................... <tCmd.ilk <> #integer>
  [222] jmpifz [246] ............................ if tCmd.ilk <> #integer then
  [225] getparam 1 .............................. <tCmd>
  [227] setlocal 1 .............................. tStr = tCmd
  [229] getprop 1213 ............................ <pCommandsPntr>
  [232] pushsymb 113 ............................ <#value>
  [234] pusharglist 2 ........................... <pCommandsPntr, #value>
  [236] objcall 31 .............................. <pCommandsPntr.getaProp(#value)>
  [238] getlocal 1 .............................. <tStr>
  [240] pusharglist 2 ........................... <pCommandsPntr.getaProp(#value), tStr>
  [242] objcall 31 .............................. <pCommandsPntr.getaProp(#value).getaProp(tStr)>
  [244] setparam 1 .............................. tCmd = pCommandsPntr.getaProp(#value).getaProp(tStr)
  [246] getparam 1 .............................. <tCmd>
  [248] getobjprop 490 .......................... <tCmd.ilk>
  [251] pushsymb 32 ............................. <#void>
  [253] eq ...................................... <tCmd.ilk = #void>
  [254] jmpifz [275] ............................ if tCmd.ilk = #void then
  [257] getparam 0 .............................. <me>
  [259] pushcons 15 ............................. <"Unrecognized command!">
  [261] pushsymb 1056 ........................... <#send>
  [264] pushsymb 972 ............................ <#major>
  [267] pusharglist 4 ........................... <me, "Unrecognized command!", #send, #major>
  [269] extcall 39 .............................. <error(me, "Unrecognized command!", #send, #major)>
  [271] pusharglistnoret 1 ...................... <error(me, "Unrecognized command!", #send, #major)>
  [273] extcall 25 .............................. return error(me, "Unrecognized command!", #send, #major)
  [275] getprop 1227 ............................ <pLogMode>
  [278] pushzero ................................ <0>
  [279] gt ...................................... <pLogMode > 0>
  [280] jmpifz [307] ............................ if pLogMode > 0 then
  [283] getparam 0 .............................. <me>
  [285] pushcons 16 ............................. <"<--">
  [287] getlocal 1 .............................. <tStr>
  [289] joinpadstr .............................. <"<--" && tStr>
  [290] pushcons 17 ............................. <"(">
  [292] joinpadstr .............................. <"<--" && tStr && "(">
  [293] getparam 1 .............................. <tCmd>
  [295] joinstr ................................. <"<--" && tStr && "(" & tCmd>
  [296] pushcons 18 ............................. <")">
  [298] joinstr ................................. <"<--" && tStr && "(" & tCmd & ")">
  [299] getparam 2 .............................. <tMsg>
  [301] joinpadstr .............................. <"<--" && tStr && "(" & tCmd & ")" && tMsg>
  [302] pusharglistnoret 2 ...................... <me, "<--" && tStr && "(" & tCmd & ")" && tMsg>
  [304] objcall 1202 ............................ me.log("<--" && tStr && "(" & tCmd & ")" && tMsg)
  [307] getparam 1 .............................. <tCmd>
  [309] getparam 2 .............................. <tMsg>
  [311] joinstr ................................. <tCmd & tMsg>
  [312] setparam 2 .............................. tMsg = tCmd & tMsg
  [314] pushzero ................................ <0>
  [315] setlocal 2 .............................. tLength = 0
  [317] pushint8 1 .............................. <1>
  [319] setlocal 3
  [321] getlocal 3
  [323] getparam 2 .............................. <tMsg>
  [325] pusharglist 1 ........................... <tMsg>
  [327] extcall 293 ............................. <length(tMsg)>
  [330] lteq
  [331] jmpifz [383] ............................ repeat with tChar = 1 to length(tMsg)
  [334] getlocal 3 .............................. <tChar>
  [336] pushzero ................................ <0>
  [337] pushzero ................................ <0>
  [338] pushzero ................................ <0>
  [339] pushzero ................................ <0>
  [340] pushzero ................................ <0>
  [341] pushzero ................................ <0>
  [342] pushzero ................................ <0>
  [343] getparam 2 .............................. <tMsg>
  [345] getchunk ................................ <char tChar of tMsg>
  [346] pusharglist 1 ........................... <char tChar of tMsg>
  [348] extcall 917 ............................. <charToNum(char tChar of tMsg)>
  [351] setlocal 4 .............................. tCharNum = charToNum(char tChar of tMsg)
  [353] getlocal 2 .............................. <tLength>
  [355] pushint8 1 .............................. <1>
  [357] add ..................................... <tLength + 1>
  [358] getlocal 4 .............................. <tCharNum>
  [360] pushint16 255 ........................... <255>
  [363] gt ...................................... <tCharNum > 255>
  [364] getlocal 4 .............................. <tCharNum>
  [366] pushint16 256 ........................... <256>
  [369] mod ..................................... <tCharNum mod 256>
  [370] and ..................................... <(tCharNum > 255) and (tCharNum mod 256)>
  [371] add ..................................... <tLength + 1 + ((tCharNum > 255) and (tCharNum mod 256))>
  [372] setlocal 2 .............................. tLength = tLength + 1 + ((tCharNum > 255) and (tCharNum mod 256))
  [374] pushint8 1
  [376] getlocal 3
  [378] add
  [379] setlocal 3
  [381] endrepeat [321]
  [383] getlocal 2 .............................. <tLength>
  [385] pushint8 63 ............................. <63>
  [387] pusharglist 2 ........................... <tLength, 63>
  [389] extcall 863 ............................. <bitAnd(tLength, 63)>
  [392] pushint8 64 ............................. <64>
  [394] pusharglist 2 ........................... <bitAnd(tLength, 63), 64>
  [396] extcall 862 ............................. <bitOr(bitAnd(tLength, 63), 64)>
  [399] pusharglist 1 ........................... <bitOr(bitAnd(tLength, 63), 64)>
  [401] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength, 63), 64))>
  [404] setlocal 5 .............................. tL1 = numToChar(bitOr(bitAnd(tLength, 63), 64))
  [406] getlocal 2 .............................. <tLength>
  [408] pushint8 64 ............................. <64>
  [410] div ..................................... <tLength / 64>
  [411] pushint8 63 ............................. <63>
  [413] pusharglist 2 ........................... <tLength / 64, 63>
  [415] extcall 863 ............................. <bitAnd(tLength / 64, 63)>
  [418] pushint8 64 ............................. <64>
  [420] pusharglist 2 ........................... <bitAnd(tLength / 64, 63), 64>
  [422] extcall 862 ............................. <bitOr(bitAnd(tLength / 64, 63), 64)>
  [425] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 64, 63), 64)>
  [427] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength / 64, 63), 64))>
  [430] setlocal 6 .............................. tL2 = numToChar(bitOr(bitAnd(tLength / 64, 63), 64))
  [432] getlocal 2 .............................. <tLength>
  [434] pushint16 4096 .......................... <4096>
  [437] div ..................................... <tLength / 4096>
  [438] pushint8 63 ............................. <63>
  [440] pusharglist 2 ........................... <tLength / 4096, 63>
  [442] extcall 863 ............................. <bitAnd(tLength / 4096, 63)>
  [445] pushint8 64 ............................. <64>
  [447] pusharglist 2 ........................... <bitAnd(tLength / 4096, 63), 64>
  [449] extcall 862 ............................. <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [452] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [454] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))>
  [457] setlocal 7 .............................. tL3 = numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))
  [459] getlocal 7 .............................. <tL3>
  [461] getlocal 6 .............................. <tL2>
  [463] joinstr ................................. <tL3 & tL2>
  [464] getlocal 5 .............................. <tL1>
  [466] joinstr ................................. <tL3 & tL2 & tL1>
  [467] setlocal 8 .............................. tHeader = tL3 & tL2 & tL1
  [469] getprop 1203 ............................ <pEncryptionOn>
  [472] getprop 1208 ............................ <pEncoder>
  [475] pusharglist 1 ........................... <pEncoder>
  [477] extcall 112 ............................. <objectp(pEncoder)>
  [479] and ..................................... <pEncryptionOn and objectp(pEncoder)>
  [480] jmpifz [791] ............................ if pEncryptionOn and objectp(pEncoder) then
  [483] getparam 2 .............................. <tMsg>
  [485] setlocal 9 .............................. tOriginalContent = tMsg
  [487] getparam 2 .............................. <tMsg>
  [489] pushsymb 291 ............................ <#char>
  [492] pusharglist 2 ........................... <tMsg, #char>
  [494] objcall 22 .............................. <tMsg.char.count>
  [496] setlocal 10 ............................. tOriginalMessageLength = tMsg.char.count
  [498] getparam 0 .............................. <me>
  [500] getprop 1217 ............................ <pTx>
  [503] pusharglist 2 ........................... <me, pTx>
  [505] objcall 1198 ............................ <me.iterateRandom(pTx)>
  [508] setprop 1217 ............................ pTx = me.iterateRandom(pTx)
  [511] getprop 1208 ............................ <pEncoder>
  [514] getparam 2 .............................. <tMsg>
  [516] pusharglist 2 ........................... <pEncoder, tMsg>
  [518] objcall 1238 ............................ <pEncoder.encipher(tMsg)>
  [521] setparam 2 .............................. tMsg = pEncoder.encipher(tMsg)
  [523] getparam 2 .............................. <tMsg>
  [525] pushsymb 291 ............................ <#char>
  [528] pusharglist 2 ........................... <tMsg, #char>
  [530] objcall 22 .............................. <tMsg.char.count>
  [532] setlocal 2 .............................. tLength = tMsg.char.count
  [534] getlocal 2 .............................. <tLength>
  [536] pushint8 63 ............................. <63>
  [538] pusharglist 2 ........................... <tLength, 63>
  [540] extcall 863 ............................. <bitAnd(tLength, 63)>
  [543] pushint8 64 ............................. <64>
  [545] pusharglist 2 ........................... <bitAnd(tLength, 63), 64>
  [547] extcall 862 ............................. <bitOr(bitAnd(tLength, 63), 64)>
  [550] pusharglist 1 ........................... <bitOr(bitAnd(tLength, 63), 64)>
  [552] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength, 63), 64))>
  [555] setlocal 5 .............................. tL1 = numToChar(bitOr(bitAnd(tLength, 63), 64))
  [557] getlocal 2 .............................. <tLength>
  [559] pushint8 64 ............................. <64>
  [561] div ..................................... <tLength / 64>
  [562] pushint8 63 ............................. <63>
  [564] pusharglist 2 ........................... <tLength / 64, 63>
  [566] extcall 863 ............................. <bitAnd(tLength / 64, 63)>
  [569] pushint8 64 ............................. <64>
  [571] pusharglist 2 ........................... <bitAnd(tLength / 64, 63), 64>
  [573] extcall 862 ............................. <bitOr(bitAnd(tLength / 64, 63), 64)>
  [576] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 64, 63), 64)>
  [578] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength / 64, 63), 64))>
  [581] setlocal 6 .............................. tL2 = numToChar(bitOr(bitAnd(tLength / 64, 63), 64))
  [583] getlocal 2 .............................. <tLength>
  [585] pushint16 4096 .......................... <4096>
  [588] div ..................................... <tLength / 4096>
  [589] pushint8 63 ............................. <63>
  [591] pusharglist 2 ........................... <tLength / 4096, 63>
  [593] extcall 863 ............................. <bitAnd(tLength / 4096, 63)>
  [596] pushint8 64 ............................. <64>
  [598] pusharglist 2 ........................... <bitAnd(tLength / 4096, 63), 64>
  [600] extcall 862 ............................. <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [603] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [605] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))>
  [608] setlocal 7 .............................. tL3 = numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))
  [610] pushint8 127 ............................ <127>
  [612] pusharglist 1 ........................... <127>
  [614] extcall 657 ............................. <random(127)>
  [617] pusharglist 1 ........................... <random(127)>
  [619] extcall 861 ............................. <numToChar(random(127))>
  [622] getlocal 7 .............................. <tL3>
  [624] joinstr ................................. <numToChar(random(127)) & tL3>
  [625] getlocal 6 .............................. <tL2>
  [627] joinstr ................................. <numToChar(random(127)) & tL3 & tL2>
  [628] getlocal 5 .............................. <tL1>
  [630] joinstr ................................. <numToChar(random(127)) & tL3 & tL2 & tL1>
  [631] setlocal 8 .............................. tHeader = numToChar(random(127)) & tL3 & tL2 & tL1
  [633] pusharglist 0 ........................... <[]>
  [635] pushlist ................................ <[]>
  [636] setlocal 11 ............................. tHeaderUncData = []
  [638] pushint8 1 .............................. <1>
  [640] setlocal 0
  [642] getlocal 0
  [644] getlocal 8 .............................. <tHeader>
  [646] pushsymb 291 ............................ <#char>
  [649] pusharglist 2 ........................... <tHeader, #char>
  [651] objcall 22 .............................. <tHeader.char.count>
  [653] lteq
  [654] jmpifz [689] ............................ repeat with i = 1 to tHeader.char.count
  [657] getlocal 11 ............................. <tHeaderUncData>
  [659] getlocal 8 .............................. <tHeader>
  [661] pushsymb 291 ............................ <#char>
  [664] getlocal 0 .............................. <i>
  [666] pusharglist 3 ........................... <tHeader, #char, i>
  [668] objcall 290 ............................. <tHeader.char[i]>
  [671] pusharglist 1 ........................... <tHeader.char[i]>
  [673] extcall 917 ............................. <charToNum(tHeader.char[i])>
  [676] pusharglistnoret 2 ...................... <tHeaderUncData, charToNum(tHeader.char[i])>
  [678] objcall 122 ............................. tHeaderUncData.add(charToNum(tHeader.char[i]))
  [680] pushint8 1
  [682] getlocal 0
  [684] add
  [685] setlocal 0
  [687] endrepeat [642]
  [689] getprop 1210 ............................ <pHeaderEncoder>
  [692] getlocal 8 .............................. <tHeader>
  [694] pusharglist 2 ........................... <pHeaderEncoder, tHeader>
  [696] objcall 1238 ............................ <pHeaderEncoder.encipher(tHeader)>
  [699] setlocal 8 .............................. tHeader = pHeaderEncoder.encipher(tHeader)
  [701] pusharglist 0 ........................... <[]>
  [703] pushlist ................................ <[]>
  [704] setlocal 12 ............................. tHeaderDecData = []
  [706] pushint8 1 .............................. <1>
  [708] setlocal 0
  [710] getlocal 0
  [712] getlocal 8 .............................. <tHeader>
  [714] pushsymb 291 ............................ <#char>
  [717] pusharglist 2 ........................... <tHeader, #char>
  [719] objcall 22 .............................. <tHeader.char.count>
  [721] lteq
  [722] jmpifz [757] ............................ repeat with i = 1 to tHeader.char.count
  [725] getlocal 12 ............................. <tHeaderDecData>
  [727] getlocal 8 .............................. <tHeader>
  [729] pushsymb 291 ............................ <#char>
  [732] getlocal 0 .............................. <i>
  [734] pusharglist 3 ........................... <tHeader, #char, i>
  [736] objcall 290 ............................. <tHeader.char[i]>
  [739] pusharglist 1 ........................... <tHeader.char[i]>
  [741] extcall 917 ............................. <charToNum(tHeader.char[i])>
  [744] pusharglistnoret 2 ...................... <tHeaderDecData, charToNum(tHeader.char[i])>
  [746] objcall 122 ............................. tHeaderDecData.add(charToNum(tHeader.char[i]))
  [748] pushint8 1
  [750] getlocal 0
  [752] add
  [753] setlocal 0
  [755] endrepeat [710]
  [757] pushcons 19 ............................. <"Uncrypted message length ">
  [759] getlocal 10 ............................. <tOriginalMessageLength>
  [761] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength>
  [762] pushcons 20 ............................. <", Message length ">
  [764] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length ">
  [765] getlocal 2 .............................. <tLength>
  [767] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength>
  [768] pushcons 21 ............................. <", Header ">
  [770] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header ">
  [771] getlocal 11 ............................. <tHeaderUncData>
  [773] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData>
  [774] pushcons 22 ............................. <", Encrypted header ">
  [776] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header ">
  [777] getlocal 12 ............................. <tHeaderDecData>
  [779] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData>
  [780] pushcons 23 ............................. <", Message content : ">
  [782] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : ">
  [783] getlocal 9 .............................. <tOriginalContent>
  [785] joinstr ................................. <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : " & tOriginalContent>
  [786] pusharglistnoret 1 ...................... <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : " & tOriginalContent>
  [788] extcall 644 ............................. put "Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : " & tOriginalContent
  [791] getprop 1222 ............................ <pXtra>
  [794] pushzero ................................ <0>
  [795] pushzero ................................ <0>
  [796] getlocal 8 .............................. <tHeader>
  [798] getparam 2 .............................. <tMsg>
  [800] joinstr ................................. <tHeader & tMsg>
  [801] pusharglistnoret 4 ...................... <pXtra, 0, 0, tHeader & tMsg>
  [803] objcall 1229 ............................ pXtra.sendNetMessage(0, 0, tHeader & tMsg)
  [806] pushint8 1 .............................. <1>
  [808] pusharglistnoret 1 ...................... <1>
  [810] extcall 25 .............................. return 1
  [812] ret
end

on sendNew me, tCmd, tParmArr
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1231 ............................ <pConnectionOk>
  [ 32] getprop 1222 ............................ <pXtra>
  [ 35] pusharglist 1 ........................... <pXtra>
  [ 37] extcall 112 ............................. <objectp(pXtra)>
  [ 39] and ..................................... <pConnectionOk and objectp(pXtra)>
  [ 40] not ..................................... <not (pConnectionOk and objectp(pXtra))>
  [ 41] jmpifz [ 69] ............................ if not (pConnectionOk and objectp(pXtra)) then
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 13 ............................. <"Connection not ready:">
  [ 48] getparam 0 .............................. <me>
  [ 50] pusharglist 1 ........................... <me>
  [ 52] objcall 3 ............................... <me.getID()>
  [ 54] joinpadstr .............................. <"Connection not ready:" && me.getID()>
  [ 55] pushsymb 1056 ........................... <#send>
  [ 58] pushsymb 972 ............................ <#major>
  [ 61] pusharglist 4 ........................... <me, "Connection not ready:" && me.getID(), #send, #major>
  [ 63] extcall 39 .............................. <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [ 65] pusharglistnoret 1 ...................... <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [ 67] extcall 25 .............................. return error(me, "Connection not ready:" && me.getID(), #send, #major)
  [ 69] pushcons 1 .............................. <EMPTY>
  [ 71] setlocal 0 .............................. tMsg = EMPTY
  [ 73] pushint8 2 .............................. <2>
  [ 75] setlocal 1 .............................. tLength = 2
  [ 77] getparam 2 .............................. <tParmArr>
  [ 79] pusharglist 1 ........................... <tParmArr>
  [ 81] extcall 53 .............................. <listp(tParmArr)>
  [ 83] jmpifz [748] ............................ if listp(tParmArr) then
  [ 86] pushint8 1 .............................. <1>
  [ 88] setlocal 2
  [ 90] getlocal 2
  [ 92] getparam 2 .............................. <tParmArr>
  [ 94] getobjprop 22 ........................... <tParmArr.count>
  [ 96] lteq
  [ 97] jmpifz [748] ............................ repeat with i = 1 to tParmArr.count
  [100] getparam 2 .............................. <tParmArr>
  [102] getlocal 2 .............................. <i>
  [104] pusharglist 2 ........................... <tParmArr, i>
  [106] objcall 23 .............................. <tParmArr.getPropAt(i)>
  [108] setlocal 3 .............................. ttype = tParmArr.getPropAt(i)
  [110] getparam 2 .............................. <tParmArr>
  [112] getlocal 2 .............................. <i>
  [114] pusharglist 2 ........................... <tParmArr, i>
  [116] objcall 54 .............................. <tParmArr[i]>
  [118] setlocal 4 .............................. tParm = tParmArr[i]
  [120] getlocal 3 .............................. <ttype>
  [122] peek 0 .................................. case ttype of
  [124] pushsymb 595 ............................ <#string>
  [127] eq
  [128] jmpifz [349] ............................ (case) #string:
  [131] getlocal 4 .............................. <tParm>
  [133] pusharglist 1 ........................... <tParm>
  [135] extcall 283 ............................. <encodeUTF8(tParm)>
  [138] setlocal 4 .............................. tParm = encodeUTF8(tParm)
  [140] getlocal 4 .............................. <tParm>
  [142] pushint8 2 .............................. <2>
  [144] pusharglist 1 ........................... <2>
  [146] extcall 861 ............................. <numToChar(2)>
  [149] containsstr ............................. <tParm contains numToChar(2)>
  [150] jmpifz [160] ............................ if tParm contains numToChar(2) then
  [153] pop 1
  [155] pushzero ................................ <0>
  [156] pusharglistnoret 1 ...................... <0>
  [158] extcall 25 .............................. return 0
  [160] getlocal 4 .............................. <tParm>
  [162] pusharglist 1 ........................... <tParm>
  [164] extcall 595 ............................. <string(tParm)>
  [167] setlocal 4 .............................. tParm = string(tParm)
  [169] getlocal 4 .............................. <tParm>
  [171] pusharglist 1 ........................... <tParm>
  [173] extcall 490 ............................. <ilk(tParm)>
  [176] pushsymb 595 ............................ <#string>
  [179] nteq .................................... <ilk(tParm) <> #string>
  [180] jmpifz [212] ............................ if ilk(tParm) <> #string then
  [183] pop 1
  [185] getparam 0 .............................. <me>
  [187] pushcons 24 ............................. <"String expected:">
  [189] getparam 1 .............................. <tCmd>
  [191] joinpadstr .............................. <"String expected:" && tCmd>
  [192] pushcons 25 ............................. <":">
  [194] joinstr ................................. <"String expected:" && tCmd & ":">
  [195] getlocal 4 .............................. <tParm>
  [197] joinstr ................................. <"String expected:" && tCmd & ":" & tParm>
  [198] pushsymb 1186 ........................... <#sendNew>
  [201] pushsymb 972 ............................ <#major>
  [204] pusharglist 4 ........................... <me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major>
  [206] extcall 39 .............................. <error(me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [208] pusharglistnoret 1 ...................... <error(me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [210] extcall 25 .............................. return error(me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major)
  [212] pushzero ................................ <0>
  [213] setlocal 5 .............................. tLen = 0
  [215] pushint8 1 .............................. <1>
  [217] setlocal 6
  [219] getlocal 6
  [221] getlocal 4 .............................. <tParm>
  [223] pusharglist 1 ........................... <tParm>
  [225] extcall 293 ............................. <length(tParm)>
  [228] lteq
  [229] jmpifz [281] ............................ repeat with tChar = 1 to length(tParm)
  [232] getlocal 6 .............................. <tChar>
  [234] pushzero ................................ <0>
  [235] pushzero ................................ <0>
  [236] pushzero ................................ <0>
  [237] pushzero ................................ <0>
  [238] pushzero ................................ <0>
  [239] pushzero ................................ <0>
  [240] pushzero ................................ <0>
  [241] getlocal 4 .............................. <tParm>
  [243] getchunk ................................ <char tChar of tParm>
  [244] pusharglist 1 ........................... <char tChar of tParm>
  [246] extcall 917 ............................. <charToNum(char tChar of tParm)>
  [249] setlocal 7 .............................. tNum = charToNum(char tChar of tParm)
  [251] getlocal 5 .............................. <tLen>
  [253] pushint8 1 .............................. <1>
  [255] add ..................................... <tLen + 1>
  [256] getlocal 7 .............................. <tNum>
  [258] pushint16 255 ........................... <255>
  [261] gt ...................................... <tNum > 255>
  [262] getlocal 7 .............................. <tNum>
  [264] pushint16 256 ........................... <256>
  [267] mod ..................................... <tNum mod 256>
  [268] and ..................................... <(tNum > 255) and (tNum mod 256)>
  [269] add ..................................... <tLen + 1 + ((tNum > 255) and (tNum mod 256))>
  [270] setlocal 5 .............................. tLen = tLen + 1 + ((tNum > 255) and (tNum mod 256))
  [272] pushint8 1
  [274] getlocal 6
  [276] add
  [277] setlocal 6
  [279] endrepeat [219]
  [281] pushint8 64 ............................. <64>
  [283] getlocal 5 .............................. <tLen>
  [285] pushint8 64 ............................. <64>
  [287] div ..................................... <tLen / 64>
  [288] pusharglist 2 ........................... <64, tLen / 64>
  [290] extcall 862 ............................. <bitOr(64, tLen / 64)>
  [293] pusharglist 1 ........................... <bitOr(64, tLen / 64)>
  [295] extcall 861 ............................. <numToChar(bitOr(64, tLen / 64))>
  [298] setlocal 8 .............................. tBy1 = numToChar(bitOr(64, tLen / 64))
  [300] pushint8 64 ............................. <64>
  [302] pushint8 63 ............................. <63>
  [304] getlocal 5 .............................. <tLen>
  [306] pusharglist 2 ........................... <63, tLen>
  [308] extcall 863 ............................. <bitAnd(63, tLen)>
  [311] pusharglist 2 ........................... <64, bitAnd(63, tLen)>
  [313] extcall 862 ............................. <bitOr(64, bitAnd(63, tLen))>
  [316] pusharglist 1 ........................... <bitOr(64, bitAnd(63, tLen))>
  [318] extcall 861 ............................. <numToChar(bitOr(64, bitAnd(63, tLen)))>
  [321] setlocal 9 .............................. tBy2 = numToChar(bitOr(64, bitAnd(63, tLen)))
  [323] getlocal 0 .............................. <tMsg>
  [325] getlocal 8 .............................. <tBy1>
  [327] joinstr ................................. <tMsg & tBy1>
  [328] getlocal 9 .............................. <tBy2>
  [330] joinstr ................................. <tMsg & tBy1 & tBy2>
  [331] getlocal 4 .............................. <tParm>
  [333] joinstr ................................. <tMsg & tBy1 & tBy2 & tParm>
  [334] setlocal 0 .............................. tMsg = tMsg & tBy1 & tBy2 & tParm
  [336] getlocal 1 .............................. <tLength>
  [338] getlocal 5 .............................. <tLen>
  [340] add ..................................... <tLength + tLen>
  [341] pushint8 2 .............................. <2>
  [343] add ..................................... <tLength + tLen + 2>
  [344] setlocal 1 .............................. tLength = tLength + tLen + 2
  [346] jmp [736]
  [349] peek 0
  [351] pushsymb 1247 ........................... <#short>
  [354] eq
  [355] jmpifz [472] ............................ (case) #short:
  [358] getlocal 4 .............................. <tParm>
  [360] pusharglist 1 ........................... <tParm>
  [362] extcall 957 ............................. <integer(tParm)>
  [365] setlocal 4 .............................. tParm = integer(tParm)
  [367] getlocal 4 .............................. <tParm>
  [369] pusharglist 1 ........................... <tParm>
  [371] extcall 490 ............................. <ilk(tParm)>
  [374] pushsymb 957 ............................ <#integer>
  [377] nteq .................................... <ilk(tParm) <> #integer>
  [378] jmpifz [410] ............................ if ilk(tParm) <> #integer then
  [381] pop 1
  [383] getparam 0 .............................. <me>
  [385] pushcons 26 ............................. <"Short expected:">
  [387] getparam 1 .............................. <tCmd>
  [389] joinpadstr .............................. <"Short expected:" && tCmd>
  [390] pushcons 25 ............................. <":">
  [392] joinstr ................................. <"Short expected:" && tCmd & ":">
  [393] getlocal 4 .............................. <tParm>
  [395] joinstr ................................. <"Short expected:" && tCmd & ":" & tParm>
  [396] pushsymb 1186 ........................... <#sendNew>
  [399] pushsymb 972 ............................ <#major>
  [402] pusharglist 4 ........................... <me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major>
  [404] extcall 39 .............................. <error(me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [406] pusharglistnoret 1 ...................... <error(me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [408] extcall 25 .............................. return error(me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major)
  [410] pushint8 64 ............................. <64>
  [412] getlocal 4 .............................. <tParm>
  [414] pushint8 64 ............................. <64>
  [416] div ..................................... <tParm / 64>
  [417] pusharglist 2 ........................... <64, tParm / 64>
  [419] extcall 862 ............................. <bitOr(64, tParm / 64)>
  [422] pusharglist 1 ........................... <bitOr(64, tParm / 64)>
  [424] extcall 861 ............................. <numToChar(bitOr(64, tParm / 64))>
  [427] setlocal 8 .............................. tBy1 = numToChar(bitOr(64, tParm / 64))
  [429] pushint8 64 ............................. <64>
  [431] pushint8 63 ............................. <63>
  [433] getlocal 4 .............................. <tParm>
  [435] pusharglist 2 ........................... <63, tParm>
  [437] extcall 863 ............................. <bitAnd(63, tParm)>
  [440] pusharglist 2 ........................... <64, bitAnd(63, tParm)>
  [442] extcall 862 ............................. <bitOr(64, bitAnd(63, tParm))>
  [445] pusharglist 1 ........................... <bitOr(64, bitAnd(63, tParm))>
  [447] extcall 861 ............................. <numToChar(bitOr(64, bitAnd(63, tParm)))>
  [450] setlocal 9 .............................. tBy2 = numToChar(bitOr(64, bitAnd(63, tParm)))
  [452] getlocal 0 .............................. <tMsg>
  [454] getlocal 8 .............................. <tBy1>
  [456] joinstr ................................. <tMsg & tBy1>
  [457] getlocal 9 .............................. <tBy2>
  [459] joinstr ................................. <tMsg & tBy1 & tBy2>
  [460] setlocal 0 .............................. tMsg = tMsg & tBy1 & tBy2
  [462] getlocal 1 .............................. <tLength>
  [464] pushint8 2 .............................. <2>
  [466] add ..................................... <tLength + 2>
  [467] setlocal 1 .............................. tLength = tLength + 2
  [469] jmp [736]
  [472] peek 0
  [474] pushsymb 957 ............................ <#integer>
  [477] nteq
  [478] jmpifz [490] ............................ (case) #integer, ...
  [481] peek 0
  [483] pushsymb 1248 ........................... <#boolean>
  [486] eq
  [487] jmpifz [719] ............................ (case) ..., #boolean:
  [490] getlocal 3 .............................. <ttype>
  [492] pushsymb 1248 ........................... <#boolean>
  [495] eq ...................................... <ttype = #boolean>
  [496] jmpifz [505] ............................ if ttype = #boolean then
  [499] getlocal 4 .............................. <tParm>
  [501] pushzero ................................ <0>
  [502] nteq .................................... <tParm <> 0>
  [503] setlocal 4 .............................. tParm = tParm <> 0
  [505] getlocal 4 .............................. <tParm>
  [507] pusharglist 1 ........................... <tParm>
  [509] extcall 957 ............................. <integer(tParm)>
  [512] setlocal 4 .............................. tParm = integer(tParm)
  [514] getlocal 4 .............................. <tParm>
  [516] pusharglist 1 ........................... <tParm>
  [518] extcall 490 ............................. <ilk(tParm)>
  [521] pushsymb 957 ............................ <#integer>
  [524] nteq .................................... <ilk(tParm) <> #integer>
  [525] jmpifz [557] ............................ if ilk(tParm) <> #integer then
  [528] pop 1
  [530] getparam 0 .............................. <me>
  [532] pushcons 27 ............................. <"Integer expected:">
  [534] getparam 1 .............................. <tCmd>
  [536] joinpadstr .............................. <"Integer expected:" && tCmd>
  [537] pushcons 25 ............................. <":">
  [539] joinstr ................................. <"Integer expected:" && tCmd & ":">
  [540] getlocal 4 .............................. <tParm>
  [542] joinstr ................................. <"Integer expected:" && tCmd & ":" & tParm>
  [543] pushsymb 1186 ........................... <#sendNew>
  [546] pushsymb 972 ............................ <#major>
  [549] pusharglist 4 ........................... <me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major>
  [551] extcall 39 .............................. <error(me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [553] pusharglistnoret 1 ...................... <error(me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [555] extcall 25 .............................. return error(me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major)
  [557] getlocal 4 .............................. <tParm>
  [559] pushzero ................................ <0>
  [560] lt ...................................... <tParm < 0>
  [561] jmpifz [576] ............................ if tParm < 0 then / else
  [564] pushint8 4 .............................. <4>
  [566] setlocal 10 ............................. tNegMask = 4
  [568] getlocal 4 .............................. <tParm>
  [570] inv ..................................... <-tParm>
  [571] setlocal 4 .............................. tParm = -tParm
  [573] jmp [579]
  [576] pushzero ................................ <0>
  [577] setlocal 10 ............................. tNegMask = 0
  [579] pushint8 64 ............................. <64>
  [581] getlocal 4 .............................. <tParm>
  [583] pushint8 3 .............................. <3>
  [585] pusharglist 2 ........................... <tParm, 3>
  [587] extcall 863 ............................. <bitAnd(tParm, 3)>
  [590] add ..................................... <64 + bitAnd(tParm, 3)>
  [591] pusharglist 1 ........................... <64 + bitAnd(tParm, 3)>
  [593] extcall 861 ............................. <numToChar(64 + bitAnd(tParm, 3))>
  [596] setlocal 11 ............................. tStr = numToChar(64 + bitAnd(tParm, 3))
  [598] pushint8 1 .............................. <1>
  [600] setlocal 12 ............................. tBytes = 1
  [602] getlocal 4 .............................. <tParm>
  [604] pushint8 4 .............................. <4>
  [606] div ..................................... <tParm / 4>
  [607] setlocal 4 .............................. tParm = tParm / 4
  [609] getlocal 4 .............................. <tParm>
  [611] pushzero ................................ <0>
  [612] nteq .................................... <tParm <> 0>
  [613] jmpifz [653] ............................ repeat while tParm <> 0
  [616] getlocal 12 ............................. <tBytes>
  [618] pushint8 1 .............................. <1>
  [620] add ..................................... <tBytes + 1>
  [621] setlocal 12 ............................. tBytes = tBytes + 1
  [623] pushint8 64 ............................. <64>
  [625] getlocal 4 .............................. <tParm>
  [627] pushint8 63 ............................. <63>
  [629] pusharglist 2 ........................... <tParm, 63>
  [631] extcall 863 ............................. <bitAnd(tParm, 63)>
  [634] add ..................................... <64 + bitAnd(tParm, 63)>
  [635] pusharglist 1 ........................... <64 + bitAnd(tParm, 63)>
  [637] extcall 861 ............................. <numToChar(64 + bitAnd(tParm, 63))>
  [640] pushint8 11 ............................. <11>
  [642] put 37 .................................. put numToChar(64 + bitAnd(tParm, 63)) after tStr
  [644] getlocal 4 .............................. <tParm>
  [646] pushint8 64 ............................. <64>
  [648] div ..................................... <tParm / 64>
  [649] setlocal 4 .............................. tParm = tParm / 64
  [651] endrepeat [609]
  [653] pushint8 1 .............................. <1>
  [655] pushzero ................................ <0>
  [656] pushzero ................................ <0>
  [657] pushzero ................................ <0>
  [658] pushzero ................................ <0>
  [659] pushzero ................................ <0>
  [660] pushzero ................................ <0>
  [661] pushzero ................................ <0>
  [662] getlocal 11 ............................. <tStr>
  [664] getchunk ................................ <char 1 of tStr>
  [665] pusharglist 1 ........................... <char 1 of tStr>
  [667] extcall 917 ............................. <charToNum(char 1 of tStr)>
  [670] getlocal 12 ............................. <tBytes>
  [672] pushint8 8 .............................. <8>
  [674] mul ..................................... <tBytes * 8>
  [675] pusharglist 2 ........................... <charToNum(char 1 of tStr), tBytes * 8>
  [677] extcall 862 ............................. <bitOr(charToNum(char 1 of tStr), tBytes * 8)>
  [680] getlocal 10 ............................. <tNegMask>
  [682] pusharglist 2 ........................... <bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask>
  [684] extcall 862 ............................. <bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask)>
  [687] pusharglist 1 ........................... <bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask)>
  [689] extcall 861 ............................. <numToChar(bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask))>
  [692] pushzero ................................ <0>
  [693] put 37 .................................. put numToChar(bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask)) after tMsg
  [695] getlocal 11 ............................. <tStr>
  [697] pushint8 2 .............................. <2>
  [699] getlocal 12 ............................. <tBytes>
  [701] pusharglist 3 ........................... <tStr, 2, tBytes>
  [703] extcall 932 ............................. <chars(tStr, 2, tBytes)>
  [706] pushzero ................................ <0>
  [707] put 37 .................................. put chars(tStr, 2, tBytes) after tMsg
  [709] getlocal 1 .............................. <tLength>
  [711] getlocal 12 ............................. <tBytes>
  [713] add ..................................... <tLength + tBytes>
  [714] setlocal 1 .............................. tLength = tLength + tBytes
  [716] jmp [736] ............................... (case) otherwise:
  [719] getparam 0 .............................. <me>
  [721] pushcons 28 ............................. <"Unsupported param type:">
  [723] getlocal 3 .............................. <ttype>
  [725] joinpadstr .............................. <"Unsupported param type:" && ttype>
  [726] pushsymb 1056 ........................... <#send>
  [729] pushsymb 972 ............................ <#major>
  [732] pusharglistnoret 4 ...................... <me, "Unsupported param type:" && ttype, #send, #major>
  [734] extcall 39 .............................. error(me, "Unsupported param type:" && ttype, #send, #major)
  [736] pop 1 ................................... end case
  [738] pushint8 1
  [740] getlocal 2
  [742] add
  [743] setlocal 2
  [745] endrepeat [ 90]
  [748] getparam 1 .............................. <tCmd>
  [750] getobjprop 490 .......................... <tCmd.ilk>
  [753] pushsymb 957 ............................ <#integer>
  [756] nteq .................................... <tCmd.ilk <> #integer>
  [757] jmpifz [781] ............................ if tCmd.ilk <> #integer then
  [760] getparam 1 .............................. <tCmd>
  [762] setlocal 11 ............................. tStr = tCmd
  [764] getprop 1213 ............................ <pCommandsPntr>
  [767] pushsymb 113 ............................ <#value>
  [769] pusharglist 2 ........................... <pCommandsPntr, #value>
  [771] objcall 31 .............................. <pCommandsPntr.getaProp(#value)>
  [773] getlocal 11 ............................. <tStr>
  [775] pusharglist 2 ........................... <pCommandsPntr.getaProp(#value), tStr>
  [777] objcall 31 .............................. <pCommandsPntr.getaProp(#value).getaProp(tStr)>
  [779] setparam 1 .............................. tCmd = pCommandsPntr.getaProp(#value).getaProp(tStr)
  [781] getparam 1 .............................. <tCmd>
  [783] getobjprop 490 .......................... <tCmd.ilk>
  [786] pushsymb 32 ............................. <#void>
  [788] eq ...................................... <tCmd.ilk = #void>
  [789] jmpifz [810] ............................ if tCmd.ilk = #void then
  [792] getparam 0 .............................. <me>
  [794] pushcons 15 ............................. <"Unrecognized command!">
  [796] pushsymb 1056 ........................... <#send>
  [799] pushsymb 972 ............................ <#major>
  [802] pusharglist 4 ........................... <me, "Unrecognized command!", #send, #major>
  [804] extcall 39 .............................. <error(me, "Unrecognized command!", #send, #major)>
  [806] pusharglistnoret 1 ...................... <error(me, "Unrecognized command!", #send, #major)>
  [808] extcall 25 .............................. return error(me, "Unrecognized command!", #send, #major)
  [810] getprop 1227 ............................ <pLogMode>
  [813] pushzero ................................ <0>
  [814] gt ...................................... <pLogMode > 0>
  [815] jmpifz [842] ............................ if pLogMode > 0 then
  [818] getparam 0 .............................. <me>
  [820] pushcons 16 ............................. <"<--">
  [822] getlocal 11 ............................. <tStr>
  [824] joinpadstr .............................. <"<--" && tStr>
  [825] pushcons 17 ............................. <"(">
  [827] joinpadstr .............................. <"<--" && tStr && "(">
  [828] getparam 1 .............................. <tCmd>
  [830] joinstr ................................. <"<--" && tStr && "(" & tCmd>
  [831] pushcons 18 ............................. <")">
  [833] joinstr ................................. <"<--" && tStr && "(" & tCmd & ")">
  [834] getlocal 0 .............................. <tMsg>
  [836] joinpadstr .............................. <"<--" && tStr && "(" & tCmd & ")" && tMsg>
  [837] pusharglistnoret 2 ...................... <me, "<--" && tStr && "(" & tCmd & ")" && tMsg>
  [839] objcall 1202 ............................ me.log("<--" && tStr && "(" & tCmd & ")" && tMsg)
  [842] getparam 1 .............................. <tCmd>
  [844] getlocal 0 .............................. <tMsg>
  [846] joinstr ................................. <tCmd & tMsg>
  [847] setlocal 0 .............................. tMsg = tCmd & tMsg
  [849] getlocal 1 .............................. <tLength>
  [851] pushint8 63 ............................. <63>
  [853] pusharglist 2 ........................... <tLength, 63>
  [855] extcall 863 ............................. <bitAnd(tLength, 63)>
  [858] pushint8 64 ............................. <64>
  [860] pusharglist 2 ........................... <bitAnd(tLength, 63), 64>
  [862] extcall 862 ............................. <bitOr(bitAnd(tLength, 63), 64)>
  [865] pusharglist 1 ........................... <bitOr(bitAnd(tLength, 63), 64)>
  [867] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength, 63), 64))>
  [870] setlocal 13 ............................. tL1 = numToChar(bitOr(bitAnd(tLength, 63), 64))
  [872] getlocal 1 .............................. <tLength>
  [874] pushint8 64 ............................. <64>
  [876] div ..................................... <tLength / 64>
  [877] pushint8 63 ............................. <63>
  [879] pusharglist 2 ........................... <tLength / 64, 63>
  [881] extcall 863 ............................. <bitAnd(tLength / 64, 63)>
  [884] pushint8 64 ............................. <64>
  [886] pusharglist 2 ........................... <bitAnd(tLength / 64, 63), 64>
  [888] extcall 862 ............................. <bitOr(bitAnd(tLength / 64, 63), 64)>
  [891] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 64, 63), 64)>
  [893] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength / 64, 63), 64))>
  [896] setlocal 14 ............................. tL2 = numToChar(bitOr(bitAnd(tLength / 64, 63), 64))
  [898] getlocal 1 .............................. <tLength>
  [900] pushint16 4096 .......................... <4096>
  [903] div ..................................... <tLength / 4096>
  [904] pushint8 63 ............................. <63>
  [906] pusharglist 2 ........................... <tLength / 4096, 63>
  [908] extcall 863 ............................. <bitAnd(tLength / 4096, 63)>
  [911] pushint8 64 ............................. <64>
  [913] pusharglist 2 ........................... <bitAnd(tLength / 4096, 63), 64>
  [915] extcall 862 ............................. <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [918] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [920] extcall 861 ............................. <numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))>
  [923] setlocal 15 ............................. tL3 = numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))
  [925] getlocal 15 ............................. <tL3>
  [927] getlocal 14 ............................. <tL2>
  [929] joinstr ................................. <tL3 & tL2>
  [930] getlocal 13 ............................. <tL1>
  [932] joinstr ................................. <tL3 & tL2 & tL1>
  [933] setlocal 16 ............................. tHeader = tL3 & tL2 & tL1
  [935] getprop 1203 ............................ <pEncryptionOn>
  [938] getprop 1208 ............................ <pEncoder>
  [941] pusharglist 1 ........................... <pEncoder>
  [943] extcall 112 ............................. <objectp(pEncoder)>
  [945] and ..................................... <pEncryptionOn and objectp(pEncoder)>
  [946] jmpifz [1257] ........................... if pEncryptionOn and objectp(pEncoder) then
  [949] getlocal 0 .............................. <tMsg>
  [951] setlocal 17 ............................. tOriginalContent = tMsg
  [953] getlocal 0 .............................. <tMsg>
  [955] pushsymb 291 ............................ <#char>
  [958] pusharglist 2 ........................... <tMsg, #char>
  [960] objcall 22 .............................. <tMsg.char.count>
  [962] setlocal 18 ............................. tOriginalMessageLength = tMsg.char.count
  [964] getparam 0 .............................. <me>
  [966] getprop 1217 ............................ <pTx>
  [969] pusharglist 2 ........................... <me, pTx>
  [971] objcall 1198 ............................ <me.iterateRandom(pTx)>
  [974] setprop 1217 ............................ pTx = me.iterateRandom(pTx)
  [977] getprop 1208 ............................ <pEncoder>
  [980] getlocal 0 .............................. <tMsg>
  [982] pusharglist 2 ........................... <pEncoder, tMsg>
  [984] objcall 1238 ............................ <pEncoder.encipher(tMsg)>
  [987] setlocal 0 .............................. tMsg = pEncoder.encipher(tMsg)
  [989] getlocal 0 .............................. <tMsg>
  [991] pushsymb 291 ............................ <#char>
  [994] pusharglist 2 ........................... <tMsg, #char>
  [996] objcall 22 .............................. <tMsg.char.count>
  [998] setlocal 1 .............................. tLength = tMsg.char.count
  [1000] getlocal 1 ............................. <tLength>
  [1002] pushint8 63 ............................ <63>
  [1004] pusharglist 2 .......................... <tLength, 63>
  [1006] extcall 863 ............................ <bitAnd(tLength, 63)>
  [1009] pushint8 64 ............................ <64>
  [1011] pusharglist 2 .......................... <bitAnd(tLength, 63), 64>
  [1013] extcall 862 ............................ <bitOr(bitAnd(tLength, 63), 64)>
  [1016] pusharglist 1 .......................... <bitOr(bitAnd(tLength, 63), 64)>
  [1018] extcall 861 ............................ <numToChar(bitOr(bitAnd(tLength, 63), 64))>
  [1021] setlocal 13 ............................ tL1 = numToChar(bitOr(bitAnd(tLength, 63), 64))
  [1023] getlocal 1 ............................. <tLength>
  [1025] pushint8 64 ............................ <64>
  [1027] div .................................... <tLength / 64>
  [1028] pushint8 63 ............................ <63>
  [1030] pusharglist 2 .......................... <tLength / 64, 63>
  [1032] extcall 863 ............................ <bitAnd(tLength / 64, 63)>
  [1035] pushint8 64 ............................ <64>
  [1037] pusharglist 2 .......................... <bitAnd(tLength / 64, 63), 64>
  [1039] extcall 862 ............................ <bitOr(bitAnd(tLength / 64, 63), 64)>
  [1042] pusharglist 1 .......................... <bitOr(bitAnd(tLength / 64, 63), 64)>
  [1044] extcall 861 ............................ <numToChar(bitOr(bitAnd(tLength / 64, 63), 64))>
  [1047] setlocal 14 ............................ tL2 = numToChar(bitOr(bitAnd(tLength / 64, 63), 64))
  [1049] getlocal 1 ............................. <tLength>
  [1051] pushint16 4096 ......................... <4096>
  [1054] div .................................... <tLength / 4096>
  [1055] pushint8 63 ............................ <63>
  [1057] pusharglist 2 .......................... <tLength / 4096, 63>
  [1059] extcall 863 ............................ <bitAnd(tLength / 4096, 63)>
  [1062] pushint8 64 ............................ <64>
  [1064] pusharglist 2 .......................... <bitAnd(tLength / 4096, 63), 64>
  [1066] extcall 862 ............................ <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [1069] pusharglist 1 .......................... <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [1071] extcall 861 ............................ <numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))>
  [1074] setlocal 15 ............................ tL3 = numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))
  [1076] pushint8 127 ........................... <127>
  [1078] pusharglist 1 .......................... <127>
  [1080] extcall 657 ............................ <random(127)>
  [1083] pusharglist 1 .......................... <random(127)>
  [1085] extcall 861 ............................ <numToChar(random(127))>
  [1088] getlocal 15 ............................ <tL3>
  [1090] joinstr ................................ <numToChar(random(127)) & tL3>
  [1091] getlocal 14 ............................ <tL2>
  [1093] joinstr ................................ <numToChar(random(127)) & tL3 & tL2>
  [1094] getlocal 13 ............................ <tL1>
  [1096] joinstr ................................ <numToChar(random(127)) & tL3 & tL2 & tL1>
  [1097] setlocal 16 ............................ tHeader = numToChar(random(127)) & tL3 & tL2 & tL1
  [1099] pusharglist 0 .......................... <[]>
  [1101] pushlist ............................... <[]>
  [1102] setlocal 19 ............................ tHeaderUncData = []
  [1104] pushint8 1 ............................. <1>
  [1106] setlocal 2
  [1108] getlocal 2
  [1110] getlocal 16 ............................ <tHeader>
  [1112] pushsymb 291 ........................... <#char>
  [1115] pusharglist 2 .......................... <tHeader, #char>
  [1117] objcall 22 ............................. <tHeader.char.count>
  [1119] lteq
  [1120] jmpifz [1155] .......................... repeat with i = 1 to tHeader.char.count
  [1123] getlocal 19 ............................ <tHeaderUncData>
  [1125] getlocal 16 ............................ <tHeader>
  [1127] pushsymb 291 ........................... <#char>
  [1130] getlocal 2 ............................. <i>
  [1132] pusharglist 3 .......................... <tHeader, #char, i>
  [1134] objcall 290 ............................ <tHeader.char[i]>
  [1137] pusharglist 1 .......................... <tHeader.char[i]>
  [1139] extcall 917 ............................ <charToNum(tHeader.char[i])>
  [1142] pusharglistnoret 2 ..................... <tHeaderUncData, charToNum(tHeader.char[i])>
  [1144] objcall 122 ............................ tHeaderUncData.add(charToNum(tHeader.char[i]))
  [1146] pushint8 1
  [1148] getlocal 2
  [1150] add
  [1151] setlocal 2
  [1153] endrepeat [1108]
  [1155] getprop 1210 ........................... <pHeaderEncoder>
  [1158] getlocal 16 ............................ <tHeader>
  [1160] pusharglist 2 .......................... <pHeaderEncoder, tHeader>
  [1162] objcall 1238 ........................... <pHeaderEncoder.encipher(tHeader)>
  [1165] setlocal 16 ............................ tHeader = pHeaderEncoder.encipher(tHeader)
  [1167] pusharglist 0 .......................... <[]>
  [1169] pushlist ............................... <[]>
  [1170] setlocal 20 ............................ tHeaderDecData = []
  [1172] pushint8 1 ............................. <1>
  [1174] setlocal 2
  [1176] getlocal 2
  [1178] getlocal 16 ............................ <tHeader>
  [1180] pushsymb 291 ........................... <#char>
  [1183] pusharglist 2 .......................... <tHeader, #char>
  [1185] objcall 22 ............................. <tHeader.char.count>
  [1187] lteq
  [1188] jmpifz [1223] .......................... repeat with i = 1 to tHeader.char.count
  [1191] getlocal 20 ............................ <tHeaderDecData>
  [1193] getlocal 16 ............................ <tHeader>
  [1195] pushsymb 291 ........................... <#char>
  [1198] getlocal 2 ............................. <i>
  [1200] pusharglist 3 .......................... <tHeader, #char, i>
  [1202] objcall 290 ............................ <tHeader.char[i]>
  [1205] pusharglist 1 .......................... <tHeader.char[i]>
  [1207] extcall 917 ............................ <charToNum(tHeader.char[i])>
  [1210] pusharglistnoret 2 ..................... <tHeaderDecData, charToNum(tHeader.char[i])>
  [1212] objcall 122 ............................ tHeaderDecData.add(charToNum(tHeader.char[i]))
  [1214] pushint8 1
  [1216] getlocal 2
  [1218] add
  [1219] setlocal 2
  [1221] endrepeat [1176]
  [1223] pushcons 19 ............................ <"Uncrypted message length ">
  [1225] getlocal 18 ............................ <tOriginalMessageLength>
  [1227] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength>
  [1228] pushcons 20 ............................ <", Message length ">
  [1230] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length ">
  [1231] getlocal 1 ............................. <tLength>
  [1233] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength>
  [1234] pushcons 21 ............................ <", Header ">
  [1236] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header ">
  [1237] getlocal 19 ............................ <tHeaderUncData>
  [1239] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData>
  [1240] pushcons 22 ............................ <", Encrypted header ">
  [1242] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header ">
  [1243] getlocal 20 ............................ <tHeaderDecData>
  [1245] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData>
  [1246] pushcons 23 ............................ <", Message content : ">
  [1248] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : ">
  [1249] getlocal 17 ............................ <tOriginalContent>
  [1251] joinstr ................................ <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : " & tOriginalContent>
  [1252] pusharglistnoret 1 ..................... <"Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : " & tOriginalContent>
  [1254] extcall 644 ............................ put "Uncrypted message length " & tOriginalMessageLength & ", Message length " & tLength & ", Header " & tHeaderUncData & ", Encrypted header " & tHeaderDecData & ", Message content : " & tOriginalContent
  [1257] getprop 1222 ........................... <pXtra>
  [1260] pushzero ............................... <0>
  [1261] pushzero ............................... <0>
  [1262] getlocal 16 ............................ <tHeader>
  [1264] getlocal 0 ............................. <tMsg>
  [1266] joinstr ................................ <tHeader & tMsg>
  [1267] pusharglistnoret 4 ..................... <pXtra, 0, 0, tHeader & tMsg>
  [1269] objcall 1229 ........................... pXtra.sendNetMessage(0, 0, tHeader & tMsg)
  [1272] pushint8 1 ............................. <1>
  [1274] pusharglistnoret 1 ..................... <1>
  [1276] extcall 25 ............................. return 1
  [1278] ret
end

on randomPad me, tMsg, tTarget
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] pushzero ................................ <0>
  [ 30] pushint8 103 ............................ <103>
  [ 32] pusharglist 2 ........................... <[0, 103]>
  [ 34] pushlist ................................ <[0, 103]>
  [ 35] setlocal 0 .............................. tEscapeList = [0, 103]
  [ 37] getparam 1 .............................. <tMsg>
  [ 39] setlocal 1 .............................. tContent = tMsg
  [ 41] getlocal 1 .............................. <tContent>
  [ 43] pushsymb 291 ............................ <#char>
  [ 46] pusharglist 2 ........................... <tContent, #char>
  [ 48] objcall 22 .............................. <tContent.char.count>
  [ 50] setlocal 2
  [ 52] getlocal 2
  [ 54] getparam 2 .............................. <tTarget>
  [ 56] pushint8 1 .............................. <1>
  [ 58] sub ..................................... <tTarget - 1>
  [ 59] lteq
  [ 60] jmpifz [124] ............................ repeat with i = tContent.char.count to tTarget - 1
  [ 63] pushint16 255 ........................... <255>
  [ 66] pusharglist 1 ........................... <255>
  [ 68] extcall 657 ............................. <random(255)>
  [ 71] setlocal 3 .............................. tRandom = random(255)
  [ 73] getlocal 0 .............................. <tEscapeList>
  [ 75] getlocal 3 .............................. <tRandom>
  [ 77] pusharglist 2 ........................... <tEscapeList, tRandom>
  [ 79] objcall 519 ............................. <tEscapeList.getPos(tRandom)>
  [ 82] pushzero ................................ <0>
  [ 83] nteq .................................... <tEscapeList.getPos(tRandom) <> 0>
  [ 84] jmpifz [ 99] ............................ repeat while tEscapeList.getPos(tRandom) <> 0
  [ 87] pushint16 255 ........................... <255>
  [ 90] pusharglist 1 ........................... <255>
  [ 92] extcall 657 ............................. <random(255)>
  [ 95] setlocal 3 .............................. tRandom = random(255)
  [ 97] endrepeat [ 73]
  [ 99] getlocal 3 .............................. <tRandom>
  [101] pusharglist 1 ........................... <tRandom>
  [103] extcall 861 ............................. <numToChar(tRandom)>
  [106] setlocal 4 .............................. tChar = numToChar(tRandom)
  [108] getlocal 4 .............................. <tChar>
  [110] getlocal 1 .............................. <tContent>
  [112] joinstr ................................. <tChar & tContent>
  [113] setlocal 1 .............................. tContent = tChar & tContent
  [115] pushint8 1
  [117] getlocal 2
  [119] add
  [120] setlocal 2
  [122] endrepeat [ 52]
  [124] getlocal 1 .............................. <tContent>
  [126] pusharglistnoret 1 ...................... <tContent>
  [128] extcall 25 .............................. return tContent
  [130] ret
end

on unPad me, tMsg
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] pushint8 103 ............................ <103>
  [ 31] setlocal 0 .............................. tEscapeChar = 103
  [ 33] pushzero ................................ <0>
  [ 34] setlocal 1 .............................. tCount = 0
  [ 36] pushint8 1 .............................. <1>
  [ 38] setlocal 2
  [ 40] getlocal 2
  [ 42] getparam 1 .............................. <tMsg>
  [ 44] pushsymb 291 ............................ <#char>
  [ 47] pusharglist 2 ........................... <tMsg, #char>
  [ 49] objcall 22 .............................. <tMsg.char.count>
  [ 51] lteq
  [ 52] jmpifz [ 93] ............................ repeat with i = 1 to tMsg.char.count
  [ 55] getparam 1 .............................. <tMsg>
  [ 57] getlocal 2 .............................. <i>
  [ 59] getlocal 2 .............................. <i>
  [ 61] pusharglist 3 ........................... <tMsg, i, i>
  [ 63] extcall 932 ............................. <chars(tMsg, i, i)>
  [ 66] pusharglist 1 ........................... <chars(tMsg, i, i)>
  [ 68] extcall 917 ............................. <charToNum(chars(tMsg, i, i))>
  [ 71] getlocal 0 .............................. <tEscapeChar>
  [ 73] eq ...................................... <charToNum(chars(tMsg, i, i)) = tEscapeChar>
  [ 74] jmpifz [ 84] ............................ if charToNum(chars(tMsg, i, i)) = tEscapeChar then
  [ 77] getlocal 1 .............................. <tCount>
  [ 79] pushint8 1 .............................. <1>
  [ 81] add ..................................... <tCount + 1>
  [ 82] setlocal 1 .............................. tCount = tCount + 1
  [ 84] pushint8 1
  [ 86] getlocal 2
  [ 88] add
  [ 89] setlocal 2
  [ 91] endrepeat [ 40]
  [ 93] getparam 1 .............................. <tMsg>
  [ 95] pushint8 4 .............................. <4>
  [ 97] getlocal 1 .............................. <tCount>
  [ 99] sub ..................................... <4 - tCount>
  [100] getparam 1 .............................. <tMsg>
  [102] getobjprop 293 .......................... <tMsg.length>
  [105] pusharglist 3 ........................... <tMsg, 4 - tCount, tMsg.length>
  [107] extcall 932 ............................. <chars(tMsg, 4 - tCount, tMsg.length)>
  [110] pusharglistnoret 1 ...................... <chars(tMsg, 4 - tCount, tMsg.length)>
  [112] extcall 25 .............................. return chars(tMsg, 4 - tCount, tMsg.length)
  [114] ret
end

on addPad me, tMsg, tAmount
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getparam 1 .............................. <tMsg>
  [ 31] setlocal 0 .............................. tContent = tMsg
  [ 33] pushint8 1 .............................. <1>
  [ 35] setlocal 1
  [ 37] getlocal 1
  [ 39] getparam 2 .............................. <tAmount>
  [ 41] lteq
  [ 42] jmpifz [ 72] ............................ repeat with i = 1 to tAmount
  [ 45] pushint16 255 ........................... <255>
  [ 48] pusharglist 1 ........................... <255>
  [ 50] extcall 657 ............................. <random(255)>
  [ 53] pusharglist 1 ........................... <random(255)>
  [ 55] extcall 861 ............................. <numToChar(random(255))>
  [ 58] getlocal 0 .............................. <tContent>
  [ 60] joinstr ................................. <numToChar(random(255)) & tContent>
  [ 61] setlocal 0 .............................. tContent = numToChar(random(255)) & tContent
  [ 63] pushint8 1
  [ 65] getlocal 1
  [ 67] add
  [ 68] setlocal 1
  [ 70] endrepeat [ 37]
  [ 72] getlocal 0 .............................. <tContent>
  [ 74] pusharglistnoret 1 ...................... <tContent>
  [ 76] extcall 25 .............................. return tContent
  [ 78] ret
end

on removePad me, tMsg, tAmount
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getparam 1 .............................. <tMsg>
  [ 31] getparam 2 .............................. <tAmount>
  [ 33] pushint8 1 .............................. <1>
  [ 35] add ..................................... <tAmount + 1>
  [ 36] getparam 1 .............................. <tMsg>
  [ 38] getobjprop 293 .......................... <tMsg.length>
  [ 41] pusharglist 3 ........................... <tMsg, tAmount + 1, tMsg.length>
  [ 43] extcall 932 ............................. <chars(tMsg, tAmount + 1, tMsg.length)>
  [ 46] pusharglistnoret 1 ...................... <chars(tMsg, tAmount + 1, tMsg.length)>
  [ 48] extcall 25 .............................. return chars(tMsg, tAmount + 1, tMsg.length)
  [ 50] ret
end

on getWaitingMessagesCount me
  [  0] getprop 1222 ............................ <pXtra>
  [  3] pusharglist 1 ........................... <pXtra>
  [  5] objcall 1258 ............................ <pXtra.getNumberWaitingNetMessages()>
  [  8] pusharglistnoret 1 ...................... <pXtra.getNumberWaitingNetMessages()>
  [ 10] extcall 25 .............................. return pXtra.getNumberWaitingNetMessages()
  [ 12] ret
end

on processWaitingMessages me, tCount
  [  0] getparam 1 .............................. <tCount>
  [  2] pusharglist 1 ........................... <tCount>
  [  4] extcall 20 .............................. <voidp(tCount)>
  [  6] jmpifz [ 13] ............................ if voidp(tCount) then
  [  9] pushint8 1 .............................. <1>
  [ 11] setparam 1 .............................. tCount = 1
  [ 13] getprop 1222 ............................ <pXtra>
  [ 16] getparam 1 .............................. <tCount>
  [ 18] pusharglist 2 ........................... <pXtra, tCount>
  [ 20] objcall 1259 ............................ <pXtra.checkNetMessages(tCount)>
  [ 23] pusharglistnoret 1 ...................... <pXtra.checkNetMessages(tCount)>
  [ 25] extcall 25 .............................. return pXtra.checkNetMessages(tCount)
  [ 27] ret
end

on getProperty me, tProp
  [  0] getparam 1 .............................. <tProp>
  [  2] peek 0 .................................. case tProp of
  [  4] pushsymb 1223 ........................... <#xtra>
  [  7] eq
  [  8] jmpifz [ 23] ............................ (case) #xtra:
  [ 11] pop 1
  [ 13] getprop 1222 ............................ <pXtra>
  [ 16] pusharglistnoret 1 ...................... <pXtra>
  [ 18] extcall 25 .............................. return pXtra
  [ 20] jmp [175]
  [ 23] peek 0
  [ 25] pushsymb 1260 ........................... <#host>
  [ 28] eq
  [ 29] jmpifz [ 44] ............................ (case) #host:
  [ 32] pop 1
  [ 34] getprop 1220 ............................ <pHost>
  [ 37] pusharglistnoret 1 ...................... <pHost>
  [ 39] extcall 25 .............................. return pHost
  [ 41] jmp [175]
  [ 44] peek 0
  [ 46] pushsymb 1261 ........................... <#port>
  [ 49] eq
  [ 50] jmpifz [ 65] ............................ (case) #port:
  [ 53] pop 1
  [ 55] getprop 1221 ............................ <pPort>
  [ 58] pusharglistnoret 1 ...................... <pPort>
  [ 60] extcall 25 .............................. return pPort
  [ 62] jmp [175]
  [ 65] peek 0
  [ 67] pushsymb 1262 ........................... <#decoder>
  [ 70] eq
  [ 71] jmpifz [ 90] ............................ (case) #decoder:
  [ 74] pop 1
  [ 76] getparam 0 .............................. <me>
  [ 78] pusharglist 1 ........................... <me>
  [ 80] objcall 1176 ............................ <me.getDecoder()>
  [ 83] pusharglistnoret 1 ...................... <me.getDecoder()>
  [ 85] extcall 25 .............................. return me.getDecoder()
  [ 87] jmp [175]
  [ 90] peek 0
  [ 92] pushsymb 1263 ........................... <#logmode>
  [ 95] eq
  [ 96] jmpifz [115] ............................ (case) #logmode:
  [ 99] pop 1
  [101] getparam 0 .............................. <me>
  [103] pusharglist 1 ........................... <me>
  [105] objcall 1184 ............................ <me.getLogMode()>
  [108] pusharglistnoret 1 ...................... <me.getLogMode()>
  [110] extcall 25 .............................. return me.getLogMode()
  [112] jmp [175]
  [115] peek 0
  [117] pushsymb 854 ............................ <#listener>
  [120] eq
  [121] jmpifz [136] ............................ (case) #listener:
  [124] pop 1
  [126] getprop 1214 ............................ <pListenersPntr>
  [129] pusharglistnoret 1 ...................... <pListenersPntr>
  [131] extcall 25 .............................. return pListenersPntr
  [133] jmp [175]
  [136] peek 0
  [138] pushsymb 855 ............................ <#commands>
  [141] eq
  [142] jmpifz [157] ............................ (case) #commands:
  [145] pop 1
  [147] getprop 1213 ............................ <pCommandsPntr>
  [150] pusharglistnoret 1 ...................... <pCommandsPntr>
  [152] extcall 25 .............................. return pCommandsPntr
  [154] jmp [175]
  [157] peek 0
  [159] pushsymb 1054 ........................... <#message>
  [162] eq
  [163] jmpifz [175] ............................ (case) #message:
  [166] pop 1
  [168] getprop 1204 ............................ <pMsgStruct>
  [171] pusharglistnoret 1 ...................... <pMsgStruct>
  [173] extcall 25 .............................. return pMsgStruct
  [175] pop 1 ................................... end case
  [177] pushzero ................................ <0>
  [178] pusharglistnoret 1 ...................... <0>
  [180] extcall 25 .............................. return 0
  [182] ret
end

on setProperty me, tProp, tValue
  [  0] getparam 1 .............................. <tProp>
  [  2] peek 0 .................................. case tProp of
  [  4] pushsymb 1262 ........................... <#decoder>
  [  7] eq
  [  8] jmpifz [ 29] ............................ (case) #decoder:
  [ 11] pop 1
  [ 13] getparam 0 .............................. <me>
  [ 15] getparam 2 .............................. <tValue>
  [ 17] pusharglist 2 ........................... <me, tValue>
  [ 19] objcall 1175 ............................ <me.setDecoder(tValue)>
  [ 22] pusharglistnoret 1 ...................... <me.setDecoder(tValue)>
  [ 24] extcall 25 .............................. return me.setDecoder(tValue)
  [ 26] jmp [147]
  [ 29] peek 0
  [ 31] pushsymb 1263 ........................... <#logmode>
  [ 34] eq
  [ 35] jmpifz [ 56] ............................ (case) #logmode:
  [ 38] pop 1
  [ 40] getparam 0 .............................. <me>
  [ 42] getparam 2 .............................. <tValue>
  [ 44] pusharglist 2 ........................... <me, tValue>
  [ 46] objcall 1183 ............................ <me.setLogMode(tValue)>
  [ 49] pusharglistnoret 1 ...................... <me.setLogMode(tValue)>
  [ 51] extcall 25 .............................. return me.setLogMode(tValue)
  [ 53] jmp [147]
  [ 56] peek 0
  [ 58] pushsymb 854 ............................ <#listener>
  [ 61] eq
  [ 62] jmpifz [103] ............................ (case) #listener:
  [ 65] getparam 2 .............................. <tValue>
  [ 67] getobjprop 490 .......................... <tValue.ilk>
  [ 70] pushsymb 1067 ........................... <#struct>
  [ 73] eq ...................................... <tValue.ilk = #struct>
  [ 74] jmpifz [ 93] ............................ if tValue.ilk = #struct then / else
  [ 77] getparam 2 .............................. <tValue>
  [ 79] setprop 1214 ............................ pListenersPntr = tValue
  [ 82] pop 1
  [ 84] pushint8 1 .............................. <1>
  [ 86] pusharglistnoret 1 ...................... <1>
  [ 88] extcall 25 .............................. return 1
  [ 90] jmp [100]
  [ 93] pop 1
  [ 95] pushzero ................................ <0>
  [ 96] pusharglistnoret 1 ...................... <0>
  [ 98] extcall 25 .............................. return 0
  [100] jmp [147]
  [103] peek 0
  [105] pushsymb 855 ............................ <#commands>
  [108] eq
  [109] jmpifz [147] ............................ (case) #commands:
  [112] getparam 2 .............................. <tValue>
  [114] getobjprop 490 .......................... <tValue.ilk>
  [117] pushsymb 1067 ........................... <#struct>
  [120] eq ...................................... <tValue.ilk = #struct>
  [121] jmpifz [140] ............................ if tValue.ilk = #struct then / else
  [124] getparam 2 .............................. <tValue>
  [126] setprop 1213 ............................ pCommandsPntr = tValue
  [129] pop 1
  [131] pushint8 1 .............................. <1>
  [133] pusharglistnoret 1 ...................... <1>
  [135] extcall 25 .............................. return 1
  [137] jmp [147]
  [140] pop 1
  [142] pushzero ................................ <0>
  [143] pusharglistnoret 1 ...................... <0>
  [145] extcall 25 .............................. return 0
  [147] pop 1 ................................... end case
  [149] pushzero ................................ <0>
  [150] pusharglistnoret 1 ...................... <0>
  [152] extcall 25 .............................. return 0
  [154] ret
end

on GetBoolFrom me
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1204 ............................ <pMsgStruct>
  [ 32] pushsymb 487 ............................ <#content>
  [ 35] pusharglist 2 ........................... <pMsgStruct, #content>
  [ 37] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 39] setlocal 0 .............................. tByteStr = pMsgStruct.getaProp(#content)
  [ 41] pushint8 1 .............................. <1>
  [ 43] pushzero ................................ <0>
  [ 44] pushzero ................................ <0>
  [ 45] pushzero ................................ <0>
  [ 46] pushzero ................................ <0>
  [ 47] pushzero ................................ <0>
  [ 48] pushzero ................................ <0>
  [ 49] pushzero ................................ <0>
  [ 50] getlocal 0 .............................. <tByteStr>
  [ 52] getchunk ................................ <char 1 of tByteStr>
  [ 53] pusharglist 1 ........................... <char 1 of tByteStr>
  [ 55] extcall 917 ............................. <charToNum(char 1 of tByteStr)>
  [ 58] pushint8 63 ............................. <63>
  [ 60] pusharglist 2 ........................... <charToNum(char 1 of tByteStr), 63>
  [ 62] extcall 863 ............................. <bitAnd(charToNum(char 1 of tByteStr), 63)>
  [ 65] setlocal 1 .............................. tByte = bitAnd(charToNum(char 1 of tByteStr), 63)
  [ 67] getprop 1204 ............................ <pMsgStruct>
  [ 70] pushsymb 487 ............................ <#content>
  [ 73] getlocal 0 .............................. <tByteStr>
  [ 75] pushsymb 291 ............................ <#char>
  [ 78] pushint8 2 .............................. <2>
  [ 80] getlocal 0 .............................. <tByteStr>
  [ 82] pusharglist 1 ........................... <tByteStr>
  [ 84] extcall 293 ............................. <length(tByteStr)>
  [ 87] pusharglist 4 ........................... <tByteStr, #char, 2, length(tByteStr)>
  [ 89] objcall 290 ............................. <tByteStr.char[2..length(tByteStr)]>
  [ 92] pusharglistnoret 3 ...................... <pMsgStruct, #content, tByteStr.char[2..length(tByteStr)]>
  [ 94] objcall 128 ............................. pMsgStruct.setaProp(#content, tByteStr.char[2..length(tByteStr)])
  [ 96] getlocal 1 .............................. <tByte>
  [ 98] pushzero ................................ <0>
  [ 99] nteq .................................... <tByte <> 0>
  [100] pusharglistnoret 1 ...................... <tByte <> 0>
  [102] extcall 25 .............................. return tByte <> 0
  [104] ret
end

on GetByteFrom me
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1204 ............................ <pMsgStruct>
  [ 32] pushsymb 487 ............................ <#content>
  [ 35] pusharglist 2 ........................... <pMsgStruct, #content>
  [ 37] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 39] setlocal 0 .............................. tByteStr = pMsgStruct.getaProp(#content)
  [ 41] pushint8 1 .............................. <1>
  [ 43] pushzero ................................ <0>
  [ 44] pushzero ................................ <0>
  [ 45] pushzero ................................ <0>
  [ 46] pushzero ................................ <0>
  [ 47] pushzero ................................ <0>
  [ 48] pushzero ................................ <0>
  [ 49] pushzero ................................ <0>
  [ 50] getlocal 0 .............................. <tByteStr>
  [ 52] getchunk ................................ <char 1 of tByteStr>
  [ 53] pusharglist 1 ........................... <char 1 of tByteStr>
  [ 55] extcall 917 ............................. <charToNum(char 1 of tByteStr)>
  [ 58] pushint8 63 ............................. <63>
  [ 60] pusharglist 2 ........................... <charToNum(char 1 of tByteStr), 63>
  [ 62] extcall 863 ............................. <bitAnd(charToNum(char 1 of tByteStr), 63)>
  [ 65] setlocal 1 .............................. tByte = bitAnd(charToNum(char 1 of tByteStr), 63)
  [ 67] getprop 1204 ............................ <pMsgStruct>
  [ 70] pushsymb 487 ............................ <#content>
  [ 73] getlocal 0 .............................. <tByteStr>
  [ 75] pushsymb 291 ............................ <#char>
  [ 78] pushint8 2 .............................. <2>
  [ 80] getlocal 0 .............................. <tByteStr>
  [ 82] pusharglist 1 ........................... <tByteStr>
  [ 84] extcall 293 ............................. <length(tByteStr)>
  [ 87] pusharglist 4 ........................... <tByteStr, #char, 2, length(tByteStr)>
  [ 89] objcall 290 ............................. <tByteStr.char[2..length(tByteStr)]>
  [ 92] pusharglistnoret 3 ...................... <pMsgStruct, #content, tByteStr.char[2..length(tByteStr)]>
  [ 94] objcall 128 ............................. pMsgStruct.setaProp(#content, tByteStr.char[2..length(tByteStr)])
  [ 96] getlocal 1 .............................. <tByte>
  [ 98] pusharglistnoret 1 ...................... <tByte>
  [100] extcall 25 .............................. return tByte
  [102] ret
end

on GetIntFrom me
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1204 ............................ <pMsgStruct>
  [ 32] pushsymb 487 ............................ <#content>
  [ 35] pusharglist 2 ........................... <pMsgStruct, #content>
  [ 37] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 39] setlocal 0 .............................. tByteStr = pMsgStruct.getaProp(#content)
  [ 41] pushint8 1 .............................. <1>
  [ 43] pushzero ................................ <0>
  [ 44] pushzero ................................ <0>
  [ 45] pushzero ................................ <0>
  [ 46] pushzero ................................ <0>
  [ 47] pushzero ................................ <0>
  [ 48] pushzero ................................ <0>
  [ 49] pushzero ................................ <0>
  [ 50] getlocal 0 .............................. <tByteStr>
  [ 52] getchunk ................................ <char 1 of tByteStr>
  [ 53] pusharglist 1 ........................... <char 1 of tByteStr>
  [ 55] extcall 917 ............................. <charToNum(char 1 of tByteStr)>
  [ 58] pushint8 63 ............................. <63>
  [ 60] pusharglist 2 ........................... <charToNum(char 1 of tByteStr), 63>
  [ 62] extcall 863 ............................. <bitAnd(charToNum(char 1 of tByteStr), 63)>
  [ 65] setlocal 1 .............................. tByte = bitAnd(charToNum(char 1 of tByteStr), 63)
  [ 67] getlocal 1 .............................. <tByte>
  [ 69] pushint8 56 ............................. <56>
  [ 71] pusharglist 2 ........................... <tByte, 56>
  [ 73] extcall 863 ............................. <bitAnd(tByte, 56)>
  [ 76] pushint8 8 .............................. <8>
  [ 78] div ..................................... <bitAnd(tByte, 56) / 8>
  [ 79] pushzero ................................ <0>
  [ 80] pusharglist 2 ........................... <bitAnd(tByte, 56) / 8, 0>
  [ 82] extcall 862 ............................. <bitOr(bitAnd(tByte, 56) / 8, 0)>
  [ 85] setlocal 2 .............................. tByCnt = bitOr(bitAnd(tByte, 56) / 8, 0)
  [ 87] getlocal 1 .............................. <tByte>
  [ 89] pushint8 4 .............................. <4>
  [ 91] pusharglist 2 ........................... <tByte, 4>
  [ 93] extcall 863 ............................. <bitAnd(tByte, 4)>
  [ 96] setlocal 3 .............................. tNeg = bitAnd(tByte, 4)
  [ 98] getlocal 1 .............................. <tByte>
  [100] pushint8 3 .............................. <3>
  [102] pusharglist 2 ........................... <tByte, 3>
  [104] extcall 863 ............................. <bitAnd(tByte, 3)>
  [107] setlocal 4 .............................. tInt = bitAnd(tByte, 3)
  [109] getlocal 2 .............................. <tByCnt>
  [111] pushint8 1 .............................. <1>
  [113] gt ...................................... <tByCnt > 1>
  [114] jmpifz [210] ............................ if tByCnt > 1 then
  [117] pushint8 4 .............................. <4>
  [119] pushint16 256 ........................... <256>
  [122] pushint16 16384 ......................... <16384>
  [125] pushint32 1048576 ....................... <1048576>
  [130] pushint32 67108864 ...................... <67108864>
  [135] pusharglist 5 ........................... <[4, 256, 16384, 1048576, 67108864]>
  [137] pushlist ................................ <[4, 256, 16384, 1048576, 67108864]>
  [138] setlocal 5 .............................. tPowTbl = [4, 256, 16384, 1048576, 67108864]
  [140] pushint8 2 .............................. <2>
  [142] setlocal 6
  [144] getlocal 6
  [146] getlocal 2 .............................. <tByCnt>
  [148] lteq
  [149] jmpifz [210] ............................ repeat with i = 2 to tByCnt
  [152] getlocal 6 .............................. <i>
  [154] pushzero ................................ <0>
  [155] pushzero ................................ <0>
  [156] pushzero ................................ <0>
  [157] pushzero ................................ <0>
  [158] pushzero ................................ <0>
  [159] pushzero ................................ <0>
  [160] pushzero ................................ <0>
  [161] getlocal 0 .............................. <tByteStr>
  [163] getchunk ................................ <char i of tByteStr>
  [164] pusharglist 1 ........................... <char i of tByteStr>
  [166] extcall 917 ............................. <charToNum(char i of tByteStr)>
  [169] pushint8 63 ............................. <63>
  [171] pusharglist 2 ........................... <charToNum(char i of tByteStr), 63>
  [173] extcall 863 ............................. <bitAnd(charToNum(char i of tByteStr), 63)>
  [176] setlocal 1 .............................. tByte = bitAnd(charToNum(char i of tByteStr), 63)
  [178] getlocal 1 .............................. <tByte>
  [180] getlocal 5 .............................. <tPowTbl>
  [182] getlocal 6 .............................. <i>
  [184] pushint8 1 .............................. <1>
  [186] sub ..................................... <i - 1>
  [187] pusharglist 2 ........................... <tPowTbl, i - 1>
  [189] objcall 54 .............................. <tPowTbl[i - 1]>
  [191] mul ..................................... <tByte * tPowTbl[i - 1]>
  [192] getlocal 4 .............................. <tInt>
  [194] pusharglist 2 ........................... <tByte * tPowTbl[i - 1], tInt>
  [196] extcall 862 ............................. <bitOr(tByte * tPowTbl[i - 1], tInt)>
  [199] setlocal 4 .............................. tInt = bitOr(tByte * tPowTbl[i - 1], tInt)
  [201] pushint8 1
  [203] getlocal 6
  [205] add
  [206] setlocal 6
  [208] endrepeat [144]
  [210] getlocal 3 .............................. <tNeg>
  [212] jmpifz [220] ............................ if tNeg then
  [215] getlocal 4 .............................. <tInt>
  [217] inv ..................................... <-tInt>
  [218] setlocal 4 .............................. tInt = -tInt
  [220] getprop 1204 ............................ <pMsgStruct>
  [223] pushsymb 487 ............................ <#content>
  [226] getlocal 0 .............................. <tByteStr>
  [228] pushsymb 291 ............................ <#char>
  [231] getlocal 2 .............................. <tByCnt>
  [233] pushint8 1 .............................. <1>
  [235] add ..................................... <tByCnt + 1>
  [236] getlocal 0 .............................. <tByteStr>
  [238] pusharglist 1 ........................... <tByteStr>
  [240] extcall 293 ............................. <length(tByteStr)>
  [243] pusharglist 4 ........................... <tByteStr, #char, tByCnt + 1, length(tByteStr)>
  [245] objcall 290 ............................. <tByteStr.char[tByCnt + 1..length(tByteStr)]>
  [248] pusharglistnoret 3 ...................... <pMsgStruct, #content, tByteStr.char[tByCnt + 1..length(tByteStr)]>
  [250] objcall 128 ............................. pMsgStruct.setaProp(#content, tByteStr.char[tByCnt + 1..length(tByteStr)])
  [252] getlocal 4 .............................. <tInt>
  [254] pusharglistnoret 1 ...................... <tInt>
  [256] extcall 25 .............................. return tInt
  [258] ret
end

on GetStrFrom me
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1204 ............................ <pMsgStruct>
  [ 32] pushsymb 487 ............................ <#content>
  [ 35] pusharglist 2 ........................... <pMsgStruct, #content>
  [ 37] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 39] setlocal 0 .............................. tArr = pMsgStruct.getaProp(#content)
  [ 41] pushint8 2 .............................. <2>
  [ 43] pusharglist 1 ........................... <2>
  [ 45] extcall 861 ............................. <numToChar(2)>
  [ 48] getlocal 0 .............................. <tArr>
  [ 50] pusharglist 2 ........................... <numToChar(2), tArr>
  [ 52] extcall 292 ............................. <offset(numToChar(2), tArr)>
  [ 55] setlocal 1 .............................. tLen = offset(numToChar(2), tArr)
  [ 57] getlocal 1 .............................. <tLen>
  [ 59] pushint8 1 .............................. <1>
  [ 61] gt ...................................... <tLen > 1>
  [ 62] jmpifz [ 86] ............................ if tLen > 1 then / else
  [ 65] pushint8 1 .............................. <1>
  [ 67] getlocal 1 .............................. <tLen>
  [ 69] pushint8 1 .............................. <1>
  [ 71] sub ..................................... <tLen - 1>
  [ 72] pushzero ................................ <0>
  [ 73] pushzero ................................ <0>
  [ 74] pushzero ................................ <0>
  [ 75] pushzero ................................ <0>
  [ 76] pushzero ................................ <0>
  [ 77] pushzero ................................ <0>
  [ 78] getlocal 0 .............................. <tArr>
  [ 80] getchunk ................................ <char 1 to tLen - 1 of tArr>
  [ 81] setlocal 2 .............................. tStr = char 1 to tLen - 1 of tArr
  [ 83] jmp [ 90]
  [ 86] pushcons 1 .............................. <EMPTY>
  [ 88] setlocal 2 .............................. tStr = EMPTY
  [ 90] getprop 1204 ............................ <pMsgStruct>
  [ 93] pushsymb 487 ............................ <#content>
  [ 96] getlocal 1 .............................. <tLen>
  [ 98] pushint8 1 .............................. <1>
  [100] add ..................................... <tLen + 1>
  [101] getlocal 0 .............................. <tArr>
  [103] pusharglist 1 ........................... <tArr>
  [105] extcall 293 ............................. <length(tArr)>
  [108] pushzero ................................ <0>
  [109] pushzero ................................ <0>
  [110] pushzero ................................ <0>
  [111] pushzero ................................ <0>
  [112] pushzero ................................ <0>
  [113] pushzero ................................ <0>
  [114] getlocal 0 .............................. <tArr>
  [116] getchunk ................................ <char tLen + 1 to length(tArr) of tArr>
  [117] pusharglistnoret 3 ...................... <pMsgStruct, #content, char tLen + 1 to length(tArr) of tArr>
  [119] objcall 128 ............................. pMsgStruct.setaProp(#content, char tLen + 1 to length(tArr) of tArr)
  [121] getlocal 2 .............................. <tStr>
  [123] pusharglistnoret 1 ...................... <tStr>
  [125] extcall 25 .............................. return tStr
  [127] ret
end

on print me
  [  0] pushcons 1 .............................. <EMPTY>
  [  2] setlocal 0 .............................. tStr = EMPTY
  [  4] getparam 0 .............................. <me>
  [  6] pusharglist 1 ........................... <me>
  [  8] objcall 3 ............................... <me.getID()>
  [ 10] pusharglist 1 ........................... <me.getID()>
  [ 12] extcall 46 .............................. <symbolp(me.getID())>
  [ 14] jmpifz [ 22] ............................ if symbolp(me.getID()) then
  [ 17] pushcons 29 ............................. <"#">
  [ 19] pushzero ................................ <0>
  [ 20] put 37 .................................. put "#" after tStr
  [ 22] getparam 0 .............................. <me>
  [ 24] pusharglist 1 ........................... <me>
  [ 26] objcall 3 ............................... <me.getID()>
  [ 28] pushcons 30 ............................. <RETURN>
  [ 30] joinstr ................................. <me.getID() & RETURN>
  [ 31] pushzero ................................ <0>
  [ 32] put 37 .................................. put me.getID() & RETURN after tStr
  [ 34] pushcons 31 ............................. <"-- -- -- -- -- -- -- --">
  [ 36] pushcons 30 ............................. <RETURN>
  [ 38] joinstr ................................. <"-- -- -- -- -- -- -- --" & RETURN>
  [ 39] pushzero ................................ <0>
  [ 40] put 37 .................................. put "-- -- -- -- -- -- -- --" & RETURN after tStr
  [ 42] getprop 1214 ............................ <pListenersPntr>
  [ 45] pushsymb 113 ............................ <#value>
  [ 47] pusharglist 2 ........................... <pListenersPntr, #value>
  [ 49] objcall 31 .............................. <pListenersPntr.getaProp(#value)>
  [ 51] setlocal 1 .............................. tMsgsList = pListenersPntr.getaProp(#value)
  [ 53] getlocal 1 .............................. <tMsgsList>
  [ 55] pusharglist 1 ........................... <tMsgsList>
  [ 57] extcall 53 .............................. <listp(tMsgsList)>
  [ 59] jmpifz [186] ............................ if listp(tMsgsList) then
  [ 62] pushint8 1 .............................. <1>
  [ 64] setlocal 2
  [ 66] getlocal 2
  [ 68] getlocal 1 .............................. <tMsgsList>
  [ 70] pusharglist 1 ........................... <tMsgsList>
  [ 72] extcall 22 .............................. <count(tMsgsList)>
  [ 74] lteq
  [ 75] jmpifz [186] ............................ repeat with i = 1 to count(tMsgsList)
  [ 78] pushcons 32 ............................. <TAB>
  [ 80] getlocal 1 .............................. <tMsgsList>
  [ 82] getlocal 2 .............................. <i>
  [ 84] pusharglist 2 ........................... <tMsgsList, i>
  [ 86] objcall 23 .............................. <tMsgsList.getPropAt(i)>
  [ 88] joinstr ................................. <TAB & tMsgsList.getPropAt(i)>
  [ 89] pushcons 30 ............................. <RETURN>
  [ 91] joinstr ................................. <TAB & tMsgsList.getPropAt(i) & RETURN>
  [ 92] pushzero ................................ <0>
  [ 93] put 37 .................................. put TAB & tMsgsList.getPropAt(i) & RETURN after tStr
  [ 95] getlocal 1 .............................. <tMsgsList>
  [ 97] getlocal 2 .............................. <i>
  [ 99] pusharglist 2 ........................... <tMsgsList, i>
  [101] objcall 54 .............................. <tMsgsList[i]>
  [103] setlocal 3 .............................. tCallbackList = tMsgsList[i]
  [105] getlocal 3 .............................. <tCallbackList>
  [107] peek 0
  [109] pusharglist 1
  [111] extcall 22
  [113] pushint8 1
  [115] peek 0
  [117] peek 2
  [119] lteq
  [120] jmpifz [170] ............................ repeat with tCallback in tCallbackList
  [123] peek 2
  [125] peek 1
  [127] pusharglist 2
  [129] extcall 54
  [131] setlocal 4
  [133] pushcons 32 ............................. <TAB>
  [135] pushcons 32 ............................. <TAB>
  [137] joinstr ................................. <TAB & TAB>
  [138] getlocal 4 .............................. <tCallback>
  [140] pushint8 1 .............................. <1>
  [142] pusharglist 2 ........................... <tCallback, 1>
  [144] objcall 54 .............................. <tCallback[1]>
  [146] joinstr ................................. <TAB & TAB & tCallback[1]>
  [147] pushcons 33 ............................. <"->">
  [149] joinpadstr .............................. <TAB & TAB & tCallback[1] && "->">
  [150] getlocal 4 .............................. <tCallback>
  [152] pushint8 2 .............................. <2>
  [154] pusharglist 2 ........................... <tCallback, 2>
  [156] objcall 54 .............................. <tCallback[2]>
  [158] joinpadstr .............................. <TAB & TAB & tCallback[1] && "->" && tCallback[2]>
  [159] pushcons 30 ............................. <RETURN>
  [161] joinstr ................................. <TAB & TAB & tCallback[1] && "->" && tCallback[2] & RETURN>
  [162] pushzero ................................ <0>
  [163] put 37 .................................. put TAB & TAB & tCallback[1] && "->" && tCallback[2] & RETURN after tStr
  [165] pushint8 1
  [167] add
  [168] endrepeat [115]
  [170] pop 3
  [172] pushcons 30 ............................. <RETURN>
  [174] pushzero ................................ <0>
  [175] put 37 .................................. put RETURN after tStr
  [177] pushint8 1
  [179] getlocal 2
  [181] add
  [182] setlocal 2
  [184] endrepeat [ 66]
  [186] getlocal 0 .............................. <tStr>
  [188] pushcons 30 ............................. <RETURN>
  [190] joinstr ................................. <tStr & RETURN>
  [191] pusharglistnoret 1 ...................... <tStr & RETURN>
  [193] extcall 644 ............................. put tStr & RETURN
  [196] pushint8 1 .............................. <1>
  [198] pusharglistnoret 1 ...................... <1>
  [200] extcall 25 .............................. return 1
  [202] ret
end

on SetToken me, tToken
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getparam 1 .............................. <tToken>
  [ 31] setprop 1215 ............................ pToken = tToken
  [ 34] getprop 1215 ............................ <pToken>
  [ 37] getprop 1215 ............................ <pToken>
  [ 40] getobjprop 293 .......................... <pToken.length>
  [ 43] pushint8 3 .............................. <3>
  [ 45] sub ..................................... <pToken.length - 3>
  [ 46] getprop 1215 ............................ <pToken>
  [ 49] getobjprop 293 .......................... <pToken.length>
  [ 52] pusharglist 3 ........................... <pToken, pToken.length - 3, pToken.length>
  [ 54] extcall 932 ............................. <chars(pToken, pToken.length - 3, pToken.length)>
  [ 57] setlocal 0 .............................. tSeedHex = chars(pToken, pToken.length - 3, pToken.length)
  [ 59] pushzero ................................ <0>
  [ 60] setprop 1217 ............................ pTx = 0
  [ 63] pushcons 34 ............................. <"0">
  [ 65] pushzero ................................ <0>
  [ 66] pushcons 35 ............................. <"1">
  [ 68] pushint8 1 .............................. <1>
  [ 70] pushcons 36 ............................. <"2">
  [ 72] pushint8 2 .............................. <2>
  [ 74] pushcons 37 ............................. <"3">
  [ 76] pushint8 3 .............................. <3>
  [ 78] pushcons 38 ............................. <"4">
  [ 80] pushint8 4 .............................. <4>
  [ 82] pushcons 39 ............................. <"5">
  [ 84] pushint8 5 .............................. <5>
  [ 86] pushcons 40 ............................. <"6">
  [ 88] pushint8 6 .............................. <6>
  [ 90] pushcons 41 ............................. <"7">
  [ 92] pushint8 7 .............................. <7>
  [ 94] pushcons 42 ............................. <"8">
  [ 96] pushint8 8 .............................. <8>
  [ 98] pushcons 43 ............................. <"9">
  [100] pushint8 9 .............................. <9>
  [102] pushcons 44 ............................. <"a">
  [104] pushint8 10 ............................. <10>
  [106] pushcons 45 ............................. <"b">
  [108] pushint8 11 ............................. <11>
  [110] pushcons 46 ............................. <"c">
  [112] pushint8 12 ............................. <12>
  [114] pushcons 47 ............................. <"d">
  [116] pushint8 13 ............................. <13>
  [118] pushcons 48 ............................. <"e">
  [120] pushint8 14 ............................. <14>
  [122] pushcons 49 ............................. <"f">
  [124] pushint8 15 ............................. <15>
  [126] pushcons 50 ............................. <"A">
  [128] pushint8 10 ............................. <10>
  [130] pushcons 51 ............................. <"B">
  [132] pushint8 11 ............................. <11>
  [134] pushcons 52 ............................. <"C">
  [136] pushint8 12 ............................. <12>
  [138] pushcons 53 ............................. <"D">
  [140] pushint8 13 ............................. <13>
  [142] pushcons 54 ............................. <"E">
  [144] pushint8 14 ............................. <14>
  [146] pushcons 55 ............................. <"F">
  [148] pushint8 15 ............................. <15>
  [150] pusharglist 44 .......................... <["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15, "A": 10, "B": 11, "C": 12, "D": 13, "E": 14, "F": 15]>
  [152] pushproplist ............................ <["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15, "A": 10, "B": 11, "C": 12, "D": 13, "E": 14, "F": 15]>
  [153] setlocal 1 .............................. tVals = ["0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "a": 10, "b": 11, "c": 12, "d": 13, "e": 14, "f": 15, "A": 10, "B": 11, "C": 12, "D": 13, "E": 14, "F": 15]
  [155] pushzero ................................ <0>
  [156] setlocal 2
  [158] getlocal 2
  [160] pushint8 3 .............................. <3>
  [162] lteq
  [163] jmpifz [218] ............................ repeat with i = 0 to 3
  [166] getprop 1217 ............................ <pTx>
  [169] pushint8 16 ............................. <16>
  [171] getlocal 2 .............................. <i>
  [173] pusharglist 2 ........................... <16, i>
  [175] extcall 1112 ............................ <power(16, i)>
  [178] pusharglist 1 ........................... <power(16, i)>
  [180] extcall 957 ............................. <integer(power(16, i))>
  [183] getlocal 1 .............................. <tVals>
  [185] getlocal 0 .............................. <tSeedHex>
  [187] pushsymb 291 ............................ <#char>
  [190] pushint8 4 .............................. <4>
  [192] getlocal 2 .............................. <i>
  [194] sub ..................................... <4 - i>
  [195] pusharglist 3 ........................... <tSeedHex, #char, 4 - i>
  [197] objcall 290 ............................. <tSeedHex.char[4 - i]>
  [200] pusharglist 2 ........................... <tVals, tSeedHex.char[4 - i]>
  [202] objcall 54 .............................. <tVals[tSeedHex.char[4 - i]]>
  [204] mul ..................................... <integer(power(16, i)) * tVals[tSeedHex.char[4 - i]]>
  [205] add ..................................... <pTx + (integer(power(16, i)) * tVals[tSeedHex.char[4 - i]])>
  [206] setprop 1217 ............................ pTx = pTx + (integer(power(16, i)) * tVals[tSeedHex.char[4 - i]])
  [209] pushint8 1
  [211] getlocal 2
  [213] add
  [214] setlocal 2
  [216] endrepeat [158]
  [218] pushzero ................................ <0>
  [219] setprop 1218 ............................ pRx = 0
  [222] getprop 1215 ............................ <pToken>
  [225] pushint8 1 .............................. <1>
  [227] pushint8 4 .............................. <4>
  [229] pusharglist 3 ........................... <pToken, 1, 4>
  [231] extcall 932 ............................. <chars(pToken, 1, 4)>
  [234] setlocal 0 .............................. tSeedHex = chars(pToken, 1, 4)
  [236] pushzero ................................ <0>
  [237] setlocal 2
  [239] getlocal 2
  [241] pushint8 3 .............................. <3>
  [243] lteq
  [244] jmpifz [299] ............................ repeat with i = 0 to 3
  [247] getprop 1218 ............................ <pRx>
  [250] pushint8 16 ............................. <16>
  [252] getlocal 2 .............................. <i>
  [254] pusharglist 2 ........................... <16, i>
  [256] extcall 1112 ............................ <power(16, i)>
  [259] pusharglist 1 ........................... <power(16, i)>
  [261] extcall 957 ............................. <integer(power(16, i))>
  [264] getlocal 1 .............................. <tVals>
  [266] getlocal 0 .............................. <tSeedHex>
  [268] pushsymb 291 ............................ <#char>
  [271] pushint8 4 .............................. <4>
  [273] getlocal 2 .............................. <i>
  [275] sub ..................................... <4 - i>
  [276] pusharglist 3 ........................... <tSeedHex, #char, 4 - i>
  [278] objcall 290 ............................. <tSeedHex.char[4 - i]>
  [281] pusharglist 2 ........................... <tVals, tSeedHex.char[4 - i]>
  [283] objcall 54 .............................. <tVals[tSeedHex.char[4 - i]]>
  [285] mul ..................................... <integer(power(16, i)) * tVals[tSeedHex.char[4 - i]]>
  [286] add ..................................... <pRx + (integer(power(16, i)) * tVals[tSeedHex.char[4 - i]])>
  [287] setprop 1218 ............................ pRx = pRx + (integer(power(16, i)) * tVals[tSeedHex.char[4 - i]])
  [290] pushint8 1
  [292] getlocal 2
  [294] add
  [295] setlocal 2
  [297] endrepeat [239]
  [299] ret
end

on iterateRandom me, tSeed
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] pushint8 1 .............................. <1>
  [ 31] jmpifz [ 53] ............................ if 1 then
  [ 34] pushint16 19979 ......................... <19979>
  [ 37] getparam 1 .............................. <tSeed>
  [ 39] mul ..................................... <19979 * tSeed>
  [ 40] pushint8 5 .............................. <5>
  [ 42] add ..................................... <(19979 * tSeed) + 5>
  [ 43] pushint32 65536 ......................... <65536>
  [ 48] mod ..................................... <((19979 * tSeed) + 5) mod 65536>
  [ 49] pusharglistnoret 1 ...................... <((19979 * tSeed) + 5) mod 65536>
  [ 51] extcall 25 .............................. return ((19979 * tSeed) + 5) mod 65536
  [ 53] ret
end

on xtraMsgHandler me
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1212 ............................ <pConnectionShouldBeKilled>
  [ 32] pushzero ................................ <0>
  [ 33] nteq .................................... <pConnectionShouldBeKilled <> 0>
  [ 34] jmpifz [ 42] ............................ if pConnectionShouldBeKilled <> 0 then
  [ 37] pushzero ................................ <0>
  [ 38] pusharglistnoret 1 ...................... <0>
  [ 40] extcall 25 .............................. return 0
  [ 42] pushint8 1 .............................. <1>
  [ 44] setprop 1231 ............................ pConnectionOk = 1
  [ 47] getprop 1222 ............................ <pXtra>
  [ 50] pusharglist 1 ........................... <pXtra>
  [ 52] objcall 1276 ............................ <pXtra.getNetMessage()>
  [ 55] setlocal 0 .............................. tNewMsg = pXtra.getNetMessage()
  [ 57] getlocal 0 .............................. <tNewMsg>
  [ 59] pushsymb 1277 ........................... <#errorCode>
  [ 62] pusharglist 2 ........................... <tNewMsg, #errorCode>
  [ 64] objcall 31 .............................. <tNewMsg.getaProp(#errorCode)>
  [ 66] setlocal 1 .............................. tErrCode = tNewMsg.getaProp(#errorCode)
  [ 68] getlocal 0 .............................. <tNewMsg>
  [ 70] pushsymb 487 ............................ <#content>
  [ 73] pusharglist 2 ........................... <tNewMsg, #content>
  [ 75] objcall 31 .............................. <tNewMsg.getaProp(#content)>
  [ 77] setlocal 2 .............................. tContent = tNewMsg.getaProp(#content)
  [ 79] getlocal 1 .............................. <tErrCode>
  [ 81] pushzero ................................ <0>
  [ 82] nteq .................................... <tErrCode <> 0>
  [ 83] jmpifz [154] ............................ if tErrCode <> 0 then
  [ 86] getprop 1227 ............................ <pLogMode>
  [ 89] pushzero ................................ <0>
  [ 90] gt ...................................... <pLogMode > 0>
  [ 91] jmpifz [142] ............................ if pLogMode > 0 then
  [ 94] getparam 0 .............................. <me>
  [ 96] pushcons 56 ............................. <"Connection">
  [ 98] getparam 0 .............................. <me>
  [100] pusharglist 1 ........................... <me>
  [102] objcall 3 ............................... <me.getID()>
  [104] joinpadstr .............................. <"Connection" && me.getID()>
  [105] pushcons 57 ............................. <"was disconnected">
  [107] joinpadstr .............................. <"Connection" && me.getID() && "was disconnected">
  [108] pusharglistnoret 2 ...................... <me, "Connection" && me.getID() && "was disconnected">
  [110] objcall 1202 ............................ me.log("Connection" && me.getID() && "was disconnected")
  [113] getparam 0 .............................. <me>
  [115] pushcons 58 ............................. <"host = ">
  [117] getprop 1220 ............................ <pHost>
  [120] joinstr ................................. <"host = " & pHost>
  [121] pushcons 59 ............................. <", port = ">
  [123] joinpadstr .............................. <"host = " & pHost && ", port = ">
  [124] getprop 1221 ............................ <pPort>
  [127] joinstr ................................. <"host = " & pHost && ", port = " & pPort>
  [128] pusharglistnoret 2 ...................... <me, "host = " & pHost && ", port = " & pPort>
  [130] objcall 1202 ............................ me.log("host = " & pHost && ", port = " & pPort)
  [133] getparam 0 .............................. <me>
  [135] getlocal 0 .............................. <tNewMsg>
  [137] pusharglistnoret 2 ...................... <me, tNewMsg>
  [139] objcall 1202 ............................ me.log(tNewMsg)
  [142] getparam 0 .............................. <me>
  [144] pusharglistnoret 1 ...................... <me>
  [146] objcall 1174 ............................ me.disconnect()
  [149] pushzero ................................ <0>
  [150] pusharglistnoret 1 ...................... <0>
  [152] extcall 25 .............................. return 0
  [154] getlocal 2 .............................. <tContent>
  [156] pusharglist 1 ........................... <tContent>
  [158] extcall 20 .............................. <voidp(tContent)>
  [160] jmpifz [171] ............................ if voidp(tContent) then / else
  [163] pushzero ................................ <0>
  [164] pusharglistnoret 1 ...................... <0>
  [166] extcall 25 .............................. return 0
  [168] jmp [180]
  [171] getparam 0 .............................. <me>
  [173] getlocal 2 .............................. <tContent>
  [175] pusharglistnoret 2 ...................... <me, tContent>
  [177] objcall 1200 ............................ me.msghandler(tContent)
  [180] ret
end

on msghandler me, tContent
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getparam 1 .............................. <tContent>
  [ 31] getobjprop 490 .......................... <tContent.ilk>
  [ 34] pushsymb 595 ............................ <#string>
  [ 37] nteq .................................... <tContent.ilk <> #string>
  [ 38] jmpifz [ 46] ............................ if tContent.ilk <> #string then
  [ 41] pushzero ................................ <0>
  [ 42] pusharglistnoret 1 ...................... <0>
  [ 44] extcall 25 .............................. return 0
  [ 46] pushcons 60 ............................. <"Handling Msg: ">
  [ 48] getparam 1 .............................. <tContent>
  [ 50] joinstr ................................. <"Handling Msg: " & tContent>
  [ 51] pusharglistnoret 1 ...................... <"Handling Msg: " & tContent>
  [ 53] extcall 644 ............................. put "Handling Msg: " & tContent
  [ 56] getprop 1211 ............................ <pLastContent>
  [ 59] getobjprop 293 .......................... <pLastContent.length>
  [ 62] pushzero ................................ <0>
  [ 63] gt ...................................... <pLastContent.length > 0>
  [ 64] jmpifz [ 90] ............................ if pLastContent.length > 0 then
  [ 67] getprop 1211 ............................ <pLastContent>
  [ 70] getparam 1 .............................. <tContent>
  [ 72] joinstr ................................. <pLastContent & tContent>
  [ 73] setparam 1 .............................. tContent = pLastContent & tContent
  [ 75] pushcons 61 ............................. <"Start of new Message: ">
  [ 77] getparam 1 .............................. <tContent>
  [ 79] joinpadstr .............................. <"Start of new Message: " && tContent>
  [ 80] pusharglistnoret 1 ...................... <"Start of new Message: " && tContent>
  [ 82] extcall 644 ............................. put "Start of new Message: " && tContent
  [ 85] pushcons 1 .............................. <EMPTY>
  [ 87] setprop 1211 ............................ pLastContent = EMPTY
  [ 90] getparam 1 .............................. <tContent>
  [ 92] getobjprop 293 .......................... <tContent.length>
  [ 95] pushzero ................................ <0>
  [ 96] gt ...................................... <tContent.length > 0>
  [ 97] jmpifz [445] ............................ repeat while tContent.length > 0
  [100] getparam 1 .............................. <tContent>
  [102] getobjprop 293 .......................... <tContent.length>
  [105] pushint8 3 .............................. <3>
  [107] lt ...................................... <tContent.length < 3>
  [108] jmpifz [124] ............................ if tContent.length < 3 then
  [111] getprop 1211 ............................ <pLastContent>
  [114] getparam 1 .............................. <tContent>
  [116] joinstr ................................. <pLastContent & tContent>
  [117] setprop 1211 ............................ pLastContent = pLastContent & tContent
  [120] pusharglistnoret 0 ...................... <>
  [122] extcall 25 .............................. return 
  [124] pushint8 2 .............................. <2>
  [126] pushzero ................................ <0>
  [127] pushzero ................................ <0>
  [128] pushzero ................................ <0>
  [129] pushzero ................................ <0>
  [130] pushzero ................................ <0>
  [131] pushzero ................................ <0>
  [132] pushzero ................................ <0>
  [133] getparam 1 .............................. <tContent>
  [135] getchunk ................................ <char 2 of tContent>
  [136] pusharglist 1 ........................... <char 2 of tContent>
  [138] extcall 917 ............................. <charToNum(char 2 of tContent)>
  [141] pushint8 63 ............................. <63>
  [143] pusharglist 2 ........................... <charToNum(char 2 of tContent), 63>
  [145] extcall 863 ............................. <bitAnd(charToNum(char 2 of tContent), 63)>
  [148] setlocal 0 .............................. tByte1 = bitAnd(charToNum(char 2 of tContent), 63)
  [150] pushint8 1 .............................. <1>
  [152] pushzero ................................ <0>
  [153] pushzero ................................ <0>
  [154] pushzero ................................ <0>
  [155] pushzero ................................ <0>
  [156] pushzero ................................ <0>
  [157] pushzero ................................ <0>
  [158] pushzero ................................ <0>
  [159] getparam 1 .............................. <tContent>
  [161] getchunk ................................ <char 1 of tContent>
  [162] pusharglist 1 ........................... <char 1 of tContent>
  [164] extcall 917 ............................. <charToNum(char 1 of tContent)>
  [167] pushint8 63 ............................. <63>
  [169] pusharglist 2 ........................... <charToNum(char 1 of tContent), 63>
  [171] extcall 863 ............................. <bitAnd(charToNum(char 1 of tContent), 63)>
  [174] setlocal 1 .............................. tByte2 = bitAnd(charToNum(char 1 of tContent), 63)
  [176] getlocal 1 .............................. <tByte2>
  [178] pushint8 64 ............................. <64>
  [180] mul ..................................... <tByte2 * 64>
  [181] getlocal 0 .............................. <tByte1>
  [183] pusharglist 2 ........................... <tByte2 * 64, tByte1>
  [185] extcall 862 ............................. <bitOr(tByte2 * 64, tByte1)>
  [188] setlocal 2 .............................. tMsgType = bitOr(tByte2 * 64, tByte1)
  [190] pushint8 1 .............................. <1>
  [192] pusharglist 1 ........................... <1>
  [194] extcall 861 ............................. <numToChar(1)>
  [197] getparam 1 .............................. <tContent>
  [199] pusharglist 2 ........................... <numToChar(1), tContent>
  [201] extcall 292 ............................. <offset(numToChar(1), tContent)>
  [204] setlocal 3 .............................. tLength = offset(numToChar(1), tContent)
  [206] getlocal 3 .............................. <tLength>
  [208] pushzero ................................ <0>
  [209] eq ...................................... <tLength = 0>
  [210] getprop 911 ............................. <pUnicodeDirector>
  [213] not ..................................... <not pUnicodeDirector>
  [214] and ..................................... <(tLength = 0) and not pUnicodeDirector>
  [215] jmpifz [342] ............................ if (tLength = 0) and not pUnicodeDirector then
  [218] pushint8 3 .............................. <3>
  [220] setlocal 4
  [222] getlocal 4
  [224] getparam 1 .............................. <tContent>
  [226] getobjprop 293 .......................... <tContent.length>
  [229] lteq
  [230] jmpifz [342] ............................ repeat with i = 3 to tContent.length
  [233] getparam 1 .............................. <tContent>
  [235] pushsymb 291 ............................ <#char>
  [238] getlocal 4 .............................. <i>
  [240] pusharglist 3 ........................... <tContent, #char, i>
  [242] objcall 290 ............................. <tContent.char[i]>
  [245] pusharglist 1 ........................... <tContent.char[i]>
  [247] extcall 917 ............................. <charToNum(tContent.char[i])>
  [250] setlocal 5 .............................. tCharVal = charToNum(tContent.char[i])
  [252] getlocal 5 .............................. <tCharVal>
  [254] pushint16 256 ........................... <256>
  [257] mod ..................................... <tCharVal mod 256>
  [258] pushint8 1 .............................. <1>
  [260] eq ...................................... <(tCharVal mod 256) = 1>
  [261] jmpifz [333] ............................ if (tCharVal mod 256) = 1 then
  [264] getparam 1 .............................. <tContent>
  [266] pushsymb 291 ............................ <#char>
  [269] pushint8 1 .............................. <1>
  [271] getlocal 4 .............................. <i>
  [273] pushint8 1 .............................. <1>
  [275] sub ..................................... <i - 1>
  [276] pusharglist 4 ........................... <tContent, #char, 1, i - 1>
  [278] objcall 290 ............................. <tContent.char[1..i - 1]>
  [281] getlocal 5 .............................. <tCharVal>
  [283] pushint8 1 .............................. <1>
  [285] sub ..................................... <tCharVal - 1>
  [286] pusharglist 1 ........................... <tCharVal - 1>
  [288] extcall 861 ............................. <numToChar(tCharVal - 1)>
  [291] joinstr ................................. <tContent.char[1..i - 1] & numToChar(tCharVal - 1)>
  [292] pushint8 1 .............................. <1>
  [294] pusharglist 1 ........................... <1>
  [296] extcall 861 ............................. <numToChar(1)>
  [299] joinstr ................................. <tContent.char[1..i - 1] & numToChar(tCharVal - 1) & numToChar(1)>
  [300] getparam 1 .............................. <tContent>
  [302] pushsymb 291 ............................ <#char>
  [305] getlocal 4 .............................. <i>
  [307] pushint8 1 .............................. <1>
  [309] add ..................................... <i + 1>
  [310] getparam 1 .............................. <tContent>
  [312] getobjprop 293 .......................... <tContent.length>
  [315] pusharglist 4 ........................... <tContent, #char, i + 1, tContent.length>
  [317] objcall 290 ............................. <tContent.char[i + 1..tContent.length]>
  [320] joinstr ................................. <tContent.char[1..i - 1] & numToChar(tCharVal - 1) & numToChar(1) & tContent.char[i + 1..tContent.length]>
  [321] setparam 1 .............................. tContent = tContent.char[1..i - 1] & numToChar(tCharVal - 1) & numToChar(1) & tContent.char[i + 1..tContent.length]
  [323] getlocal 4 .............................. <i>
  [325] pushint8 1 .............................. <1>
  [327] add ..................................... <i + 1>
  [328] setlocal 3 .............................. tLength = i + 1
  [330] jmp [342] ............................... exit repeat
  [333] pushint8 1
  [335] getlocal 4
  [337] add
  [338] setlocal 4
  [340] endrepeat [222]
  [342] getlocal 3 .............................. <tLength>
  [344] pushzero ................................ <0>
  [345] eq ...................................... <tLength = 0>
  [346] jmpifz [361] ............................ if tLength = 0 then / else
  [349] getparam 1 .............................. <tContent>
  [351] setprop 1211 ............................ pLastContent = tContent
  [354] pusharglistnoret 0 ...................... <>
  [356] extcall 25 .............................. return 
  [358] jmp [366]
  [361] pushcons 1 .............................. <EMPTY>
  [363] setprop 1211 ............................ pLastContent = EMPTY
  [366] pushint8 3 .............................. <3>
  [368] getlocal 3 .............................. <tLength>
  [370] pushint8 1 .............................. <1>
  [372] sub ..................................... <tLength - 1>
  [373] pushzero ................................ <0>
  [374] pushzero ................................ <0>
  [375] pushzero ................................ <0>
  [376] pushzero ................................ <0>
  [377] pushzero ................................ <0>
  [378] pushzero ................................ <0>
  [379] getparam 1 .............................. <tContent>
  [381] getchunk ................................ <char 3 to tLength - 1 of tContent>
  [382] setlocal 6 .............................. tParams = char 3 to tLength - 1 of tContent
  [384] getlocal 3 .............................. <tLength>
  [386] pushint8 1 .............................. <1>
  [388] add ..................................... <tLength + 1>
  [389] getparam 1 .............................. <tContent>
  [391] getobjprop 293 .......................... <tContent.length>
  [394] pushzero ................................ <0>
  [395] pushzero ................................ <0>
  [396] pushzero ................................ <0>
  [397] pushzero ................................ <0>
  [398] pushzero ................................ <0>
  [399] pushzero ................................ <0>
  [400] getparam 1 .............................. <tContent>
  [402] getchunk ................................ <char tLength + 1 to tContent.length of tContent>
  [403] setparam 1 .............................. tContent = char tLength + 1 to tContent.length of tContent
  [405] getlocal 6 .............................. <tParams>
  [407] pushzero ................................ <0>
  [408] pusharglist 2 ........................... <tParams, 0>
  [410] extcall 284 ............................. <decodeUTF8(tParams, 0)>
  [413] setlocal 6 .............................. tParams = decodeUTF8(tParams, 0)
  [415] getlocal 2 .............................. <tMsgType>
  [417] pushzero ................................ <0>
  [418] eq ...................................... <tMsgType = 0>
  [419] getprop 1219 ............................ <pHelloReceived>
  [422] and ..................................... <(tMsgType = 0) and pHelloReceived>
  [423] jmpifz [431] ............................ if (tMsgType = 0) and pHelloReceived then
  [426] pushzero ................................ <0>
  [427] pusharglistnoret 1 ...................... <0>
  [429] extcall 25 .............................. return 0
  [431] getparam 0 .............................. <me>
  [433] getlocal 2 .............................. <tMsgType>
  [435] getlocal 6 .............................. <tParams>
  [437] pusharglistnoret 3 ...................... <me, tMsgType, tParams>
  [439] objcall 1201 ............................ me.forwardMsg(tMsgType, tParams)
  [442] endrepeat [ 90]
  [445] ret
end

on forwardMsg me, tSubject, tParams
  [  0] getmovieprop 1038 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1038 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1039 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1038 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 909 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1038 ......................... _player.traceScript = 0
  [ 29] getprop 1227 ............................ <pLogMode>
  [ 32] pushzero ................................ <0>
  [ 33] gt ...................................... <pLogMode > 0>
  [ 34] jmpifz [ 55] ............................ if pLogMode > 0 then
  [ 37] getparam 0 .............................. <me>
  [ 39] pushcons 62 ............................. <"-->">
  [ 41] getparam 1 .............................. <tSubject>
  [ 43] joinpadstr .............................. <"-->" && tSubject>
  [ 44] pushcons 30 ............................. <RETURN>
  [ 46] joinstr ................................. <"-->" && tSubject & RETURN>
  [ 47] getparam 2 .............................. <tParams>
  [ 49] joinstr ................................. <"-->" && tSubject & RETURN & tParams>
  [ 50] pusharglistnoret 2 ...................... <me, "-->" && tSubject & RETURN & tParams>
  [ 52] objcall 1202 ............................ me.log("-->" && tSubject & RETURN & tParams)
  [ 55] pushsymb 59 ............................. <#session>
  [ 57] pusharglist 1 ........................... <#session>
  [ 59] extcall 58 .............................. <getObject(#session)>
  [ 61] pushcons 63 ............................. <"con_lastreceived">
  [ 63] getparam 1 .............................. <tSubject>
  [ 65] pushcons 64 ............................. <"-">
  [ 67] joinpadstr .............................. <tSubject && "-">
  [ 68] pushint8 8 .............................. <8>
  [ 70] get 0 ................................... <the long time>
  [ 72] joinpadstr .............................. <tSubject && "-" && the long time>
  [ 73] pusharglistnoret 3 ...................... <getObject(#session), "con_lastreceived", tSubject && "-" && the long time>
  [ 75] objcall 60 .............................. getObject(#session).set("con_lastreceived", tSubject && "-" && the long time)
  [ 77] pusharglist 0 ........................... <>
  [ 79] extcall 270 ............................. <getStringServices()>
  [ 82] getparam 2 .............................. <tParams>
  [ 84] pusharglist 2 ........................... <getStringServices(), tParams>
  [ 86] objcall 273 ............................. <getStringServices().convertSpecialChars(tParams)>
  [ 89] setparam 2 .............................. tParams = getStringServices().convertSpecialChars(tParams)
  [ 91] getprop 1214 ............................ <pListenersPntr>
  [ 94] pushsymb 113 ............................ <#value>
  [ 96] pusharglist 2 ........................... <pListenersPntr, #value>
  [ 98] objcall 31 .............................. <pListenersPntr.getaProp(#value)>
  [100] getparam 1 .............................. <tSubject>
  [102] pusharglist 2 ........................... <pListenersPntr.getaProp(#value), tSubject>
  [104] objcall 31 .............................. <pListenersPntr.getaProp(#value).getaProp(tSubject)>
  [106] setlocal 0 .............................. tCallbackList = pListenersPntr.getaProp(#value).getaProp(tSubject)
  [108] getlocal 0 .............................. <tCallbackList>
  [110] getobjprop 490 .......................... <tCallbackList.ilk>
  [113] pushsymb 491 ............................ <#list>
  [116] nteq .................................... <tCallbackList.ilk <> #list>
  [117] jmpifz [148] ............................ if tCallbackList.ilk <> #list then
  [120] getparam 0 .............................. <me>
  [122] pushcons 65 ............................. <"Listener not found:">
  [124] getparam 1 .............................. <tSubject>
  [126] joinpadstr .............................. <"Listener not found:" && tSubject>
  [127] pushcons 66 ............................. <"/">
  [129] joinpadstr .............................. <"Listener not found:" && tSubject && "/">
  [130] getparam 0 .............................. <me>
  [132] pusharglist 1 ........................... <me>
  [134] objcall 3 ............................... <me.getID()>
  [136] joinpadstr .............................. <"Listener not found:" && tSubject && "/" && me.getID()>
  [137] pushsymb 1201 ........................... <#forwardMsg>
  [140] pusharglist 3 ........................... <me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg>
  [142] extcall 39 .............................. <error(me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg)>
  [144] pusharglistnoret 1 ...................... <error(me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg)>
  [146] extcall 25 .............................. return error(me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg)
  [148] pusharglist 0 ........................... <>
  [150] extcall 93 .............................. <getObjectManager()>
  [152] setlocal 1 .............................. tObjMgr = getObjectManager()
  [154] pushint8 1 .............................. <1>
  [156] setlocal 2
  [158] getlocal 2
  [160] getlocal 0 .............................. <tCallbackList>
  [162] pusharglist 1 ........................... <tCallbackList>
  [164] extcall 22 .............................. <count(tCallbackList)>
  [166] lteq
  [167] jmpifz [292] ............................ repeat with i = 1 to count(tCallbackList)
  [170] getlocal 0 .............................. <tCallbackList>
  [172] getlocal 2 .............................. <i>
  [174] pusharglist 2 ........................... <tCallbackList, i>
  [176] objcall 54 .............................. <tCallbackList[i]>
  [178] setlocal 3 .............................. tCallback = tCallbackList[i]
  [180] getlocal 1 .............................. <tObjMgr>
  [182] getlocal 3 .............................. <tCallback>
  [184] pushint8 1 .............................. <1>
  [186] pusharglist 2 ........................... <tCallback, 1>
  [188] objcall 54 .............................. <tCallback[1]>
  [190] pusharglist 2 ........................... <tObjMgr, tCallback[1]>
  [192] objcall 90 .............................. <tObjMgr.get(tCallback[1])>
  [194] setlocal 4 .............................. tObject = tObjMgr.get(tCallback[1])
  [196] getlocal 4 .............................. <tObject>
  [198] pushzero ................................ <0>
  [199] nteq .................................... <tObject <> 0>
  [200] jmpifz [247] ............................ if tObject <> 0 then
  [203] getprop 1204 ............................ <pMsgStruct>
  [206] pushsymb 1284 ........................... <#subject>
  [209] getparam 1 .............................. <tSubject>
  [211] pusharglistnoret 3 ...................... <pMsgStruct, #subject, tSubject>
  [213] objcall 128 ............................. pMsgStruct.setaProp(#subject, tSubject)
  [215] getprop 1204 ............................ <pMsgStruct>
  [218] pushsymb 487 ............................ <#content>
  [221] getparam 2 .............................. <tParams>
  [223] pusharglistnoret 3 ...................... <pMsgStruct, #content, tParams>
  [225] objcall 128 ............................. pMsgStruct.setaProp(#content, tParams)
  [227] getlocal 3 .............................. <tCallback>
  [229] pushint8 2 .............................. <2>
  [231] pusharglist 2 ........................... <tCallback, 2>
  [233] objcall 54 .............................. <tCallback[2]>
  [235] getlocal 4 .............................. <tObject>
  [237] getprop 1204 ............................ <pMsgStruct>
  [240] pusharglistnoret 3 ...................... <tCallback[2], tObject, pMsgStruct>
  [242] extcall 68 .............................. call(tCallback[2], tObject, pMsgStruct)
  [244] jmp [283] ............................... next repeat
  [247] getparam 0 .............................. <me>
  [249] pushcons 67 ............................. <"Listening obj not found, removed:">
  [251] getlocal 3 .............................. <tCallback>
  [253] pushint8 1 .............................. <1>
  [255] pusharglist 2 ........................... <tCallback, 1>
  [257] objcall 54 .............................. <tCallback[1]>
  [259] joinpadstr .............................. <"Listening obj not found, removed:" && tCallback[1]>
  [260] pushsymb 1201 ........................... <#forwardMsg>
  [263] pusharglistnoret 3 ...................... <me, "Listening obj not found, removed:" && tCallback[1], #forwardMsg>
  [265] extcall 39 .............................. error(me, "Listening obj not found, removed:" && tCallback[1], #forwardMsg)
  [267] getlocal 0 .............................. <tCallbackList>
  [269] pushint8 1 .............................. <1>
  [271] pusharglistnoret 2 ...................... <tCallbackList, 1>
  [273] objcall 725 ............................. tCallbackList.deleteAt(1)
  [276] getlocal 2 .............................. <i>
  [278] pushint8 1 .............................. <1>
  [280] sub ..................................... <i - 1>
  [281] setlocal 2 .............................. i = i - 1
  [283] pushint8 1
  [285] getlocal 2
  [287] add
  [288] setlocal 2
  [290] endrepeat [158]
  [292] ret
end

on log me, tMsg
  [  0] getmovieprop 82 ......................... <the runMode>
  [  2] pushcons 68 ............................. <"Author">
  [  4] containsstr ............................. <the runMode contains "Author">
  [  5] not ..................................... <not (the runMode contains "Author")>
  [  6] jmpifz [ 14] ............................ if not (the runMode contains "Author") then
  [  9] pushzero ................................ <0>
  [ 10] pusharglistnoret 1 ...................... <0>
  [ 12] extcall 25 .............................. return 0
  [ 14] getprop 1227 ............................ <pLogMode>
  [ 17] peek 0 .................................. case pLogMode of
  [ 19] pushint8 2 .............................. <2>
  [ 21] eq
  [ 22] jmpifz [ 64] ............................ (case) 2:
  [ 25] getprop 1235 ............................ <pLogfield>
  [ 28] pushsymb 41 ............................. <#member>
  [ 30] pusharglist 2 ........................... <pLogfield, #member>
  [ 32] extcall 490 ............................. <ilk(pLogfield, #member)>
  [ 35] jmpifz [ 61] ............................ if ilk(pLogfield, #member) then
  [ 38] pushcons 30 ............................. <RETURN>
  [ 40] pushcons 69 ............................. <"[Connection">
  [ 42] joinstr ................................. <RETURN & "[Connection">
  [ 43] getparam 0 .............................. <me>
  [ 45] pusharglist 1 ........................... <me>
  [ 47] objcall 3 ............................... <me.getID()>
  [ 49] joinpadstr .............................. <RETURN & "[Connection" && me.getID()>
  [ 50] pushcons 70 ............................. <"] :">
  [ 52] joinstr ................................. <RETURN & "[Connection" && me.getID() & "] :">
  [ 53] getparam 1 .............................. <tMsg>
  [ 55] joinpadstr .............................. <RETURN & "[Connection" && me.getID() & "] :" && tMsg>
  [ 56] pushvarref 1235 ......................... <pLogfield>
  [ 59] put 35 .................................. put RETURN & "[Connection" && me.getID() & "] :" && tMsg after pLogfield
  [ 61] jmp [ 82]
  [ 64] peek 0
  [ 66] pushint8 3 .............................. <3>
  [ 68] eq
  [ 69] jmpifz [ 82] ............................ (case) 3:
  [ 72] pushsymb 1286 ........................... <#logdata>
  [ 75] getparam 1 .............................. <tMsg>
  [ 77] pusharglistnoret 2 ...................... <#logdata, tMsg>
  [ 79] extcall 357 ............................. executeMessage(#logdata, tMsg)
  [ 82] pop 1 ................................... end case
  [ 84] ret
end
