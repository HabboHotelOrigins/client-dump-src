property pHost, pPort, pXtra, pMsgStruct, pConnectionOk, pConnectionSecured, pConnectionShouldBeKilled, pEncryptionOn, pDecoder, pLastContent, pContentChunk, pLogMode, pLogfield, pCommandsPntr, pListenersPntr, pUnicodeDirector

on construct me
  [  0] gettoplevelprop 907 ..................... <_player>
  [  3] getobjprop 908 .......................... <_player.productVersion>
  [  6] pushint8 1 .............................. <1>
  [  8] pushint8 2 .............................. <2>
  [ 10] pusharglist 3 ........................... <_player.productVersion, 1, 2>
  [ 12] extcall 930 ............................. <chars(_player.productVersion, 1, 2)>
  [ 15] pusharglist 1 ........................... <chars(_player.productVersion, 1, 2)>
  [ 17] extcall 113 ............................. <value(chars(_player.productVersion, 1, 2))>
  [ 19] pushint8 11 ............................. <11>
  [ 21] gteq .................................... <value(chars(_player.productVersion, 1, 2)) >= 11>
  [ 22] jmpifz [ 33] ............................ if value(chars(_player.productVersion, 1, 2)) >= 11 then / else
  [ 25] pushint8 1 .............................. <1>
  [ 27] setprop 909 ............................. pUnicodeDirector = 1
  [ 30] jmp [ 37]
  [ 33] pushzero ................................ <0>
  [ 34] setprop 909 ............................. pUnicodeDirector = 0
  [ 37] pushzero ................................ <0>
  [ 38] setprop 1154 ............................ pEncryptionOn = 0
  [ 41] pushcons 0 .............................. <"struct.message">
  [ 43] pusharglist 1 ........................... <"struct.message">
  [ 45] extcall 374 ............................. <getStructVariable("struct.message")>
  [ 48] setprop 1155 ............................ pMsgStruct = getStructVariable("struct.message")
  [ 51] getprop 1155 ............................ <pMsgStruct>
  [ 54] pushsymb 1156 ........................... <#connection>
  [ 57] getparam 0 .............................. <me>
  [ 59] pusharglistnoret 3 ...................... <pMsgStruct, #connection, me>
  [ 61] objcall 128 ............................. pMsgStruct.setaProp(#connection, me)
  [ 63] pushzero ................................ <0>
  [ 64] setprop 1068 ............................ pDecoder = 0
  [ 67] pushcons 1 .............................. <EMPTY>
  [ 69] setprop 1157 ............................ pLastContent = EMPTY
  [ 72] pushzero ................................ <0>
  [ 73] setprop 1158 ............................ pConnectionShouldBeKilled = 0
  [ 76] pushcons 2 .............................. <"struct.pointer">
  [ 78] pusharglist 1 ........................... <"struct.pointer">
  [ 80] extcall 374 ............................. <getStructVariable("struct.pointer")>
  [ 83] setprop 1159 ............................ pCommandsPntr = getStructVariable("struct.pointer")
  [ 86] pushcons 2 .............................. <"struct.pointer">
  [ 88] pusharglist 1 ........................... <"struct.pointer">
  [ 90] extcall 374 ............................. <getStructVariable("struct.pointer")>
  [ 93] setprop 1160 ............................ pListenersPntr = getStructVariable("struct.pointer")
  [ 96] getparam 0 .............................. <me>
  [ 98] pushcons 3 .............................. <"connection.log.level">
  [100] pushzero ................................ <0>
  [101] pusharglist 2 ........................... <"connection.log.level", 0>
  [103] extcall 373 ............................. <getIntVariable("connection.log.level", 0)>
  [106] pusharglistnoret 2 ...................... <me, getIntVariable("connection.log.level", 0)>
  [108] objcall 1140 ............................ me.setLogMode(getIntVariable("connection.log.level", 0))
  [111] pushint8 1 .............................. <1>
  [113] pusharglistnoret 1 ...................... <1>
  [115] extcall 25 .............................. return 1
  [117] ret
end

on deconstruct me
  [  0] getparam 0 .............................. <me>
  [  2] pushint8 1 .............................. <1>
  [  4] pusharglist 2 ........................... <me, 1>
  [  6] objcall 1137 ............................ <me.disconnect(1)>
  [  9] pusharglistnoret 1 ...................... <me.disconnect(1)>
  [ 11] extcall 25 .............................. return me.disconnect(1)
  [ 13] ret
end

on connect me, tHost, tPort
  [  0] getparam 1 .............................. <tHost>
  [  2] setprop 1161 ............................ pHost = tHost
  [  5] getparam 2 .............................. <tPort>
  [  7] setprop 1162 ............................ pPort = tPort
  [ 10] pushcons 4 .............................. <"Multiuser">
  [ 12] pusharglist 1 ........................... <"Multiuser">
  [ 14] extcall 1164 ............................ <xtra("Multiuser")>
  [ 17] pusharglist 1 ........................... <xtra("Multiuser")>
  [ 19] extcall 116 ............................. <new(xtra("Multiuser"))>
  [ 21] setprop 1163 ............................ pXtra = new(xtra("Multiuser"))
  [ 24] getprop 1163 ............................ <pXtra>
  [ 27] pushint8 16 ............................. <16>
  [ 29] pushint16 1024 .......................... <1024>
  [ 32] mul ..................................... <16 * 1024>
  [ 33] pushint8 100 ............................ <100>
  [ 35] pushint16 1024 .......................... <1024>
  [ 38] mul ..................................... <100 * 1024>
  [ 39] pushint8 100 ............................ <100>
  [ 41] pusharglistnoret 4 ...................... <pXtra, 16 * 1024, 100 * 1024, 100>
  [ 43] objcall 1165 ............................ pXtra.setNetBufferLimits(16 * 1024, 100 * 1024, 100)
  [ 46] getprop 1163 ............................ <pXtra>
  [ 49] pushsymb 1150 ........................... <#xtraMsgHandler>
  [ 52] getparam 0 .............................. <me>
  [ 54] pusharglist 3 ........................... <pXtra, #xtraMsgHandler, me>
  [ 56] objcall 1166 ............................ <pXtra.setNetMessageHandler(#xtraMsgHandler, me)>
  [ 59] setlocal 0 .............................. tErrCode = pXtra.setNetMessageHandler(#xtraMsgHandler, me)
  [ 61] getlocal 0 .............................. <tErrCode>
  [ 63] pushzero ................................ <0>
  [ 64] eq ...................................... <tErrCode = 0>
  [ 65] jmpifz [ 93] ............................ if tErrCode = 0 then / else
  [ 68] getprop 1163 ............................ <pXtra>
  [ 71] pushcons 5 .............................. <"*">
  [ 73] pushcons 5 .............................. <"*">
  [ 75] getprop 1161 ............................ <pHost>
  [ 78] getprop 1162 ............................ <pPort>
  [ 81] pushcons 5 .............................. <"*">
  [ 83] pushint8 1 .............................. <1>
  [ 85] pusharglistnoret 7 ...................... <pXtra, "*", "*", pHost, pPort, "*", 1>
  [ 87] objcall 1167 ............................ pXtra.connectToNetServer("*", "*", pHost, pPort, "*", 1)
  [ 90] jmp [111]
  [ 93] getparam 0 .............................. <me>
  [ 95] pushcons 6 .............................. <"Creation of callback failed:">
  [ 97] getlocal 0 .............................. <tErrCode>
  [ 99] joinpadstr .............................. <"Creation of callback failed:" && tErrCode>
  [100] pushsymb 854 ............................ <#connect>
  [103] pusharglist 3 ........................... <me, "Creation of callback failed:" && tErrCode, #connect>
  [105] extcall 39 .............................. <error(me, "Creation of callback failed:" && tErrCode, #connect)>
  [107] pusharglistnoret 1 ...................... <error(me, "Creation of callback failed:" && tErrCode, #connect)>
  [109] extcall 25 .............................. return error(me, "Creation of callback failed:" && tErrCode, #connect)
  [111] pushcons 1 .............................. <EMPTY>
  [113] setprop 1157 ............................ pLastContent = EMPTY
  [116] getprop 1168 ............................ <pLogMode>
  [119] pushzero ................................ <0>
  [120] gt ...................................... <pLogMode > 0>
  [121] jmpifz [148] ............................ if pLogMode > 0 then
  [124] getparam 0 .............................. <me>
  [126] pushcons 7 .............................. <"Connection initialized:">
  [128] getparam 0 .............................. <me>
  [130] pusharglist 1 ........................... <me>
  [132] objcall 3 ............................... <me.getID()>
  [134] joinpadstr .............................. <"Connection initialized:" && me.getID()>
  [135] getprop 1161 ............................ <pHost>
  [138] joinpadstr .............................. <"Connection initialized:" && me.getID() && pHost>
  [139] getprop 1162 ............................ <pPort>
  [142] joinpadstr .............................. <"Connection initialized:" && me.getID() && pHost && pPort>
  [143] pusharglistnoret 2 ...................... <me, "Connection initialized:" && me.getID() && pHost && pPort>
  [145] objcall 1153 ............................ me.log("Connection initialized:" && me.getID() && pHost && pPort)
  [148] pushint8 1 .............................. <1>
  [150] pusharglistnoret 1 ...................... <1>
  [152] extcall 25 .............................. return 1
  [154] ret
end

on disconnect me, tControlled
  [  0] getparam 1 .............................. <tControlled>
  [  2] pushint8 1 .............................. <1>
  [  4] nteq .................................... <tControlled <> 1>
  [  5] jmpifz [ 18] ............................ if tControlled <> 1 then
  [  8] getparam 0 .............................. <me>
  [ 10] pushint8 1 .............................. <1>
  [ 12] inv ..................................... <-1>
  [ 13] pusharglistnoret 2 ...................... <me, -1>
  [ 15] objcall 1152 ............................ me.forwardMsg(-1)
  [ 18] pushint8 1 .............................. <1>
  [ 20] setprop 1158 ............................ pConnectionShouldBeKilled = 1
  [ 23] getprop 1163 ............................ <pXtra>
  [ 26] pusharglist 1 ........................... <pXtra>
  [ 28] extcall 112 ............................. <objectp(pXtra)>
  [ 30] jmpifz [ 65] ............................ if objectp(pXtra) then
  [ 33] getprop 1163 ............................ <pXtra>
  [ 36] pushzero ................................ <0>
  [ 37] pushzero ................................ <0>
  [ 38] pushzero ................................ <0>
  [ 39] pusharglist 1 ........................... <0>
  [ 41] extcall 859 ............................. <numToChar(0)>
  [ 44] pusharglistnoret 4 ...................... <pXtra, 0, 0, numToChar(0)>
  [ 46] objcall 1170 ............................ pXtra.sendNetMessage(0, 0, numToChar(0))
  [ 49] getprop 1163 ............................ <pXtra>
  [ 52] pusharglist 0 ........................... <>
  [ 54] extcall 32 .............................. <VOID>
  [ 56] pusharglist 0 ........................... <>
  [ 58] extcall 32 .............................. <VOID>
  [ 60] pusharglistnoret 3 ...................... <pXtra, VOID, VOID>
  [ 62] objcall 1166 ............................ pXtra.setNetMessageHandler(VOID, VOID)
  [ 65] pusharglist 0 ........................... <>
  [ 67] extcall 32 .............................. <VOID>
  [ 69] setprop 1163 ............................ pXtra = VOID
  [ 72] getparam 1 .............................. <tControlled>
  [ 74] not ..................................... <not tControlled>
  [ 75] jmpifz [ 96] ............................ if not tControlled then
  [ 78] getparam 0 .............................. <me>
  [ 80] pushcons 8 .............................. <"Connection disconnected:">
  [ 82] getparam 0 .............................. <me>
  [ 84] pusharglist 1 ........................... <me>
  [ 86] objcall 3 ............................... <me.getID()>
  [ 88] joinpadstr .............................. <"Connection disconnected:" && me.getID()>
  [ 89] pushsymb 1137 ........................... <#disconnect>
  [ 92] pusharglistnoret 3 ...................... <me, "Connection disconnected:" && me.getID(), #disconnect>
  [ 94] extcall 39 .............................. error(me, "Connection disconnected:" && me.getID(), #disconnect)
  [ 96] pushint8 1 .............................. <1>
  [ 98] pusharglistnoret 1 ...................... <1>
  [100] extcall 25 .............................. return 1
  [102] ret
end

on connectionReady me
  [  0] getprop 1172 ............................ <pConnectionOk>
  [  3] getprop 1173 ............................ <pConnectionSecured>
  [  6] and ..................................... <pConnectionOk and pConnectionSecured>
  [  7] pusharglistnoret 1 ...................... <pConnectionOk and pConnectionSecured>
  [  9] extcall 25 .............................. return pConnectionOk and pConnectionSecured
  [ 11] ret
end

on setDecoder me, tDecoder
  [  0] getparam 1 .............................. <tDecoder>
  [  2] pusharglist 1 ........................... <tDecoder>
  [  4] extcall 112 ............................. <objectp(tDecoder)>
  [  6] not ..................................... <not objectp(tDecoder)>
  [  7] jmpifz [ 31] ............................ if not objectp(tDecoder) then / else
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 9 .............................. <"Decoder object expected:">
  [ 14] getparam 1 .............................. <tDecoder>
  [ 16] joinpadstr .............................. <"Decoder object expected:" && tDecoder>
  [ 17] pushsymb 1138 ........................... <#setDecoder>
  [ 20] pusharglist 3 ........................... <me, "Decoder object expected:" && tDecoder, #setDecoder>
  [ 22] extcall 39 .............................. <error(me, "Decoder object expected:" && tDecoder, #setDecoder)>
  [ 24] pusharglistnoret 1 ...................... <error(me, "Decoder object expected:" && tDecoder, #setDecoder)>
  [ 26] extcall 25 .............................. return error(me, "Decoder object expected:" && tDecoder, #setDecoder)
  [ 28] jmp [ 42]
  [ 31] getparam 1 .............................. <tDecoder>
  [ 33] setprop 1068 ............................ pDecoder = tDecoder
  [ 36] pushint8 1 .............................. <1>
  [ 38] pusharglistnoret 1 ...................... <1>
  [ 40] extcall 25 .............................. return 1
  [ 42] ret
end

on getDecoder me
  [  0] getprop 1068 ............................ <pDecoder>
  [  3] pusharglistnoret 1 ...................... <pDecoder>
  [  5] extcall 25 .............................. return pDecoder
  [  7] ret
end

on setLogMode me, tMode
  [  0] getparam 1 .............................. <tMode>
  [  2] getobjprop 488 .......................... <tMode.ilk>
  [  5] pushsymb 955 ............................ <#integer>
  [  8] nteq .................................... <tMode.ilk <> #integer>
  [  9] jmpifz [ 30] ............................ if tMode.ilk <> #integer then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 10 ............................. <"Invalid argument:">
  [ 16] getparam 1 .............................. <tMode>
  [ 18] joinpadstr .............................. <"Invalid argument:" && tMode>
  [ 19] pushsymb 1140 ........................... <#setLogMode>
  [ 22] pusharglist 3 ........................... <me, "Invalid argument:" && tMode, #setLogMode>
  [ 24] extcall 39 .............................. <error(me, "Invalid argument:" && tMode, #setLogMode)>
  [ 26] pusharglistnoret 1 ...................... <error(me, "Invalid argument:" && tMode, #setLogMode)>
  [ 28] extcall 25 .............................. return error(me, "Invalid argument:" && tMode, #setLogMode)
  [ 30] getparam 1 .............................. <tMode>
  [ 32] setprop 1168 ............................ pLogMode = tMode
  [ 35] getprop 1168 ............................ <pLogMode>
  [ 38] pushint8 2 .............................. <2>
  [ 40] eq ...................................... <pLogMode = 2>
  [ 41] jmpifz [ 81] ............................ if pLogMode = 2 then
  [ 44] pushcons 11 ............................. <"connectionLog.text">
  [ 46] pusharglist 1 ........................... <"connectionLog.text">
  [ 48] extcall 170 ............................. <memberExists("connectionLog.text")>
  [ 50] jmpifz [ 69] ............................ if memberExists("connectionLog.text") then / else
  [ 53] pushcons 11 ............................. <"connectionLog.text">
  [ 55] pusharglist 1 ........................... <"connectionLog.text">
  [ 57] extcall 52 .............................. <getmemnum("connectionLog.text")>
  [ 59] pusharglist 1 ........................... <getmemnum("connectionLog.text")>
  [ 61] extcall 41 .............................. <member(getmemnum("connectionLog.text"))>
  [ 63] setprop 1175 ............................ pLogfield = member(getmemnum("connectionLog.text"))
  [ 66] jmp [ 81]
  [ 69] pusharglist 0 ........................... <>
  [ 71] extcall 32 .............................. <VOID>
  [ 73] setprop 1175 ............................ pLogfield = VOID
  [ 76] pushint8 1 .............................. <1>
  [ 78] setprop 1168 ............................ pLogMode = 1
  [ 81] pushint8 1 .............................. <1>
  [ 83] pusharglistnoret 1 ...................... <1>
  [ 85] extcall 25 .............................. return 1
  [ 87] ret
end

on getLogMode me
  [  0] getprop 1168 ............................ <pLogMode>
  [  3] pusharglistnoret 1 ...................... <pLogMode>
  [  5] extcall 25 .............................. return pLogMode
  [  7] ret
end

on setEncryption me, tBoolean
  [  0] getparam 1 .............................. <tBoolean>
  [  2] setprop 1154 ............................ pEncryptionOn = tBoolean
  [  5] pushint8 1 .............................. <1>
  [  7] setprop 1173 ............................ pConnectionSecured = 1
  [ 10] pushint8 1 .............................. <1>
  [ 12] pusharglistnoret 1 ...................... <1>
  [ 14] extcall 25 .............................. return 1
  [ 16] ret
end

on send me, tCmd, tMsg
  [  0] getmovieprop 1023 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1023 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1024 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1023 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 907 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1023 ......................... _player.traceScript = 0
  [ 29] getparam 2 .............................. <tMsg>
  [ 31] getobjprop 488 .......................... <tMsg.ilk>
  [ 34] pushsymb 807 ............................ <#propList>
  [ 37] eq ...................................... <tMsg.ilk = #propList>
  [ 38] jmpifz [ 56] ............................ if tMsg.ilk = #propList then
  [ 41] getparam 0 .............................. <me>
  [ 43] getparam 1 .............................. <tCmd>
  [ 45] getparam 2 .............................. <tMsg>
  [ 47] pusharglist 3 ........................... <me, tCmd, tMsg>
  [ 49] objcall 1143 ............................ <me.sendNew(tCmd, tMsg)>
  [ 52] pusharglistnoret 1 ...................... <me.sendNew(tCmd, tMsg)>
  [ 54] extcall 25 .............................. return me.sendNew(tCmd, tMsg)
  [ 56] getprop 1172 ............................ <pConnectionOk>
  [ 59] getprop 1163 ............................ <pXtra>
  [ 62] pusharglist 1 ........................... <pXtra>
  [ 64] extcall 112 ............................. <objectp(pXtra)>
  [ 66] and ..................................... <pConnectionOk and objectp(pXtra)>
  [ 67] not ..................................... <not (pConnectionOk and objectp(pXtra))>
  [ 68] jmpifz [ 96] ............................ if not (pConnectionOk and objectp(pXtra)) then
  [ 71] getparam 0 .............................. <me>
  [ 73] pushcons 12 ............................. <"Connection not ready:">
  [ 75] getparam 0 .............................. <me>
  [ 77] pusharglist 1 ........................... <me>
  [ 79] objcall 3 ............................... <me.getID()>
  [ 81] joinpadstr .............................. <"Connection not ready:" && me.getID()>
  [ 82] pushsymb 1042 ........................... <#send>
  [ 85] pushsymb 1177 ........................... <#major>
  [ 88] pusharglist 4 ........................... <me, "Connection not ready:" && me.getID(), #send, #major>
  [ 90] extcall 39 .............................. <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [ 92] pusharglistnoret 1 ...................... <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [ 94] extcall 25 .............................. return error(me, "Connection not ready:" && me.getID(), #send, #major)
  [ 96] getparam 2 .............................. <tMsg>
  [ 98] getobjprop 488 .......................... <tMsg.ilk>
  [101] pushsymb 593 ............................ <#string>
  [104] nteq .................................... <tMsg.ilk <> #string>
  [105] jmpifz [117] ............................ if tMsg.ilk <> #string then
  [108] getparam 2 .............................. <tMsg>
  [110] pusharglist 1 ........................... <tMsg>
  [112] extcall 593 ............................. <string(tMsg)>
  [115] setparam 2 .............................. tMsg = string(tMsg)
  [117] getprop 1154 ............................ <pEncryptionOn>
  [120] not ..................................... <not pEncryptionOn>
  [121] getprop 909 ............................. <pUnicodeDirector>
  [124] and ..................................... <not pEncryptionOn and pUnicodeDirector>
  [125] jmpifz [193] ............................ if not pEncryptionOn and pUnicodeDirector then
  [128] pushint8 1 .............................. <1>
  [130] setlocal 0
  [132] getlocal 0
  [134] getparam 2 .............................. <tMsg>
  [136] getobjprop 293 .......................... <tMsg.length>
  [139] lteq
  [140] jmpifz [193] ............................ repeat with i = 1 to tMsg.length
  [143] getparam 2 .............................. <tMsg>
  [145] pushsymb 291 ............................ <#char>
  [148] getlocal 0 .............................. <i>
  [150] pusharglist 3 ........................... <tMsg, #char, i>
  [152] objcall 290 ............................. <tMsg.char[i]>
  [155] pusharglist 1 ........................... <tMsg.char[i]>
  [157] extcall 915 ............................. <charToNum(tMsg.char[i])>
  [160] pushint8 127 ............................ <127>
  [162] gt ...................................... <charToNum(tMsg.char[i]) > 127>
  [163] jmpifz [184] ............................ if charToNum(tMsg.char[i]) > 127 then
  [166] getparam 0 .............................. <me>
  [168] pushcons 13 ............................. <"Encryption required for non-ascii content with SW11">
  [170] pushsymb 1042 ........................... <#send>
  [173] pushsymb 1178 ........................... <#critical>
  [176] pusharglist 4 ........................... <me, "Encryption required for non-ascii content with SW11", #send, #critical>
  [178] extcall 39 .............................. <error(me, "Encryption required for non-ascii content with SW11", #send, #critical)>
  [180] pusharglistnoret 1 ...................... <error(me, "Encryption required for non-ascii content with SW11", #send, #critical)>
  [182] extcall 25 .............................. return error(me, "Encryption required for non-ascii content with SW11", #send, #critical)
  [184] pushint8 1
  [186] getlocal 0
  [188] add
  [189] setlocal 0
  [191] endrepeat [132]
  [193] getparam 2 .............................. <tMsg>
  [195] pusharglist 1 ........................... <tMsg>
  [197] extcall 283 ............................. <encodeUTF8(tMsg)>
  [200] setparam 2 .............................. tMsg = encodeUTF8(tMsg)
  [202] getparam 1 .............................. <tCmd>
  [204] getobjprop 488 .......................... <tCmd.ilk>
  [207] pushsymb 955 ............................ <#integer>
  [210] nteq .................................... <tCmd.ilk <> #integer>
  [211] jmpifz [235] ............................ if tCmd.ilk <> #integer then
  [214] getparam 1 .............................. <tCmd>
  [216] setlocal 1 .............................. tStr = tCmd
  [218] getprop 1159 ............................ <pCommandsPntr>
  [221] pushsymb 113 ............................ <#value>
  [223] pusharglist 2 ........................... <pCommandsPntr, #value>
  [225] objcall 31 .............................. <pCommandsPntr.getaProp(#value)>
  [227] getlocal 1 .............................. <tStr>
  [229] pusharglist 2 ........................... <pCommandsPntr.getaProp(#value), tStr>
  [231] objcall 31 .............................. <pCommandsPntr.getaProp(#value).getaProp(tStr)>
  [233] setparam 1 .............................. tCmd = pCommandsPntr.getaProp(#value).getaProp(tStr)
  [235] getparam 1 .............................. <tCmd>
  [237] getobjprop 488 .......................... <tCmd.ilk>
  [240] pushsymb 32 ............................. <#void>
  [242] eq ...................................... <tCmd.ilk = #void>
  [243] jmpifz [264] ............................ if tCmd.ilk = #void then
  [246] getparam 0 .............................. <me>
  [248] pushcons 14 ............................. <"Unrecognized command!">
  [250] pushsymb 1042 ........................... <#send>
  [253] pushsymb 1177 ........................... <#major>
  [256] pusharglist 4 ........................... <me, "Unrecognized command!", #send, #major>
  [258] extcall 39 .............................. <error(me, "Unrecognized command!", #send, #major)>
  [260] pusharglistnoret 1 ...................... <error(me, "Unrecognized command!", #send, #major)>
  [262] extcall 25 .............................. return error(me, "Unrecognized command!", #send, #major)
  [264] getprop 1168 ............................ <pLogMode>
  [267] pushzero ................................ <0>
  [268] gt ...................................... <pLogMode > 0>
  [269] jmpifz [296] ............................ if pLogMode > 0 then
  [272] getparam 0 .............................. <me>
  [274] pushcons 15 ............................. <"<--">
  [276] getlocal 1 .............................. <tStr>
  [278] joinpadstr .............................. <"<--" && tStr>
  [279] pushcons 16 ............................. <"(">
  [281] joinpadstr .............................. <"<--" && tStr && "(">
  [282] getparam 1 .............................. <tCmd>
  [284] joinstr ................................. <"<--" && tStr && "(" & tCmd>
  [285] pushcons 17 ............................. <")">
  [287] joinstr ................................. <"<--" && tStr && "(" & tCmd & ")">
  [288] getparam 2 .............................. <tMsg>
  [290] joinpadstr .............................. <"<--" && tStr && "(" & tCmd & ")" && tMsg>
  [291] pusharglistnoret 2 ...................... <me, "<--" && tStr && "(" & tCmd & ")" && tMsg>
  [293] objcall 1153 ............................ me.log("<--" && tStr && "(" & tCmd & ")" && tMsg)
  [296] getparam 1 .............................. <tCmd>
  [298] getparam 2 .............................. <tMsg>
  [300] joinstr ................................. <tCmd & tMsg>
  [301] setparam 2 .............................. tMsg = tCmd & tMsg
  [303] pushzero ................................ <0>
  [304] setlocal 2 .............................. tLength = 0
  [306] pushint8 1 .............................. <1>
  [308] setlocal 3
  [310] getlocal 3
  [312] getparam 2 .............................. <tMsg>
  [314] pusharglist 1 ........................... <tMsg>
  [316] extcall 293 ............................. <length(tMsg)>
  [319] lteq
  [320] jmpifz [372] ............................ repeat with tChar = 1 to length(tMsg)
  [323] getlocal 3 .............................. <tChar>
  [325] pushzero ................................ <0>
  [326] pushzero ................................ <0>
  [327] pushzero ................................ <0>
  [328] pushzero ................................ <0>
  [329] pushzero ................................ <0>
  [330] pushzero ................................ <0>
  [331] pushzero ................................ <0>
  [332] getparam 2 .............................. <tMsg>
  [334] getchunk ................................ <char tChar of tMsg>
  [335] pusharglist 1 ........................... <char tChar of tMsg>
  [337] extcall 915 ............................. <charToNum(char tChar of tMsg)>
  [340] setlocal 4 .............................. tCharNum = charToNum(char tChar of tMsg)
  [342] getlocal 2 .............................. <tLength>
  [344] pushint8 1 .............................. <1>
  [346] add ..................................... <tLength + 1>
  [347] getlocal 4 .............................. <tCharNum>
  [349] pushint16 255 ........................... <255>
  [352] gt ...................................... <tCharNum > 255>
  [353] getlocal 4 .............................. <tCharNum>
  [355] pushint16 256 ........................... <256>
  [358] mod ..................................... <tCharNum mod 256>
  [359] and ..................................... <(tCharNum > 255) and (tCharNum mod 256)>
  [360] add ..................................... <tLength + 1 + ((tCharNum > 255) and (tCharNum mod 256))>
  [361] setlocal 2 .............................. tLength = tLength + 1 + ((tCharNum > 255) and (tCharNum mod 256))
  [363] pushint8 1
  [365] getlocal 3
  [367] add
  [368] setlocal 3
  [370] endrepeat [310]
  [372] getlocal 2 .............................. <tLength>
  [374] pushint8 63 ............................. <63>
  [376] pusharglist 2 ........................... <tLength, 63>
  [378] extcall 861 ............................. <bitAnd(tLength, 63)>
  [381] pushint8 64 ............................. <64>
  [383] pusharglist 2 ........................... <bitAnd(tLength, 63), 64>
  [385] extcall 860 ............................. <bitOr(bitAnd(tLength, 63), 64)>
  [388] pusharglist 1 ........................... <bitOr(bitAnd(tLength, 63), 64)>
  [390] extcall 859 ............................. <numToChar(bitOr(bitAnd(tLength, 63), 64))>
  [393] setlocal 5 .............................. tL1 = numToChar(bitOr(bitAnd(tLength, 63), 64))
  [395] getlocal 2 .............................. <tLength>
  [397] pushint8 64 ............................. <64>
  [399] div ..................................... <tLength / 64>
  [400] pushint8 63 ............................. <63>
  [402] pusharglist 2 ........................... <tLength / 64, 63>
  [404] extcall 861 ............................. <bitAnd(tLength / 64, 63)>
  [407] pushint8 64 ............................. <64>
  [409] pusharglist 2 ........................... <bitAnd(tLength / 64, 63), 64>
  [411] extcall 860 ............................. <bitOr(bitAnd(tLength / 64, 63), 64)>
  [414] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 64, 63), 64)>
  [416] extcall 859 ............................. <numToChar(bitOr(bitAnd(tLength / 64, 63), 64))>
  [419] setlocal 6 .............................. tL2 = numToChar(bitOr(bitAnd(tLength / 64, 63), 64))
  [421] getlocal 2 .............................. <tLength>
  [423] pushint16 4096 .......................... <4096>
  [426] div ..................................... <tLength / 4096>
  [427] pushint8 63 ............................. <63>
  [429] pusharglist 2 ........................... <tLength / 4096, 63>
  [431] extcall 861 ............................. <bitAnd(tLength / 4096, 63)>
  [434] pushint8 64 ............................. <64>
  [436] pusharglist 2 ........................... <bitAnd(tLength / 4096, 63), 64>
  [438] extcall 860 ............................. <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [441] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [443] extcall 859 ............................. <numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))>
  [446] setlocal 7 .............................. tL3 = numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))
  [448] getlocal 7 .............................. <tL3>
  [450] getlocal 6 .............................. <tL2>
  [452] joinstr ................................. <tL3 & tL2>
  [453] getlocal 5 .............................. <tL1>
  [455] joinstr ................................. <tL3 & tL2 & tL1>
  [456] getparam 2 .............................. <tMsg>
  [458] joinstr ................................. <tL3 & tL2 & tL1 & tMsg>
  [459] setparam 2 .............................. tMsg = tL3 & tL2 & tL1 & tMsg
  [461] getprop 1154 ............................ <pEncryptionOn>
  [464] getprop 1068 ............................ <pDecoder>
  [467] pusharglist 1 ........................... <pDecoder>
  [469] extcall 112 ............................. <objectp(pDecoder)>
  [471] and ..................................... <pEncryptionOn and objectp(pDecoder)>
  [472] jmpifz [487] ............................ if pEncryptionOn and objectp(pDecoder) then
  [475] getprop 1068 ............................ <pDecoder>
  [478] getparam 2 .............................. <tMsg>
  [480] pusharglist 2 ........................... <pDecoder, tMsg>
  [482] objcall 1041 ............................ <pDecoder.encipher(tMsg)>
  [485] setparam 2 .............................. tMsg = pDecoder.encipher(tMsg)
  [487] getprop 1163 ............................ <pXtra>
  [490] pushzero ................................ <0>
  [491] pushzero ................................ <0>
  [492] getparam 2 .............................. <tMsg>
  [494] pusharglistnoret 4 ...................... <pXtra, 0, 0, tMsg>
  [496] objcall 1170 ............................ pXtra.sendNetMessage(0, 0, tMsg)
  [499] pushint8 1 .............................. <1>
  [501] pusharglistnoret 1 ...................... <1>
  [503] extcall 25 .............................. return 1
  [505] ret
end

on sendNew me, tCmd, tParmArr
  [  0] getmovieprop 1023 ....................... <the traceScript>
  [  3] jmpifz [ 11] ............................ if the traceScript then
  [  6] pushzero ................................ <0>
  [  7] pusharglistnoret 1 ...................... <0>
  [  9] extcall 25 .............................. return 0
  [ 11] pushzero ................................ <0>
  [ 12] setmovieprop 1023 ....................... the traceScript = 0
  [ 15] gettoplevelprop 1024 .................... <_movie>
  [ 18] pushzero ................................ <0>
  [ 19] setobjprop 1023 ......................... _movie.traceScript = 0
  [ 22] gettoplevelprop 907 ..................... <_player>
  [ 25] pushzero ................................ <0>
  [ 26] setobjprop 1023 ......................... _player.traceScript = 0
  [ 29] getprop 1172 ............................ <pConnectionOk>
  [ 32] getprop 1163 ............................ <pXtra>
  [ 35] pusharglist 1 ........................... <pXtra>
  [ 37] extcall 112 ............................. <objectp(pXtra)>
  [ 39] and ..................................... <pConnectionOk and objectp(pXtra)>
  [ 40] not ..................................... <not (pConnectionOk and objectp(pXtra))>
  [ 41] jmpifz [ 69] ............................ if not (pConnectionOk and objectp(pXtra)) then
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 12 ............................. <"Connection not ready:">
  [ 48] getparam 0 .............................. <me>
  [ 50] pusharglist 1 ........................... <me>
  [ 52] objcall 3 ............................... <me.getID()>
  [ 54] joinpadstr .............................. <"Connection not ready:" && me.getID()>
  [ 55] pushsymb 1042 ........................... <#send>
  [ 58] pushsymb 1177 ........................... <#major>
  [ 61] pusharglist 4 ........................... <me, "Connection not ready:" && me.getID(), #send, #major>
  [ 63] extcall 39 .............................. <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [ 65] pusharglistnoret 1 ...................... <error(me, "Connection not ready:" && me.getID(), #send, #major)>
  [ 67] extcall 25 .............................. return error(me, "Connection not ready:" && me.getID(), #send, #major)
  [ 69] pushcons 1 .............................. <EMPTY>
  [ 71] setlocal 0 .............................. tMsg = EMPTY
  [ 73] pushint8 2 .............................. <2>
  [ 75] setlocal 1 .............................. tLength = 2
  [ 77] getparam 2 .............................. <tParmArr>
  [ 79] pusharglist 1 ........................... <tParmArr>
  [ 81] extcall 53 .............................. <listp(tParmArr)>
  [ 83] jmpifz [748] ............................ if listp(tParmArr) then
  [ 86] pushint8 1 .............................. <1>
  [ 88] setlocal 2
  [ 90] getlocal 2
  [ 92] getparam 2 .............................. <tParmArr>
  [ 94] getobjprop 22 ........................... <tParmArr.count>
  [ 96] lteq
  [ 97] jmpifz [748] ............................ repeat with i = 1 to tParmArr.count
  [100] getparam 2 .............................. <tParmArr>
  [102] getlocal 2 .............................. <i>
  [104] pusharglist 2 ........................... <tParmArr, i>
  [106] objcall 23 .............................. <tParmArr.getPropAt(i)>
  [108] setlocal 3 .............................. ttype = tParmArr.getPropAt(i)
  [110] getparam 2 .............................. <tParmArr>
  [112] getlocal 2 .............................. <i>
  [114] pusharglist 2 ........................... <tParmArr, i>
  [116] objcall 54 .............................. <tParmArr[i]>
  [118] setlocal 4 .............................. tParm = tParmArr[i]
  [120] getlocal 3 .............................. <ttype>
  [122] peek 0 .................................. case ttype of
  [124] pushsymb 593 ............................ <#string>
  [127] eq
  [128] jmpifz [349] ............................ (case) #string:
  [131] getlocal 4 .............................. <tParm>
  [133] pusharglist 1 ........................... <tParm>
  [135] extcall 283 ............................. <encodeUTF8(tParm)>
  [138] setlocal 4 .............................. tParm = encodeUTF8(tParm)
  [140] getlocal 4 .............................. <tParm>
  [142] pushint8 2 .............................. <2>
  [144] pusharglist 1 ........................... <2>
  [146] extcall 859 ............................. <numToChar(2)>
  [149] containsstr ............................. <tParm contains numToChar(2)>
  [150] jmpifz [160] ............................ if tParm contains numToChar(2) then
  [153] pop 1
  [155] pushzero ................................ <0>
  [156] pusharglistnoret 1 ...................... <0>
  [158] extcall 25 .............................. return 0
  [160] getlocal 4 .............................. <tParm>
  [162] pusharglist 1 ........................... <tParm>
  [164] extcall 593 ............................. <string(tParm)>
  [167] setlocal 4 .............................. tParm = string(tParm)
  [169] getlocal 4 .............................. <tParm>
  [171] pusharglist 1 ........................... <tParm>
  [173] extcall 488 ............................. <ilk(tParm)>
  [176] pushsymb 593 ............................ <#string>
  [179] nteq .................................... <ilk(tParm) <> #string>
  [180] jmpifz [212] ............................ if ilk(tParm) <> #string then
  [183] pop 1
  [185] getparam 0 .............................. <me>
  [187] pushcons 18 ............................. <"String expected:">
  [189] getparam 1 .............................. <tCmd>
  [191] joinpadstr .............................. <"String expected:" && tCmd>
  [192] pushcons 19 ............................. <":">
  [194] joinstr ................................. <"String expected:" && tCmd & ":">
  [195] getlocal 4 .............................. <tParm>
  [197] joinstr ................................. <"String expected:" && tCmd & ":" & tParm>
  [198] pushsymb 1143 ........................... <#sendNew>
  [201] pushsymb 1177 ........................... <#major>
  [204] pusharglist 4 ........................... <me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major>
  [206] extcall 39 .............................. <error(me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [208] pusharglistnoret 1 ...................... <error(me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [210] extcall 25 .............................. return error(me, "String expected:" && tCmd & ":" & tParm, #sendNew, #major)
  [212] pushzero ................................ <0>
  [213] setlocal 5 .............................. tLen = 0
  [215] pushint8 1 .............................. <1>
  [217] setlocal 6
  [219] getlocal 6
  [221] getlocal 4 .............................. <tParm>
  [223] pusharglist 1 ........................... <tParm>
  [225] extcall 293 ............................. <length(tParm)>
  [228] lteq
  [229] jmpifz [281] ............................ repeat with tChar = 1 to length(tParm)
  [232] getlocal 6 .............................. <tChar>
  [234] pushzero ................................ <0>
  [235] pushzero ................................ <0>
  [236] pushzero ................................ <0>
  [237] pushzero ................................ <0>
  [238] pushzero ................................ <0>
  [239] pushzero ................................ <0>
  [240] pushzero ................................ <0>
  [241] getlocal 4 .............................. <tParm>
  [243] getchunk ................................ <char tChar of tParm>
  [244] pusharglist 1 ........................... <char tChar of tParm>
  [246] extcall 915 ............................. <charToNum(char tChar of tParm)>
  [249] setlocal 7 .............................. tNum = charToNum(char tChar of tParm)
  [251] getlocal 5 .............................. <tLen>
  [253] pushint8 1 .............................. <1>
  [255] add ..................................... <tLen + 1>
  [256] getlocal 7 .............................. <tNum>
  [258] pushint16 255 ........................... <255>
  [261] gt ...................................... <tNum > 255>
  [262] getlocal 7 .............................. <tNum>
  [264] pushint16 256 ........................... <256>
  [267] mod ..................................... <tNum mod 256>
  [268] and ..................................... <(tNum > 255) and (tNum mod 256)>
  [269] add ..................................... <tLen + 1 + ((tNum > 255) and (tNum mod 256))>
  [270] setlocal 5 .............................. tLen = tLen + 1 + ((tNum > 255) and (tNum mod 256))
  [272] pushint8 1
  [274] getlocal 6
  [276] add
  [277] setlocal 6
  [279] endrepeat [219]
  [281] pushint8 64 ............................. <64>
  [283] getlocal 5 .............................. <tLen>
  [285] pushint8 64 ............................. <64>
  [287] div ..................................... <tLen / 64>
  [288] pusharglist 2 ........................... <64, tLen / 64>
  [290] extcall 860 ............................. <bitOr(64, tLen / 64)>
  [293] pusharglist 1 ........................... <bitOr(64, tLen / 64)>
  [295] extcall 859 ............................. <numToChar(bitOr(64, tLen / 64))>
  [298] setlocal 8 .............................. tBy1 = numToChar(bitOr(64, tLen / 64))
  [300] pushint8 64 ............................. <64>
  [302] pushint8 63 ............................. <63>
  [304] getlocal 5 .............................. <tLen>
  [306] pusharglist 2 ........................... <63, tLen>
  [308] extcall 861 ............................. <bitAnd(63, tLen)>
  [311] pusharglist 2 ........................... <64, bitAnd(63, tLen)>
  [313] extcall 860 ............................. <bitOr(64, bitAnd(63, tLen))>
  [316] pusharglist 1 ........................... <bitOr(64, bitAnd(63, tLen))>
  [318] extcall 859 ............................. <numToChar(bitOr(64, bitAnd(63, tLen)))>
  [321] setlocal 9 .............................. tBy2 = numToChar(bitOr(64, bitAnd(63, tLen)))
  [323] getlocal 0 .............................. <tMsg>
  [325] getlocal 8 .............................. <tBy1>
  [327] joinstr ................................. <tMsg & tBy1>
  [328] getlocal 9 .............................. <tBy2>
  [330] joinstr ................................. <tMsg & tBy1 & tBy2>
  [331] getlocal 4 .............................. <tParm>
  [333] joinstr ................................. <tMsg & tBy1 & tBy2 & tParm>
  [334] setlocal 0 .............................. tMsg = tMsg & tBy1 & tBy2 & tParm
  [336] getlocal 1 .............................. <tLength>
  [338] getlocal 5 .............................. <tLen>
  [340] add ..................................... <tLength + tLen>
  [341] pushint8 2 .............................. <2>
  [343] add ..................................... <tLength + tLen + 2>
  [344] setlocal 1 .............................. tLength = tLength + tLen + 2
  [346] jmp [736]
  [349] peek 0
  [351] pushsymb 1182 ........................... <#short>
  [354] eq
  [355] jmpifz [472] ............................ (case) #short:
  [358] getlocal 4 .............................. <tParm>
  [360] pusharglist 1 ........................... <tParm>
  [362] extcall 955 ............................. <integer(tParm)>
  [365] setlocal 4 .............................. tParm = integer(tParm)
  [367] getlocal 4 .............................. <tParm>
  [369] pusharglist 1 ........................... <tParm>
  [371] extcall 488 ............................. <ilk(tParm)>
  [374] pushsymb 955 ............................ <#integer>
  [377] nteq .................................... <ilk(tParm) <> #integer>
  [378] jmpifz [410] ............................ if ilk(tParm) <> #integer then
  [381] pop 1
  [383] getparam 0 .............................. <me>
  [385] pushcons 20 ............................. <"Short expected:">
  [387] getparam 1 .............................. <tCmd>
  [389] joinpadstr .............................. <"Short expected:" && tCmd>
  [390] pushcons 19 ............................. <":">
  [392] joinstr ................................. <"Short expected:" && tCmd & ":">
  [393] getlocal 4 .............................. <tParm>
  [395] joinstr ................................. <"Short expected:" && tCmd & ":" & tParm>
  [396] pushsymb 1143 ........................... <#sendNew>
  [399] pushsymb 1177 ........................... <#major>
  [402] pusharglist 4 ........................... <me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major>
  [404] extcall 39 .............................. <error(me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [406] pusharglistnoret 1 ...................... <error(me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [408] extcall 25 .............................. return error(me, "Short expected:" && tCmd & ":" & tParm, #sendNew, #major)
  [410] pushint8 64 ............................. <64>
  [412] getlocal 4 .............................. <tParm>
  [414] pushint8 64 ............................. <64>
  [416] div ..................................... <tParm / 64>
  [417] pusharglist 2 ........................... <64, tParm / 64>
  [419] extcall 860 ............................. <bitOr(64, tParm / 64)>
  [422] pusharglist 1 ........................... <bitOr(64, tParm / 64)>
  [424] extcall 859 ............................. <numToChar(bitOr(64, tParm / 64))>
  [427] setlocal 8 .............................. tBy1 = numToChar(bitOr(64, tParm / 64))
  [429] pushint8 64 ............................. <64>
  [431] pushint8 63 ............................. <63>
  [433] getlocal 4 .............................. <tParm>
  [435] pusharglist 2 ........................... <63, tParm>
  [437] extcall 861 ............................. <bitAnd(63, tParm)>
  [440] pusharglist 2 ........................... <64, bitAnd(63, tParm)>
  [442] extcall 860 ............................. <bitOr(64, bitAnd(63, tParm))>
  [445] pusharglist 1 ........................... <bitOr(64, bitAnd(63, tParm))>
  [447] extcall 859 ............................. <numToChar(bitOr(64, bitAnd(63, tParm)))>
  [450] setlocal 9 .............................. tBy2 = numToChar(bitOr(64, bitAnd(63, tParm)))
  [452] getlocal 0 .............................. <tMsg>
  [454] getlocal 8 .............................. <tBy1>
  [456] joinstr ................................. <tMsg & tBy1>
  [457] getlocal 9 .............................. <tBy2>
  [459] joinstr ................................. <tMsg & tBy1 & tBy2>
  [460] setlocal 0 .............................. tMsg = tMsg & tBy1 & tBy2
  [462] getlocal 1 .............................. <tLength>
  [464] pushint8 2 .............................. <2>
  [466] add ..................................... <tLength + 2>
  [467] setlocal 1 .............................. tLength = tLength + 2
  [469] jmp [736]
  [472] peek 0
  [474] pushsymb 955 ............................ <#integer>
  [477] nteq
  [478] jmpifz [490] ............................ (case) #integer, ...
  [481] peek 0
  [483] pushsymb 1183 ........................... <#boolean>
  [486] eq
  [487] jmpifz [719] ............................ (case) ..., #boolean:
  [490] getlocal 3 .............................. <ttype>
  [492] pushsymb 1183 ........................... <#boolean>
  [495] eq ...................................... <ttype = #boolean>
  [496] jmpifz [505] ............................ if ttype = #boolean then
  [499] getlocal 4 .............................. <tParm>
  [501] pushzero ................................ <0>
  [502] nteq .................................... <tParm <> 0>
  [503] setlocal 4 .............................. tParm = tParm <> 0
  [505] getlocal 4 .............................. <tParm>
  [507] pusharglist 1 ........................... <tParm>
  [509] extcall 955 ............................. <integer(tParm)>
  [512] setlocal 4 .............................. tParm = integer(tParm)
  [514] getlocal 4 .............................. <tParm>
  [516] pusharglist 1 ........................... <tParm>
  [518] extcall 488 ............................. <ilk(tParm)>
  [521] pushsymb 955 ............................ <#integer>
  [524] nteq .................................... <ilk(tParm) <> #integer>
  [525] jmpifz [557] ............................ if ilk(tParm) <> #integer then
  [528] pop 1
  [530] getparam 0 .............................. <me>
  [532] pushcons 21 ............................. <"Integer expected:">
  [534] getparam 1 .............................. <tCmd>
  [536] joinpadstr .............................. <"Integer expected:" && tCmd>
  [537] pushcons 19 ............................. <":">
  [539] joinstr ................................. <"Integer expected:" && tCmd & ":">
  [540] getlocal 4 .............................. <tParm>
  [542] joinstr ................................. <"Integer expected:" && tCmd & ":" & tParm>
  [543] pushsymb 1143 ........................... <#sendNew>
  [546] pushsymb 1177 ........................... <#major>
  [549] pusharglist 4 ........................... <me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major>
  [551] extcall 39 .............................. <error(me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [553] pusharglistnoret 1 ...................... <error(me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major)>
  [555] extcall 25 .............................. return error(me, "Integer expected:" && tCmd & ":" & tParm, #sendNew, #major)
  [557] getlocal 4 .............................. <tParm>
  [559] pushzero ................................ <0>
  [560] lt ...................................... <tParm < 0>
  [561] jmpifz [576] ............................ if tParm < 0 then / else
  [564] pushint8 4 .............................. <4>
  [566] setlocal 10 ............................. tNegMask = 4
  [568] getlocal 4 .............................. <tParm>
  [570] inv ..................................... <-tParm>
  [571] setlocal 4 .............................. tParm = -tParm
  [573] jmp [579]
  [576] pushzero ................................ <0>
  [577] setlocal 10 ............................. tNegMask = 0
  [579] pushint8 64 ............................. <64>
  [581] getlocal 4 .............................. <tParm>
  [583] pushint8 3 .............................. <3>
  [585] pusharglist 2 ........................... <tParm, 3>
  [587] extcall 861 ............................. <bitAnd(tParm, 3)>
  [590] add ..................................... <64 + bitAnd(tParm, 3)>
  [591] pusharglist 1 ........................... <64 + bitAnd(tParm, 3)>
  [593] extcall 859 ............................. <numToChar(64 + bitAnd(tParm, 3))>
  [596] setlocal 11 ............................. tStr = numToChar(64 + bitAnd(tParm, 3))
  [598] pushint8 1 .............................. <1>
  [600] setlocal 12 ............................. tBytes = 1
  [602] getlocal 4 .............................. <tParm>
  [604] pushint8 4 .............................. <4>
  [606] div ..................................... <tParm / 4>
  [607] setlocal 4 .............................. tParm = tParm / 4
  [609] getlocal 4 .............................. <tParm>
  [611] pushzero ................................ <0>
  [612] nteq .................................... <tParm <> 0>
  [613] jmpifz [653] ............................ repeat while tParm <> 0
  [616] getlocal 12 ............................. <tBytes>
  [618] pushint8 1 .............................. <1>
  [620] add ..................................... <tBytes + 1>
  [621] setlocal 12 ............................. tBytes = tBytes + 1
  [623] pushint8 64 ............................. <64>
  [625] getlocal 4 .............................. <tParm>
  [627] pushint8 63 ............................. <63>
  [629] pusharglist 2 ........................... <tParm, 63>
  [631] extcall 861 ............................. <bitAnd(tParm, 63)>
  [634] add ..................................... <64 + bitAnd(tParm, 63)>
  [635] pusharglist 1 ........................... <64 + bitAnd(tParm, 63)>
  [637] extcall 859 ............................. <numToChar(64 + bitAnd(tParm, 63))>
  [640] pushint8 11 ............................. <11>
  [642] put 37 .................................. put numToChar(64 + bitAnd(tParm, 63)) after tStr
  [644] getlocal 4 .............................. <tParm>
  [646] pushint8 64 ............................. <64>
  [648] div ..................................... <tParm / 64>
  [649] setlocal 4 .............................. tParm = tParm / 64
  [651] endrepeat [609]
  [653] pushint8 1 .............................. <1>
  [655] pushzero ................................ <0>
  [656] pushzero ................................ <0>
  [657] pushzero ................................ <0>
  [658] pushzero ................................ <0>
  [659] pushzero ................................ <0>
  [660] pushzero ................................ <0>
  [661] pushzero ................................ <0>
  [662] getlocal 11 ............................. <tStr>
  [664] getchunk ................................ <char 1 of tStr>
  [665] pusharglist 1 ........................... <char 1 of tStr>
  [667] extcall 915 ............................. <charToNum(char 1 of tStr)>
  [670] getlocal 12 ............................. <tBytes>
  [672] pushint8 8 .............................. <8>
  [674] mul ..................................... <tBytes * 8>
  [675] pusharglist 2 ........................... <charToNum(char 1 of tStr), tBytes * 8>
  [677] extcall 860 ............................. <bitOr(charToNum(char 1 of tStr), tBytes * 8)>
  [680] getlocal 10 ............................. <tNegMask>
  [682] pusharglist 2 ........................... <bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask>
  [684] extcall 860 ............................. <bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask)>
  [687] pusharglist 1 ........................... <bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask)>
  [689] extcall 859 ............................. <numToChar(bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask))>
  [692] pushzero ................................ <0>
  [693] put 37 .................................. put numToChar(bitOr(bitOr(charToNum(char 1 of tStr), tBytes * 8), tNegMask)) after tMsg
  [695] getlocal 11 ............................. <tStr>
  [697] pushint8 2 .............................. <2>
  [699] getlocal 12 ............................. <tBytes>
  [701] pusharglist 3 ........................... <tStr, 2, tBytes>
  [703] extcall 930 ............................. <chars(tStr, 2, tBytes)>
  [706] pushzero ................................ <0>
  [707] put 37 .................................. put chars(tStr, 2, tBytes) after tMsg
  [709] getlocal 1 .............................. <tLength>
  [711] getlocal 12 ............................. <tBytes>
  [713] add ..................................... <tLength + tBytes>
  [714] setlocal 1 .............................. tLength = tLength + tBytes
  [716] jmp [736] ............................... (case) otherwise:
  [719] getparam 0 .............................. <me>
  [721] pushcons 22 ............................. <"Unsupported param type:">
  [723] getlocal 3 .............................. <ttype>
  [725] joinpadstr .............................. <"Unsupported param type:" && ttype>
  [726] pushsymb 1042 ........................... <#send>
  [729] pushsymb 1177 ........................... <#major>
  [732] pusharglistnoret 4 ...................... <me, "Unsupported param type:" && ttype, #send, #major>
  [734] extcall 39 .............................. error(me, "Unsupported param type:" && ttype, #send, #major)
  [736] pop 1 ................................... end case
  [738] pushint8 1
  [740] getlocal 2
  [742] add
  [743] setlocal 2
  [745] endrepeat [ 90]
  [748] getparam 1 .............................. <tCmd>
  [750] getobjprop 488 .......................... <tCmd.ilk>
  [753] pushsymb 955 ............................ <#integer>
  [756] nteq .................................... <tCmd.ilk <> #integer>
  [757] jmpifz [781] ............................ if tCmd.ilk <> #integer then
  [760] getparam 1 .............................. <tCmd>
  [762] setlocal 11 ............................. tStr = tCmd
  [764] getprop 1159 ............................ <pCommandsPntr>
  [767] pushsymb 113 ............................ <#value>
  [769] pusharglist 2 ........................... <pCommandsPntr, #value>
  [771] objcall 31 .............................. <pCommandsPntr.getaProp(#value)>
  [773] getlocal 11 ............................. <tStr>
  [775] pusharglist 2 ........................... <pCommandsPntr.getaProp(#value), tStr>
  [777] objcall 31 .............................. <pCommandsPntr.getaProp(#value).getaProp(tStr)>
  [779] setparam 1 .............................. tCmd = pCommandsPntr.getaProp(#value).getaProp(tStr)
  [781] getparam 1 .............................. <tCmd>
  [783] getobjprop 488 .......................... <tCmd.ilk>
  [786] pushsymb 32 ............................. <#void>
  [788] eq ...................................... <tCmd.ilk = #void>
  [789] jmpifz [810] ............................ if tCmd.ilk = #void then
  [792] getparam 0 .............................. <me>
  [794] pushcons 14 ............................. <"Unrecognized command!">
  [796] pushsymb 1042 ........................... <#send>
  [799] pushsymb 1177 ........................... <#major>
  [802] pusharglist 4 ........................... <me, "Unrecognized command!", #send, #major>
  [804] extcall 39 .............................. <error(me, "Unrecognized command!", #send, #major)>
  [806] pusharglistnoret 1 ...................... <error(me, "Unrecognized command!", #send, #major)>
  [808] extcall 25 .............................. return error(me, "Unrecognized command!", #send, #major)
  [810] getprop 1168 ............................ <pLogMode>
  [813] pushzero ................................ <0>
  [814] gt ...................................... <pLogMode > 0>
  [815] jmpifz [842] ............................ if pLogMode > 0 then
  [818] getparam 0 .............................. <me>
  [820] pushcons 15 ............................. <"<--">
  [822] getlocal 11 ............................. <tStr>
  [824] joinpadstr .............................. <"<--" && tStr>
  [825] pushcons 16 ............................. <"(">
  [827] joinpadstr .............................. <"<--" && tStr && "(">
  [828] getparam 1 .............................. <tCmd>
  [830] joinstr ................................. <"<--" && tStr && "(" & tCmd>
  [831] pushcons 17 ............................. <")">
  [833] joinstr ................................. <"<--" && tStr && "(" & tCmd & ")">
  [834] getlocal 0 .............................. <tMsg>
  [836] joinpadstr .............................. <"<--" && tStr && "(" & tCmd & ")" && tMsg>
  [837] pusharglistnoret 2 ...................... <me, "<--" && tStr && "(" & tCmd & ")" && tMsg>
  [839] objcall 1153 ............................ me.log("<--" && tStr && "(" & tCmd & ")" && tMsg)
  [842] getparam 1 .............................. <tCmd>
  [844] getlocal 0 .............................. <tMsg>
  [846] joinstr ................................. <tCmd & tMsg>
  [847] setlocal 0 .............................. tMsg = tCmd & tMsg
  [849] getlocal 1 .............................. <tLength>
  [851] pushint8 63 ............................. <63>
  [853] pusharglist 2 ........................... <tLength, 63>
  [855] extcall 861 ............................. <bitAnd(tLength, 63)>
  [858] pushint8 64 ............................. <64>
  [860] pusharglist 2 ........................... <bitAnd(tLength, 63), 64>
  [862] extcall 860 ............................. <bitOr(bitAnd(tLength, 63), 64)>
  [865] pusharglist 1 ........................... <bitOr(bitAnd(tLength, 63), 64)>
  [867] extcall 859 ............................. <numToChar(bitOr(bitAnd(tLength, 63), 64))>
  [870] setlocal 13 ............................. tL1 = numToChar(bitOr(bitAnd(tLength, 63), 64))
  [872] getlocal 1 .............................. <tLength>
  [874] pushint8 64 ............................. <64>
  [876] div ..................................... <tLength / 64>
  [877] pushint8 63 ............................. <63>
  [879] pusharglist 2 ........................... <tLength / 64, 63>
  [881] extcall 861 ............................. <bitAnd(tLength / 64, 63)>
  [884] pushint8 64 ............................. <64>
  [886] pusharglist 2 ........................... <bitAnd(tLength / 64, 63), 64>
  [888] extcall 860 ............................. <bitOr(bitAnd(tLength / 64, 63), 64)>
  [891] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 64, 63), 64)>
  [893] extcall 859 ............................. <numToChar(bitOr(bitAnd(tLength / 64, 63), 64))>
  [896] setlocal 14 ............................. tL2 = numToChar(bitOr(bitAnd(tLength / 64, 63), 64))
  [898] getlocal 1 .............................. <tLength>
  [900] pushint16 4096 .......................... <4096>
  [903] div ..................................... <tLength / 4096>
  [904] pushint8 63 ............................. <63>
  [906] pusharglist 2 ........................... <tLength / 4096, 63>
  [908] extcall 861 ............................. <bitAnd(tLength / 4096, 63)>
  [911] pushint8 64 ............................. <64>
  [913] pusharglist 2 ........................... <bitAnd(tLength / 4096, 63), 64>
  [915] extcall 860 ............................. <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [918] pusharglist 1 ........................... <bitOr(bitAnd(tLength / 4096, 63), 64)>
  [920] extcall 859 ............................. <numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))>
  [923] setlocal 15 ............................. tL3 = numToChar(bitOr(bitAnd(tLength / 4096, 63), 64))
  [925] getlocal 15 ............................. <tL3>
  [927] getlocal 14 ............................. <tL2>
  [929] joinstr ................................. <tL3 & tL2>
  [930] getlocal 13 ............................. <tL1>
  [932] joinstr ................................. <tL3 & tL2 & tL1>
  [933] getlocal 0 .............................. <tMsg>
  [935] joinstr ................................. <tL3 & tL2 & tL1 & tMsg>
  [936] setlocal 0 .............................. tMsg = tL3 & tL2 & tL1 & tMsg
  [938] getprop 1154 ............................ <pEncryptionOn>
  [941] getprop 1068 ............................ <pDecoder>
  [944] pusharglist 1 ........................... <pDecoder>
  [946] extcall 112 ............................. <objectp(pDecoder)>
  [948] and ..................................... <pEncryptionOn and objectp(pDecoder)>
  [949] jmpifz [964] ............................ if pEncryptionOn and objectp(pDecoder) then
  [952] getprop 1068 ............................ <pDecoder>
  [955] getlocal 0 .............................. <tMsg>
  [957] pusharglist 2 ........................... <pDecoder, tMsg>
  [959] objcall 1041 ............................ <pDecoder.encipher(tMsg)>
  [962] setlocal 0 .............................. tMsg = pDecoder.encipher(tMsg)
  [964] getprop 1163 ............................ <pXtra>
  [967] pushzero ................................ <0>
  [968] pushzero ................................ <0>
  [969] getlocal 0 .............................. <tMsg>
  [971] pusharglistnoret 4 ...................... <pXtra, 0, 0, tMsg>
  [973] objcall 1170 ............................ pXtra.sendNetMessage(0, 0, tMsg)
  [976] pushint8 1 .............................. <1>
  [978] pusharglistnoret 1 ...................... <1>
  [980] extcall 25 .............................. return 1
  [982] ret
end

on getWaitingMessagesCount me
  [  0] getprop 1163 ............................ <pXtra>
  [  3] pusharglist 1 ........................... <pXtra>
  [  5] objcall 1189 ............................ <pXtra.getNumberWaitingNetMessages()>
  [  8] pusharglistnoret 1 ...................... <pXtra.getNumberWaitingNetMessages()>
  [ 10] extcall 25 .............................. return pXtra.getNumberWaitingNetMessages()
  [ 12] ret
end

on processWaitingMessages me, tCount
  [  0] getparam 1 .............................. <tCount>
  [  2] pusharglist 1 ........................... <tCount>
  [  4] extcall 20 .............................. <voidp(tCount)>
  [  6] jmpifz [ 13] ............................ if voidp(tCount) then
  [  9] pushint8 1 .............................. <1>
  [ 11] setparam 1 .............................. tCount = 1
  [ 13] getprop 1163 ............................ <pXtra>
  [ 16] getparam 1 .............................. <tCount>
  [ 18] pusharglist 2 ........................... <pXtra, tCount>
  [ 20] objcall 1190 ............................ <pXtra.checkNetMessages(tCount)>
  [ 23] pusharglistnoret 1 ...................... <pXtra.checkNetMessages(tCount)>
  [ 25] extcall 25 .............................. return pXtra.checkNetMessages(tCount)
  [ 27] ret
end

on getProperty me, tProp
  [  0] getparam 1 .............................. <tProp>
  [  2] peek 0 .................................. case tProp of
  [  4] pushsymb 1164 ........................... <#xtra>
  [  7] eq
  [  8] jmpifz [ 23] ............................ (case) #xtra:
  [ 11] pop 1
  [ 13] getprop 1163 ............................ <pXtra>
  [ 16] pusharglistnoret 1 ...................... <pXtra>
  [ 18] extcall 25 .............................. return pXtra
  [ 20] jmp [175]
  [ 23] peek 0
  [ 25] pushsymb 1191 ........................... <#host>
  [ 28] eq
  [ 29] jmpifz [ 44] ............................ (case) #host:
  [ 32] pop 1
  [ 34] getprop 1161 ............................ <pHost>
  [ 37] pusharglistnoret 1 ...................... <pHost>
  [ 39] extcall 25 .............................. return pHost
  [ 41] jmp [175]
  [ 44] peek 0
  [ 46] pushsymb 1192 ........................... <#port>
  [ 49] eq
  [ 50] jmpifz [ 65] ............................ (case) #port:
  [ 53] pop 1
  [ 55] getprop 1162 ............................ <pPort>
  [ 58] pusharglistnoret 1 ...................... <pPort>
  [ 60] extcall 25 .............................. return pPort
  [ 62] jmp [175]
  [ 65] peek 0
  [ 67] pushsymb 1193 ........................... <#decoder>
  [ 70] eq
  [ 71] jmpifz [ 90] ............................ (case) #decoder:
  [ 74] pop 1
  [ 76] getparam 0 .............................. <me>
  [ 78] pusharglist 1 ........................... <me>
  [ 80] objcall 1139 ............................ <me.getDecoder()>
  [ 83] pusharglistnoret 1 ...................... <me.getDecoder()>
  [ 85] extcall 25 .............................. return me.getDecoder()
  [ 87] jmp [175]
  [ 90] peek 0
  [ 92] pushsymb 1194 ........................... <#logmode>
  [ 95] eq
  [ 96] jmpifz [115] ............................ (case) #logmode:
  [ 99] pop 1
  [101] getparam 0 .............................. <me>
  [103] pusharglist 1 ........................... <me>
  [105] objcall 1141 ............................ <me.getLogMode()>
  [108] pusharglistnoret 1 ...................... <me.getLogMode()>
  [110] extcall 25 .............................. return me.getLogMode()
  [112] jmp [175]
  [115] peek 0
  [117] pushsymb 852 ............................ <#listener>
  [120] eq
  [121] jmpifz [136] ............................ (case) #listener:
  [124] pop 1
  [126] getprop 1160 ............................ <pListenersPntr>
  [129] pusharglistnoret 1 ...................... <pListenersPntr>
  [131] extcall 25 .............................. return pListenersPntr
  [133] jmp [175]
  [136] peek 0
  [138] pushsymb 853 ............................ <#commands>
  [141] eq
  [142] jmpifz [157] ............................ (case) #commands:
  [145] pop 1
  [147] getprop 1159 ............................ <pCommandsPntr>
  [150] pusharglistnoret 1 ...................... <pCommandsPntr>
  [152] extcall 25 .............................. return pCommandsPntr
  [154] jmp [175]
  [157] peek 0
  [159] pushsymb 1039 ........................... <#message>
  [162] eq
  [163] jmpifz [175] ............................ (case) #message:
  [166] pop 1
  [168] getprop 1155 ............................ <pMsgStruct>
  [171] pusharglistnoret 1 ...................... <pMsgStruct>
  [173] extcall 25 .............................. return pMsgStruct
  [175] pop 1 ................................... end case
  [177] pushzero ................................ <0>
  [178] pusharglistnoret 1 ...................... <0>
  [180] extcall 25 .............................. return 0
  [182] ret
end

on setProperty me, tProp, tValue
  [  0] getparam 1 .............................. <tProp>
  [  2] peek 0 .................................. case tProp of
  [  4] pushsymb 1193 ........................... <#decoder>
  [  7] eq
  [  8] jmpifz [ 29] ............................ (case) #decoder:
  [ 11] pop 1
  [ 13] getparam 0 .............................. <me>
  [ 15] getparam 2 .............................. <tValue>
  [ 17] pusharglist 2 ........................... <me, tValue>
  [ 19] objcall 1138 ............................ <me.setDecoder(tValue)>
  [ 22] pusharglistnoret 1 ...................... <me.setDecoder(tValue)>
  [ 24] extcall 25 .............................. return me.setDecoder(tValue)
  [ 26] jmp [147]
  [ 29] peek 0
  [ 31] pushsymb 1194 ........................... <#logmode>
  [ 34] eq
  [ 35] jmpifz [ 56] ............................ (case) #logmode:
  [ 38] pop 1
  [ 40] getparam 0 .............................. <me>
  [ 42] getparam 2 .............................. <tValue>
  [ 44] pusharglist 2 ........................... <me, tValue>
  [ 46] objcall 1140 ............................ <me.setLogMode(tValue)>
  [ 49] pusharglistnoret 1 ...................... <me.setLogMode(tValue)>
  [ 51] extcall 25 .............................. return me.setLogMode(tValue)
  [ 53] jmp [147]
  [ 56] peek 0
  [ 58] pushsymb 852 ............................ <#listener>
  [ 61] eq
  [ 62] jmpifz [103] ............................ (case) #listener:
  [ 65] getparam 2 .............................. <tValue>
  [ 67] getobjprop 488 .......................... <tValue.ilk>
  [ 70] pushsymb 1054 ........................... <#struct>
  [ 73] eq ...................................... <tValue.ilk = #struct>
  [ 74] jmpifz [ 93] ............................ if tValue.ilk = #struct then / else
  [ 77] getparam 2 .............................. <tValue>
  [ 79] setprop 1160 ............................ pListenersPntr = tValue
  [ 82] pop 1
  [ 84] pushint8 1 .............................. <1>
  [ 86] pusharglistnoret 1 ...................... <1>
  [ 88] extcall 25 .............................. return 1
  [ 90] jmp [100]
  [ 93] pop 1
  [ 95] pushzero ................................ <0>
  [ 96] pusharglistnoret 1 ...................... <0>
  [ 98] extcall 25 .............................. return 0
  [100] jmp [147]
  [103] peek 0
  [105] pushsymb 853 ............................ <#commands>
  [108] eq
  [109] jmpifz [147] ............................ (case) #commands:
  [112] getparam 2 .............................. <tValue>
  [114] getobjprop 488 .......................... <tValue.ilk>
  [117] pushsymb 1054 ........................... <#struct>
  [120] eq ...................................... <tValue.ilk = #struct>
  [121] jmpifz [140] ............................ if tValue.ilk = #struct then / else
  [124] getparam 2 .............................. <tValue>
  [126] setprop 1159 ............................ pCommandsPntr = tValue
  [129] pop 1
  [131] pushint8 1 .............................. <1>
  [133] pusharglistnoret 1 ...................... <1>
  [135] extcall 25 .............................. return 1
  [137] jmp [147]
  [140] pop 1
  [142] pushzero ................................ <0>
  [143] pusharglistnoret 1 ...................... <0>
  [145] extcall 25 .............................. return 0
  [147] pop 1 ................................... end case
  [149] pushzero ................................ <0>
  [150] pusharglistnoret 1 ...................... <0>
  [152] extcall 25 .............................. return 0
  [154] ret
end

on GetBoolFrom me
  [  0] getprop 1155 ............................ <pMsgStruct>
  [  3] pushsymb 485 ............................ <#content>
  [  6] pusharglist 2 ........................... <pMsgStruct, #content>
  [  8] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 10] setlocal 0 .............................. tByteStr = pMsgStruct.getaProp(#content)
  [ 12] pushint8 1 .............................. <1>
  [ 14] pushzero ................................ <0>
  [ 15] pushzero ................................ <0>
  [ 16] pushzero ................................ <0>
  [ 17] pushzero ................................ <0>
  [ 18] pushzero ................................ <0>
  [ 19] pushzero ................................ <0>
  [ 20] pushzero ................................ <0>
  [ 21] getlocal 0 .............................. <tByteStr>
  [ 23] getchunk ................................ <char 1 of tByteStr>
  [ 24] pusharglist 1 ........................... <char 1 of tByteStr>
  [ 26] extcall 915 ............................. <charToNum(char 1 of tByteStr)>
  [ 29] pushint8 63 ............................. <63>
  [ 31] pusharglist 2 ........................... <charToNum(char 1 of tByteStr), 63>
  [ 33] extcall 861 ............................. <bitAnd(charToNum(char 1 of tByteStr), 63)>
  [ 36] setlocal 1 .............................. tByte = bitAnd(charToNum(char 1 of tByteStr), 63)
  [ 38] getprop 1155 ............................ <pMsgStruct>
  [ 41] pushsymb 485 ............................ <#content>
  [ 44] getlocal 0 .............................. <tByteStr>
  [ 46] pushsymb 291 ............................ <#char>
  [ 49] pushint8 2 .............................. <2>
  [ 51] getlocal 0 .............................. <tByteStr>
  [ 53] pusharglist 1 ........................... <tByteStr>
  [ 55] extcall 293 ............................. <length(tByteStr)>
  [ 58] pusharglist 4 ........................... <tByteStr, #char, 2, length(tByteStr)>
  [ 60] objcall 290 ............................. <tByteStr.char[2..length(tByteStr)]>
  [ 63] pusharglistnoret 3 ...................... <pMsgStruct, #content, tByteStr.char[2..length(tByteStr)]>
  [ 65] objcall 128 ............................. pMsgStruct.setaProp(#content, tByteStr.char[2..length(tByteStr)])
  [ 67] getlocal 1 .............................. <tByte>
  [ 69] pushzero ................................ <0>
  [ 70] nteq .................................... <tByte <> 0>
  [ 71] pusharglistnoret 1 ...................... <tByte <> 0>
  [ 73] extcall 25 .............................. return tByte <> 0
  [ 75] ret
end

on GetByteFrom me
  [  0] getprop 1155 ............................ <pMsgStruct>
  [  3] pushsymb 485 ............................ <#content>
  [  6] pusharglist 2 ........................... <pMsgStruct, #content>
  [  8] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 10] setlocal 0 .............................. tByteStr = pMsgStruct.getaProp(#content)
  [ 12] pushint8 1 .............................. <1>
  [ 14] pushzero ................................ <0>
  [ 15] pushzero ................................ <0>
  [ 16] pushzero ................................ <0>
  [ 17] pushzero ................................ <0>
  [ 18] pushzero ................................ <0>
  [ 19] pushzero ................................ <0>
  [ 20] pushzero ................................ <0>
  [ 21] getlocal 0 .............................. <tByteStr>
  [ 23] getchunk ................................ <char 1 of tByteStr>
  [ 24] pusharglist 1 ........................... <char 1 of tByteStr>
  [ 26] extcall 915 ............................. <charToNum(char 1 of tByteStr)>
  [ 29] pushint8 63 ............................. <63>
  [ 31] pusharglist 2 ........................... <charToNum(char 1 of tByteStr), 63>
  [ 33] extcall 861 ............................. <bitAnd(charToNum(char 1 of tByteStr), 63)>
  [ 36] setlocal 1 .............................. tByte = bitAnd(charToNum(char 1 of tByteStr), 63)
  [ 38] getprop 1155 ............................ <pMsgStruct>
  [ 41] pushsymb 485 ............................ <#content>
  [ 44] getlocal 0 .............................. <tByteStr>
  [ 46] pushsymb 291 ............................ <#char>
  [ 49] pushint8 2 .............................. <2>
  [ 51] getlocal 0 .............................. <tByteStr>
  [ 53] pusharglist 1 ........................... <tByteStr>
  [ 55] extcall 293 ............................. <length(tByteStr)>
  [ 58] pusharglist 4 ........................... <tByteStr, #char, 2, length(tByteStr)>
  [ 60] objcall 290 ............................. <tByteStr.char[2..length(tByteStr)]>
  [ 63] pusharglistnoret 3 ...................... <pMsgStruct, #content, tByteStr.char[2..length(tByteStr)]>
  [ 65] objcall 128 ............................. pMsgStruct.setaProp(#content, tByteStr.char[2..length(tByteStr)])
  [ 67] getlocal 1 .............................. <tByte>
  [ 69] pusharglistnoret 1 ...................... <tByte>
  [ 71] extcall 25 .............................. return tByte
  [ 73] ret
end

on GetIntFrom me
  [  0] getprop 1155 ............................ <pMsgStruct>
  [  3] pushsymb 485 ............................ <#content>
  [  6] pusharglist 2 ........................... <pMsgStruct, #content>
  [  8] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 10] setlocal 0 .............................. tByteStr = pMsgStruct.getaProp(#content)
  [ 12] pushint8 1 .............................. <1>
  [ 14] pushzero ................................ <0>
  [ 15] pushzero ................................ <0>
  [ 16] pushzero ................................ <0>
  [ 17] pushzero ................................ <0>
  [ 18] pushzero ................................ <0>
  [ 19] pushzero ................................ <0>
  [ 20] pushzero ................................ <0>
  [ 21] getlocal 0 .............................. <tByteStr>
  [ 23] getchunk ................................ <char 1 of tByteStr>
  [ 24] pusharglist 1 ........................... <char 1 of tByteStr>
  [ 26] extcall 915 ............................. <charToNum(char 1 of tByteStr)>
  [ 29] pushint8 63 ............................. <63>
  [ 31] pusharglist 2 ........................... <charToNum(char 1 of tByteStr), 63>
  [ 33] extcall 861 ............................. <bitAnd(charToNum(char 1 of tByteStr), 63)>
  [ 36] setlocal 1 .............................. tByte = bitAnd(charToNum(char 1 of tByteStr), 63)
  [ 38] getlocal 1 .............................. <tByte>
  [ 40] pushint8 56 ............................. <56>
  [ 42] pusharglist 2 ........................... <tByte, 56>
  [ 44] extcall 861 ............................. <bitAnd(tByte, 56)>
  [ 47] pushint8 8 .............................. <8>
  [ 49] div ..................................... <bitAnd(tByte, 56) / 8>
  [ 50] pushzero ................................ <0>
  [ 51] pusharglist 2 ........................... <bitAnd(tByte, 56) / 8, 0>
  [ 53] extcall 860 ............................. <bitOr(bitAnd(tByte, 56) / 8, 0)>
  [ 56] setlocal 2 .............................. tByCnt = bitOr(bitAnd(tByte, 56) / 8, 0)
  [ 58] getlocal 1 .............................. <tByte>
  [ 60] pushint8 4 .............................. <4>
  [ 62] pusharglist 2 ........................... <tByte, 4>
  [ 64] extcall 861 ............................. <bitAnd(tByte, 4)>
  [ 67] setlocal 3 .............................. tNeg = bitAnd(tByte, 4)
  [ 69] getlocal 1 .............................. <tByte>
  [ 71] pushint8 3 .............................. <3>
  [ 73] pusharglist 2 ........................... <tByte, 3>
  [ 75] extcall 861 ............................. <bitAnd(tByte, 3)>
  [ 78] setlocal 4 .............................. tInt = bitAnd(tByte, 3)
  [ 80] getlocal 2 .............................. <tByCnt>
  [ 82] pushint8 1 .............................. <1>
  [ 84] gt ...................................... <tByCnt > 1>
  [ 85] jmpifz [181] ............................ if tByCnt > 1 then
  [ 88] pushint8 4 .............................. <4>
  [ 90] pushint16 256 ........................... <256>
  [ 93] pushint16 16384 ......................... <16384>
  [ 96] pushint32 1048576 ....................... <1048576>
  [101] pushint32 67108864 ...................... <67108864>
  [106] pusharglist 5 ........................... <[4, 256, 16384, 1048576, 67108864]>
  [108] pushlist ................................ <[4, 256, 16384, 1048576, 67108864]>
  [109] setlocal 5 .............................. tPowTbl = [4, 256, 16384, 1048576, 67108864]
  [111] pushint8 2 .............................. <2>
  [113] setlocal 6
  [115] getlocal 6
  [117] getlocal 2 .............................. <tByCnt>
  [119] lteq
  [120] jmpifz [181] ............................ repeat with i = 2 to tByCnt
  [123] getlocal 6 .............................. <i>
  [125] pushzero ................................ <0>
  [126] pushzero ................................ <0>
  [127] pushzero ................................ <0>
  [128] pushzero ................................ <0>
  [129] pushzero ................................ <0>
  [130] pushzero ................................ <0>
  [131] pushzero ................................ <0>
  [132] getlocal 0 .............................. <tByteStr>
  [134] getchunk ................................ <char i of tByteStr>
  [135] pusharglist 1 ........................... <char i of tByteStr>
  [137] extcall 915 ............................. <charToNum(char i of tByteStr)>
  [140] pushint8 63 ............................. <63>
  [142] pusharglist 2 ........................... <charToNum(char i of tByteStr), 63>
  [144] extcall 861 ............................. <bitAnd(charToNum(char i of tByteStr), 63)>
  [147] setlocal 1 .............................. tByte = bitAnd(charToNum(char i of tByteStr), 63)
  [149] getlocal 1 .............................. <tByte>
  [151] getlocal 5 .............................. <tPowTbl>
  [153] getlocal 6 .............................. <i>
  [155] pushint8 1 .............................. <1>
  [157] sub ..................................... <i - 1>
  [158] pusharglist 2 ........................... <tPowTbl, i - 1>
  [160] objcall 54 .............................. <tPowTbl[i - 1]>
  [162] mul ..................................... <tByte * tPowTbl[i - 1]>
  [163] getlocal 4 .............................. <tInt>
  [165] pusharglist 2 ........................... <tByte * tPowTbl[i - 1], tInt>
  [167] extcall 860 ............................. <bitOr(tByte * tPowTbl[i - 1], tInt)>
  [170] setlocal 4 .............................. tInt = bitOr(tByte * tPowTbl[i - 1], tInt)
  [172] pushint8 1
  [174] getlocal 6
  [176] add
  [177] setlocal 6
  [179] endrepeat [115]
  [181] getlocal 3 .............................. <tNeg>
  [183] jmpifz [191] ............................ if tNeg then
  [186] getlocal 4 .............................. <tInt>
  [188] inv ..................................... <-tInt>
  [189] setlocal 4 .............................. tInt = -tInt
  [191] getprop 1155 ............................ <pMsgStruct>
  [194] pushsymb 485 ............................ <#content>
  [197] getlocal 0 .............................. <tByteStr>
  [199] pushsymb 291 ............................ <#char>
  [202] getlocal 2 .............................. <tByCnt>
  [204] pushint8 1 .............................. <1>
  [206] add ..................................... <tByCnt + 1>
  [207] getlocal 0 .............................. <tByteStr>
  [209] pusharglist 1 ........................... <tByteStr>
  [211] extcall 293 ............................. <length(tByteStr)>
  [214] pusharglist 4 ........................... <tByteStr, #char, tByCnt + 1, length(tByteStr)>
  [216] objcall 290 ............................. <tByteStr.char[tByCnt + 1..length(tByteStr)]>
  [219] pusharglistnoret 3 ...................... <pMsgStruct, #content, tByteStr.char[tByCnt + 1..length(tByteStr)]>
  [221] objcall 128 ............................. pMsgStruct.setaProp(#content, tByteStr.char[tByCnt + 1..length(tByteStr)])
  [223] getlocal 4 .............................. <tInt>
  [225] pusharglistnoret 1 ...................... <tInt>
  [227] extcall 25 .............................. return tInt
  [229] ret
end

on GetStrFrom me
  [  0] getprop 1155 ............................ <pMsgStruct>
  [  3] pushsymb 485 ............................ <#content>
  [  6] pusharglist 2 ........................... <pMsgStruct, #content>
  [  8] objcall 31 .............................. <pMsgStruct.getaProp(#content)>
  [ 10] setlocal 0 .............................. tArr = pMsgStruct.getaProp(#content)
  [ 12] pushint8 2 .............................. <2>
  [ 14] pusharglist 1 ........................... <2>
  [ 16] extcall 859 ............................. <numToChar(2)>
  [ 19] getlocal 0 .............................. <tArr>
  [ 21] pusharglist 2 ........................... <numToChar(2), tArr>
  [ 23] extcall 292 ............................. <offset(numToChar(2), tArr)>
  [ 26] setlocal 1 .............................. tLen = offset(numToChar(2), tArr)
  [ 28] getlocal 1 .............................. <tLen>
  [ 30] pushint8 1 .............................. <1>
  [ 32] gt ...................................... <tLen > 1>
  [ 33] jmpifz [ 57] ............................ if tLen > 1 then / else
  [ 36] pushint8 1 .............................. <1>
  [ 38] getlocal 1 .............................. <tLen>
  [ 40] pushint8 1 .............................. <1>
  [ 42] sub ..................................... <tLen - 1>
  [ 43] pushzero ................................ <0>
  [ 44] pushzero ................................ <0>
  [ 45] pushzero ................................ <0>
  [ 46] pushzero ................................ <0>
  [ 47] pushzero ................................ <0>
  [ 48] pushzero ................................ <0>
  [ 49] getlocal 0 .............................. <tArr>
  [ 51] getchunk ................................ <char 1 to tLen - 1 of tArr>
  [ 52] setlocal 2 .............................. tStr = char 1 to tLen - 1 of tArr
  [ 54] jmp [ 61]
  [ 57] pushcons 1 .............................. <EMPTY>
  [ 59] setlocal 2 .............................. tStr = EMPTY
  [ 61] getprop 1155 ............................ <pMsgStruct>
  [ 64] pushsymb 485 ............................ <#content>
  [ 67] getlocal 1 .............................. <tLen>
  [ 69] pushint8 1 .............................. <1>
  [ 71] add ..................................... <tLen + 1>
  [ 72] getlocal 0 .............................. <tArr>
  [ 74] pusharglist 1 ........................... <tArr>
  [ 76] extcall 293 ............................. <length(tArr)>
  [ 79] pushzero ................................ <0>
  [ 80] pushzero ................................ <0>
  [ 81] pushzero ................................ <0>
  [ 82] pushzero ................................ <0>
  [ 83] pushzero ................................ <0>
  [ 84] pushzero ................................ <0>
  [ 85] getlocal 0 .............................. <tArr>
  [ 87] getchunk ................................ <char tLen + 1 to length(tArr) of tArr>
  [ 88] pusharglistnoret 3 ...................... <pMsgStruct, #content, char tLen + 1 to length(tArr) of tArr>
  [ 90] objcall 128 ............................. pMsgStruct.setaProp(#content, char tLen + 1 to length(tArr) of tArr)
  [ 92] getlocal 2 .............................. <tStr>
  [ 94] pusharglistnoret 1 ...................... <tStr>
  [ 96] extcall 25 .............................. return tStr
  [ 98] ret
end

on print me
  [  0] pushcons 1 .............................. <EMPTY>
  [  2] setlocal 0 .............................. tStr = EMPTY
  [  4] getparam 0 .............................. <me>
  [  6] pusharglist 1 ........................... <me>
  [  8] objcall 3 ............................... <me.getID()>
  [ 10] pusharglist 1 ........................... <me.getID()>
  [ 12] extcall 46 .............................. <symbolp(me.getID())>
  [ 14] jmpifz [ 22] ............................ if symbolp(me.getID()) then
  [ 17] pushcons 23 ............................. <"#">
  [ 19] pushzero ................................ <0>
  [ 20] put 37 .................................. put "#" after tStr
  [ 22] getparam 0 .............................. <me>
  [ 24] pusharglist 1 ........................... <me>
  [ 26] objcall 3 ............................... <me.getID()>
  [ 28] pushcons 24 ............................. <RETURN>
  [ 30] joinstr ................................. <me.getID() & RETURN>
  [ 31] pushzero ................................ <0>
  [ 32] put 37 .................................. put me.getID() & RETURN after tStr
  [ 34] pushcons 25 ............................. <"-- -- -- -- -- -- -- --">
  [ 36] pushcons 24 ............................. <RETURN>
  [ 38] joinstr ................................. <"-- -- -- -- -- -- -- --" & RETURN>
  [ 39] pushzero ................................ <0>
  [ 40] put 37 .................................. put "-- -- -- -- -- -- -- --" & RETURN after tStr
  [ 42] getprop 1160 ............................ <pListenersPntr>
  [ 45] pushsymb 113 ............................ <#value>
  [ 47] pusharglist 2 ........................... <pListenersPntr, #value>
  [ 49] objcall 31 .............................. <pListenersPntr.getaProp(#value)>
  [ 51] setlocal 1 .............................. tMsgsList = pListenersPntr.getaProp(#value)
  [ 53] getlocal 1 .............................. <tMsgsList>
  [ 55] pusharglist 1 ........................... <tMsgsList>
  [ 57] extcall 53 .............................. <listp(tMsgsList)>
  [ 59] jmpifz [186] ............................ if listp(tMsgsList) then
  [ 62] pushint8 1 .............................. <1>
  [ 64] setlocal 2
  [ 66] getlocal 2
  [ 68] getlocal 1 .............................. <tMsgsList>
  [ 70] pusharglist 1 ........................... <tMsgsList>
  [ 72] extcall 22 .............................. <count(tMsgsList)>
  [ 74] lteq
  [ 75] jmpifz [186] ............................ repeat with i = 1 to count(tMsgsList)
  [ 78] pushcons 26 ............................. <TAB>
  [ 80] getlocal 1 .............................. <tMsgsList>
  [ 82] getlocal 2 .............................. <i>
  [ 84] pusharglist 2 ........................... <tMsgsList, i>
  [ 86] objcall 23 .............................. <tMsgsList.getPropAt(i)>
  [ 88] joinstr ................................. <TAB & tMsgsList.getPropAt(i)>
  [ 89] pushcons 24 ............................. <RETURN>
  [ 91] joinstr ................................. <TAB & tMsgsList.getPropAt(i) & RETURN>
  [ 92] pushzero ................................ <0>
  [ 93] put 37 .................................. put TAB & tMsgsList.getPropAt(i) & RETURN after tStr
  [ 95] getlocal 1 .............................. <tMsgsList>
  [ 97] getlocal 2 .............................. <i>
  [ 99] pusharglist 2 ........................... <tMsgsList, i>
  [101] objcall 54 .............................. <tMsgsList[i]>
  [103] setlocal 3 .............................. tCallbackList = tMsgsList[i]
  [105] getlocal 3 .............................. <tCallbackList>
  [107] peek 0
  [109] pusharglist 1
  [111] extcall 22
  [113] pushint8 1
  [115] peek 0
  [117] peek 2
  [119] lteq
  [120] jmpifz [170] ............................ repeat with tCallback in tCallbackList
  [123] peek 2
  [125] peek 1
  [127] pusharglist 2
  [129] extcall 54
  [131] setlocal 4
  [133] pushcons 26 ............................. <TAB>
  [135] pushcons 26 ............................. <TAB>
  [137] joinstr ................................. <TAB & TAB>
  [138] getlocal 4 .............................. <tCallback>
  [140] pushint8 1 .............................. <1>
  [142] pusharglist 2 ........................... <tCallback, 1>
  [144] objcall 54 .............................. <tCallback[1]>
  [146] joinstr ................................. <TAB & TAB & tCallback[1]>
  [147] pushcons 27 ............................. <"->">
  [149] joinpadstr .............................. <TAB & TAB & tCallback[1] && "->">
  [150] getlocal 4 .............................. <tCallback>
  [152] pushint8 2 .............................. <2>
  [154] pusharglist 2 ........................... <tCallback, 2>
  [156] objcall 54 .............................. <tCallback[2]>
  [158] joinpadstr .............................. <TAB & TAB & tCallback[1] && "->" && tCallback[2]>
  [159] pushcons 24 ............................. <RETURN>
  [161] joinstr ................................. <TAB & TAB & tCallback[1] && "->" && tCallback[2] & RETURN>
  [162] pushzero ................................ <0>
  [163] put 37 .................................. put TAB & TAB & tCallback[1] && "->" && tCallback[2] & RETURN after tStr
  [165] pushint8 1
  [167] add
  [168] endrepeat [115]
  [170] pop 3
  [172] pushcons 24 ............................. <RETURN>
  [174] pushzero ................................ <0>
  [175] put 37 .................................. put RETURN after tStr
  [177] pushint8 1
  [179] getlocal 2
  [181] add
  [182] setlocal 2
  [184] endrepeat [ 66]
  [186] getlocal 0 .............................. <tStr>
  [188] pushcons 24 ............................. <RETURN>
  [190] joinstr ................................. <tStr & RETURN>
  [191] pusharglistnoret 1 ...................... <tStr & RETURN>
  [193] extcall 642 ............................. put tStr & RETURN
  [196] pushint8 1 .............................. <1>
  [198] pusharglistnoret 1 ...................... <1>
  [200] extcall 25 .............................. return 1
  [202] ret
end

on xtraMsgHandler me
  [  0] getprop 1158 ............................ <pConnectionShouldBeKilled>
  [  3] pushzero ................................ <0>
  [  4] nteq .................................... <pConnectionShouldBeKilled <> 0>
  [  5] jmpifz [ 13] ............................ if pConnectionShouldBeKilled <> 0 then
  [  8] pushzero ................................ <0>
  [  9] pusharglistnoret 1 ...................... <0>
  [ 11] extcall 25 .............................. return 0
  [ 13] pushint8 1 .............................. <1>
  [ 15] setprop 1172 ............................ pConnectionOk = 1
  [ 18] getprop 1163 ............................ <pXtra>
  [ 21] pusharglist 1 ........................... <pXtra>
  [ 23] objcall 1203 ............................ <pXtra.getNetMessage()>
  [ 26] setlocal 0 .............................. tNewMsg = pXtra.getNetMessage()
  [ 28] getlocal 0 .............................. <tNewMsg>
  [ 30] pushsymb 1204 ........................... <#errorCode>
  [ 33] pusharglist 2 ........................... <tNewMsg, #errorCode>
  [ 35] objcall 31 .............................. <tNewMsg.getaProp(#errorCode)>
  [ 37] setlocal 1 .............................. tErrCode = tNewMsg.getaProp(#errorCode)
  [ 39] getlocal 0 .............................. <tNewMsg>
  [ 41] pushsymb 485 ............................ <#content>
  [ 44] pusharglist 2 ........................... <tNewMsg, #content>
  [ 46] objcall 31 .............................. <tNewMsg.getaProp(#content)>
  [ 48] setlocal 2 .............................. tContent = tNewMsg.getaProp(#content)
  [ 50] getlocal 1 .............................. <tErrCode>
  [ 52] pushzero ................................ <0>
  [ 53] nteq .................................... <tErrCode <> 0>
  [ 54] jmpifz [125] ............................ if tErrCode <> 0 then
  [ 57] getprop 1168 ............................ <pLogMode>
  [ 60] pushzero ................................ <0>
  [ 61] gt ...................................... <pLogMode > 0>
  [ 62] jmpifz [113] ............................ if pLogMode > 0 then
  [ 65] getparam 0 .............................. <me>
  [ 67] pushcons 28 ............................. <"Connection">
  [ 69] getparam 0 .............................. <me>
  [ 71] pusharglist 1 ........................... <me>
  [ 73] objcall 3 ............................... <me.getID()>
  [ 75] joinpadstr .............................. <"Connection" && me.getID()>
  [ 76] pushcons 29 ............................. <"was disconnected">
  [ 78] joinpadstr .............................. <"Connection" && me.getID() && "was disconnected">
  [ 79] pusharglistnoret 2 ...................... <me, "Connection" && me.getID() && "was disconnected">
  [ 81] objcall 1153 ............................ me.log("Connection" && me.getID() && "was disconnected")
  [ 84] getparam 0 .............................. <me>
  [ 86] pushcons 30 ............................. <"host = ">
  [ 88] getprop 1161 ............................ <pHost>
  [ 91] joinstr ................................. <"host = " & pHost>
  [ 92] pushcons 31 ............................. <", port = ">
  [ 94] joinpadstr .............................. <"host = " & pHost && ", port = ">
  [ 95] getprop 1162 ............................ <pPort>
  [ 98] joinstr ................................. <"host = " & pHost && ", port = " & pPort>
  [ 99] pusharglistnoret 2 ...................... <me, "host = " & pHost && ", port = " & pPort>
  [101] objcall 1153 ............................ me.log("host = " & pHost && ", port = " & pPort)
  [104] getparam 0 .............................. <me>
  [106] getlocal 0 .............................. <tNewMsg>
  [108] pusharglistnoret 2 ...................... <me, tNewMsg>
  [110] objcall 1153 ............................ me.log(tNewMsg)
  [113] getparam 0 .............................. <me>
  [115] pusharglistnoret 1 ...................... <me>
  [117] objcall 1137 ............................ me.disconnect()
  [120] pushzero ................................ <0>
  [121] pusharglistnoret 1 ...................... <0>
  [123] extcall 25 .............................. return 0
  [125] getparam 0 .............................. <me>
  [127] getlocal 2 .............................. <tContent>
  [129] pusharglistnoret 2 ...................... <me, tContent>
  [131] objcall 1151 ............................ me.msghandler(tContent)
  [134] ret
end

on msghandler me, tContent
  [  0] getparam 1 .............................. <tContent>
  [  2] getobjprop 488 .......................... <tContent.ilk>
  [  5] pushsymb 593 ............................ <#string>
  [  8] nteq .................................... <tContent.ilk <> #string>
  [  9] jmpifz [ 17] ............................ if tContent.ilk <> #string then
  [ 12] pushzero ................................ <0>
  [ 13] pusharglistnoret 1 ...................... <0>
  [ 15] extcall 25 .............................. return 0
  [ 17] pushcons 32 ............................. <"Handling Msg: ">
  [ 19] getparam 1 .............................. <tContent>
  [ 21] joinstr ................................. <"Handling Msg: " & tContent>
  [ 22] pusharglistnoret 1 ...................... <"Handling Msg: " & tContent>
  [ 24] extcall 642 ............................. put "Handling Msg: " & tContent
  [ 27] getprop 1157 ............................ <pLastContent>
  [ 30] getobjprop 293 .......................... <pLastContent.length>
  [ 33] pushzero ................................ <0>
  [ 34] gt ...................................... <pLastContent.length > 0>
  [ 35] jmpifz [ 61] ............................ if pLastContent.length > 0 then
  [ 38] getprop 1157 ............................ <pLastContent>
  [ 41] getparam 1 .............................. <tContent>
  [ 43] joinstr ................................. <pLastContent & tContent>
  [ 44] setparam 1 .............................. tContent = pLastContent & tContent
  [ 46] pushcons 33 ............................. <"Start of new Message: ">
  [ 48] getparam 1 .............................. <tContent>
  [ 50] joinpadstr .............................. <"Start of new Message: " && tContent>
  [ 51] pusharglistnoret 1 ...................... <"Start of new Message: " && tContent>
  [ 53] extcall 642 ............................. put "Start of new Message: " && tContent
  [ 56] pushcons 1 .............................. <EMPTY>
  [ 58] setprop 1157 ............................ pLastContent = EMPTY
  [ 61] getparam 1 .............................. <tContent>
  [ 63] getobjprop 293 .......................... <tContent.length>
  [ 66] pushint8 3 .............................. <3>
  [ 68] lt ...................................... <tContent.length < 3>
  [ 69] jmpifz [122] ............................ if tContent.length < 3 then
  [ 72] getprop 1157 ............................ <pLastContent>
  [ 75] getparam 1 .............................. <tContent>
  [ 77] joinstr ................................. <pLastContent & tContent>
  [ 78] setprop 1157 ............................ pLastContent = pLastContent & tContent
  [ 81] pushcons 34 ............................. <"Not enough content for: ">
  [ 83] getparam 1 .............................. <tContent>
  [ 85] joinpadstr .............................. <"Not enough content for: " && tContent>
  [ 86] pusharglistnoret 1 ...................... <"Not enough content for: " && tContent>
  [ 88] extcall 642 ............................. put "Not enough content for: " && tContent
  [ 91] pushcons 35 ............................. <"Ab">
  [ 93] getprop 1157 ............................ <pLastContent>
  [ 96] pusharglist 2 ........................... <"Ab", pLastContent>
  [ 98] extcall 292 ............................. <offset("Ab", pLastContent)>
  [101] pushzero ................................ <0>
  [102] nteq .................................... <offset("Ab", pLastContent) <> 0>
  [103] jmpifz [118] ............................ if offset("Ab", pLastContent) <> 0 then
  [106] pushcons 36 ............................. <"Hack, erasing Ab">
  [108] pusharglistnoret 1 ...................... <"Hack, erasing Ab">
  [110] extcall 642 ............................. put "Hack, erasing Ab"
  [113] pushcons 1 .............................. <EMPTY>
  [115] setprop 1157 ............................ pLastContent = EMPTY
  [118] pusharglistnoret 0 ...................... <>
  [120] extcall 25 .............................. return 
  [122] pushint8 2 .............................. <2>
  [124] pushzero ................................ <0>
  [125] pushzero ................................ <0>
  [126] pushzero ................................ <0>
  [127] pushzero ................................ <0>
  [128] pushzero ................................ <0>
  [129] pushzero ................................ <0>
  [130] pushzero ................................ <0>
  [131] getparam 1 .............................. <tContent>
  [133] getchunk ................................ <char 2 of tContent>
  [134] pusharglist 1 ........................... <char 2 of tContent>
  [136] extcall 915 ............................. <charToNum(char 2 of tContent)>
  [139] pushint8 63 ............................. <63>
  [141] pusharglist 2 ........................... <charToNum(char 2 of tContent), 63>
  [143] extcall 861 ............................. <bitAnd(charToNum(char 2 of tContent), 63)>
  [146] setlocal 0 .............................. tByte1 = bitAnd(charToNum(char 2 of tContent), 63)
  [148] pushint8 1 .............................. <1>
  [150] pushzero ................................ <0>
  [151] pushzero ................................ <0>
  [152] pushzero ................................ <0>
  [153] pushzero ................................ <0>
  [154] pushzero ................................ <0>
  [155] pushzero ................................ <0>
  [156] pushzero ................................ <0>
  [157] getparam 1 .............................. <tContent>
  [159] getchunk ................................ <char 1 of tContent>
  [160] pusharglist 1 ........................... <char 1 of tContent>
  [162] extcall 915 ............................. <charToNum(char 1 of tContent)>
  [165] pushint8 63 ............................. <63>
  [167] pusharglist 2 ........................... <charToNum(char 1 of tContent), 63>
  [169] extcall 861 ............................. <bitAnd(charToNum(char 1 of tContent), 63)>
  [172] setlocal 1 .............................. tByte2 = bitAnd(charToNum(char 1 of tContent), 63)
  [174] getlocal 1 .............................. <tByte2>
  [176] pushint8 64 ............................. <64>
  [178] mul ..................................... <tByte2 * 64>
  [179] getlocal 0 .............................. <tByte1>
  [181] pusharglist 2 ........................... <tByte2 * 64, tByte1>
  [183] extcall 860 ............................. <bitOr(tByte2 * 64, tByte1)>
  [186] setlocal 2 .............................. tMsgType = bitOr(tByte2 * 64, tByte1)
  [188] pushcons 37 ............................. <"<----- Handling message">
  [190] getlocal 2 .............................. <tMsgType>
  [192] joinstr ................................. <"<----- Handling message" & tMsgType>
  [193] pusharglistnoret 1 ...................... <"<----- Handling message" & tMsgType>
  [195] extcall 642 ............................. put "<----- Handling message" & tMsgType
  [198] pushint8 1 .............................. <1>
  [200] pusharglist 1 ........................... <1>
  [202] extcall 859 ............................. <numToChar(1)>
  [205] getparam 1 .............................. <tContent>
  [207] pusharglist 2 ........................... <numToChar(1), tContent>
  [209] extcall 292 ............................. <offset(numToChar(1), tContent)>
  [212] setlocal 3 .............................. tLength = offset(numToChar(1), tContent)
  [214] getlocal 3 .............................. <tLength>
  [216] pushzero ................................ <0>
  [217] eq ...................................... <tLength = 0>
  [218] jmpifz [230] ............................ if tLength = 0 then
  [221] getparam 1 .............................. <tContent>
  [223] setprop 1157 ............................ pLastContent = tContent
  [226] pusharglistnoret 0 ...................... <>
  [228] extcall 25 .............................. return 
  [230] pushint8 3 .............................. <3>
  [232] getlocal 3 .............................. <tLength>
  [234] pushint8 1 .............................. <1>
  [236] sub ..................................... <tLength - 1>
  [237] pushzero ................................ <0>
  [238] pushzero ................................ <0>
  [239] pushzero ................................ <0>
  [240] pushzero ................................ <0>
  [241] pushzero ................................ <0>
  [242] pushzero ................................ <0>
  [243] getparam 1 .............................. <tContent>
  [245] getchunk ................................ <char 3 to tLength - 1 of tContent>
  [246] setlocal 4 .............................. tParams = char 3 to tLength - 1 of tContent
  [248] getlocal 3 .............................. <tLength>
  [250] pushint8 1 .............................. <1>
  [252] add ..................................... <tLength + 1>
  [253] getparam 1 .............................. <tContent>
  [255] getobjprop 293 .......................... <tContent.length>
  [258] pushzero ................................ <0>
  [259] pushzero ................................ <0>
  [260] pushzero ................................ <0>
  [261] pushzero ................................ <0>
  [262] pushzero ................................ <0>
  [263] pushzero ................................ <0>
  [264] getparam 1 .............................. <tContent>
  [266] getchunk ................................ <char tLength + 1 to tContent.length of tContent>
  [267] setparam 1 .............................. tContent = char tLength + 1 to tContent.length of tContent
  [269] getparam 0 .............................. <me>
  [271] getlocal 2 .............................. <tMsgType>
  [273] getlocal 4 .............................. <tParams>
  [275] pusharglistnoret 3 ...................... <me, tMsgType, tParams>
  [277] objcall 1152 ............................ me.forwardMsg(tMsgType, tParams)
  [280] getparam 1 .............................. <tContent>
  [282] getobjprop 293 .......................... <tContent.length>
  [285] pushzero ................................ <0>
  [286] gt ...................................... <tContent.length > 0>
  [287] jmpifz [299] ............................ if tContent.length > 0 then
  [290] getparam 0 .............................. <me>
  [292] getparam 1 .............................. <tContent>
  [294] pusharglistnoret 2 ...................... <me, tContent>
  [296] objcall 1151 ............................ me.msghandler(tContent)
  [299] ret
end

on forwardMsg me, tSubject, tParams
  [  0] getprop 1168 ............................ <pLogMode>
  [  3] pushzero ................................ <0>
  [  4] gt ...................................... <pLogMode > 0>
  [  5] jmpifz [ 26] ............................ if pLogMode > 0 then
  [  8] getparam 0 .............................. <me>
  [ 10] pushcons 38 ............................. <"-->">
  [ 12] getparam 1 .............................. <tSubject>
  [ 14] joinpadstr .............................. <"-->" && tSubject>
  [ 15] pushcons 24 ............................. <RETURN>
  [ 17] joinstr ................................. <"-->" && tSubject & RETURN>
  [ 18] getparam 2 .............................. <tParams>
  [ 20] joinstr ................................. <"-->" && tSubject & RETURN & tParams>
  [ 21] pusharglistnoret 2 ...................... <me, "-->" && tSubject & RETURN & tParams>
  [ 23] objcall 1153 ............................ me.log("-->" && tSubject & RETURN & tParams)
  [ 26] pushsymb 59 ............................. <#session>
  [ 28] pusharglist 1 ........................... <#session>
  [ 30] extcall 58 .............................. <getObject(#session)>
  [ 32] pushcons 39 ............................. <"con_lastreceived">
  [ 34] getparam 1 .............................. <tSubject>
  [ 36] pushcons 40 ............................. <"-">
  [ 38] joinpadstr .............................. <tSubject && "-">
  [ 39] pushint8 8 .............................. <8>
  [ 41] get 0 ................................... <the long time>
  [ 43] joinpadstr .............................. <tSubject && "-" && the long time>
  [ 44] pusharglistnoret 3 ...................... <getObject(#session), "con_lastreceived", tSubject && "-" && the long time>
  [ 46] objcall 60 .............................. getObject(#session).set("con_lastreceived", tSubject && "-" && the long time)
  [ 48] pusharglist 0 ........................... <>
  [ 50] extcall 270 ............................. <getStringServices()>
  [ 53] getparam 2 .............................. <tParams>
  [ 55] pusharglist 2 ........................... <getStringServices(), tParams>
  [ 57] objcall 273 ............................. <getStringServices().convertSpecialChars(tParams)>
  [ 60] setparam 2 .............................. tParams = getStringServices().convertSpecialChars(tParams)
  [ 62] getprop 1160 ............................ <pListenersPntr>
  [ 65] pushsymb 113 ............................ <#value>
  [ 67] pusharglist 2 ........................... <pListenersPntr, #value>
  [ 69] objcall 31 .............................. <pListenersPntr.getaProp(#value)>
  [ 71] getparam 1 .............................. <tSubject>
  [ 73] pusharglist 2 ........................... <pListenersPntr.getaProp(#value), tSubject>
  [ 75] objcall 31 .............................. <pListenersPntr.getaProp(#value).getaProp(tSubject)>
  [ 77] setlocal 0 .............................. tCallbackList = pListenersPntr.getaProp(#value).getaProp(tSubject)
  [ 79] getlocal 0 .............................. <tCallbackList>
  [ 81] getobjprop 488 .......................... <tCallbackList.ilk>
  [ 84] pushsymb 489 ............................ <#list>
  [ 87] nteq .................................... <tCallbackList.ilk <> #list>
  [ 88] jmpifz [119] ............................ if tCallbackList.ilk <> #list then
  [ 91] getparam 0 .............................. <me>
  [ 93] pushcons 41 ............................. <"Listener not found:">
  [ 95] getparam 1 .............................. <tSubject>
  [ 97] joinpadstr .............................. <"Listener not found:" && tSubject>
  [ 98] pushcons 42 ............................. <"/">
  [100] joinpadstr .............................. <"Listener not found:" && tSubject && "/">
  [101] getparam 0 .............................. <me>
  [103] pusharglist 1 ........................... <me>
  [105] objcall 3 ............................... <me.getID()>
  [107] joinpadstr .............................. <"Listener not found:" && tSubject && "/" && me.getID()>
  [108] pushsymb 1152 ........................... <#forwardMsg>
  [111] pusharglist 3 ........................... <me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg>
  [113] extcall 39 .............................. <error(me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg)>
  [115] pusharglistnoret 1 ...................... <error(me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg)>
  [117] extcall 25 .............................. return error(me, "Listener not found:" && tSubject && "/" && me.getID(), #forwardMsg)
  [119] pusharglist 0 ........................... <>
  [121] extcall 93 .............................. <getObjectManager()>
  [123] setlocal 1 .............................. tObjMgr = getObjectManager()
  [125] pushint8 1 .............................. <1>
  [127] setlocal 2
  [129] getlocal 2
  [131] getlocal 0 .............................. <tCallbackList>
  [133] pusharglist 1 ........................... <tCallbackList>
  [135] extcall 22 .............................. <count(tCallbackList)>
  [137] lteq
  [138] jmpifz [263] ............................ repeat with i = 1 to count(tCallbackList)
  [141] getlocal 0 .............................. <tCallbackList>
  [143] getlocal 2 .............................. <i>
  [145] pusharglist 2 ........................... <tCallbackList, i>
  [147] objcall 54 .............................. <tCallbackList[i]>
  [149] setlocal 3 .............................. tCallback = tCallbackList[i]
  [151] getlocal 1 .............................. <tObjMgr>
  [153] getlocal 3 .............................. <tCallback>
  [155] pushint8 1 .............................. <1>
  [157] pusharglist 2 ........................... <tCallback, 1>
  [159] objcall 54 .............................. <tCallback[1]>
  [161] pusharglist 2 ........................... <tObjMgr, tCallback[1]>
  [163] objcall 90 .............................. <tObjMgr.get(tCallback[1])>
  [165] setlocal 4 .............................. tObject = tObjMgr.get(tCallback[1])
  [167] getlocal 4 .............................. <tObject>
  [169] pushzero ................................ <0>
  [170] nteq .................................... <tObject <> 0>
  [171] jmpifz [218] ............................ if tObject <> 0 then
  [174] getprop 1155 ............................ <pMsgStruct>
  [177] pushsymb 1211 ........................... <#subject>
  [180] getparam 1 .............................. <tSubject>
  [182] pusharglistnoret 3 ...................... <pMsgStruct, #subject, tSubject>
  [184] objcall 128 ............................. pMsgStruct.setaProp(#subject, tSubject)
  [186] getprop 1155 ............................ <pMsgStruct>
  [189] pushsymb 485 ............................ <#content>
  [192] getparam 2 .............................. <tParams>
  [194] pusharglistnoret 3 ...................... <pMsgStruct, #content, tParams>
  [196] objcall 128 ............................. pMsgStruct.setaProp(#content, tParams)
  [198] getlocal 3 .............................. <tCallback>
  [200] pushint8 2 .............................. <2>
  [202] pusharglist 2 ........................... <tCallback, 2>
  [204] objcall 54 .............................. <tCallback[2]>
  [206] getlocal 4 .............................. <tObject>
  [208] getprop 1155 ............................ <pMsgStruct>
  [211] pusharglistnoret 3 ...................... <tCallback[2], tObject, pMsgStruct>
  [213] extcall 68 .............................. call(tCallback[2], tObject, pMsgStruct)
  [215] jmp [254] ............................... next repeat
  [218] getparam 0 .............................. <me>
  [220] pushcons 43 ............................. <"Listening obj not found, removed:">
  [222] getlocal 3 .............................. <tCallback>
  [224] pushint8 1 .............................. <1>
  [226] pusharglist 2 ........................... <tCallback, 1>
  [228] objcall 54 .............................. <tCallback[1]>
  [230] joinpadstr .............................. <"Listening obj not found, removed:" && tCallback[1]>
  [231] pushsymb 1152 ........................... <#forwardMsg>
  [234] pusharglistnoret 3 ...................... <me, "Listening obj not found, removed:" && tCallback[1], #forwardMsg>
  [236] extcall 39 .............................. error(me, "Listening obj not found, removed:" && tCallback[1], #forwardMsg)
  [238] getlocal 0 .............................. <tCallbackList>
  [240] pushint8 1 .............................. <1>
  [242] pusharglistnoret 2 ...................... <tCallbackList, 1>
  [244] objcall 723 ............................. tCallbackList.deleteAt(1)
  [247] getlocal 2 .............................. <i>
  [249] pushint8 1 .............................. <1>
  [251] sub ..................................... <i - 1>
  [252] setlocal 2 .............................. i = i - 1
  [254] pushint8 1
  [256] getlocal 2
  [258] add
  [259] setlocal 2
  [261] endrepeat [129]
  [263] ret
end

on log me, tMsg
  [  0] getmovieprop 82 ......................... <the runMode>
  [  2] pushcons 44 ............................. <"Author">
  [  4] containsstr ............................. <the runMode contains "Author">
  [  5] not ..................................... <not (the runMode contains "Author")>
  [  6] jmpifz [ 14] ............................ if not (the runMode contains "Author") then
  [  9] pushzero ................................ <0>
  [ 10] pusharglistnoret 1 ...................... <0>
  [ 12] extcall 25 .............................. return 0
  [ 14] getprop 1168 ............................ <pLogMode>
  [ 17] peek 0 .................................. case pLogMode of
  [ 19] pushint8 2 .............................. <2>
  [ 21] eq
  [ 22] jmpifz [ 64] ............................ (case) 2:
  [ 25] getprop 1175 ............................ <pLogfield>
  [ 28] pushsymb 41 ............................. <#member>
  [ 30] pusharglist 2 ........................... <pLogfield, #member>
  [ 32] extcall 488 ............................. <ilk(pLogfield, #member)>
  [ 35] jmpifz [ 61] ............................ if ilk(pLogfield, #member) then
  [ 38] pushcons 24 ............................. <RETURN>
  [ 40] pushcons 45 ............................. <"[Connection">
  [ 42] joinstr ................................. <RETURN & "[Connection">
  [ 43] getparam 0 .............................. <me>
  [ 45] pusharglist 1 ........................... <me>
  [ 47] objcall 3 ............................... <me.getID()>
  [ 49] joinpadstr .............................. <RETURN & "[Connection" && me.getID()>
  [ 50] pushcons 46 ............................. <"] :">
  [ 52] joinstr ................................. <RETURN & "[Connection" && me.getID() & "] :">
  [ 53] getparam 1 .............................. <tMsg>
  [ 55] joinpadstr .............................. <RETURN & "[Connection" && me.getID() & "] :" && tMsg>
  [ 56] pushvarref 1175 ......................... <pLogfield>
  [ 59] put 35 .................................. put RETURN & "[Connection" && me.getID() & "] :" && tMsg after pLogfield
  [ 61] jmp [ 82]
  [ 64] peek 0
  [ 66] pushint8 3 .............................. <3>
  [ 68] eq
  [ 69] jmpifz [ 82] ............................ (case) 3:
  [ 72] pushsymb 1213 ........................... <#logdata>
  [ 75] getparam 1 .............................. <tMsg>
  [ 77] pusharglistnoret 2 ...................... <#logdata, tMsg>
  [ 79] extcall 357 ............................. executeMessage(#logdata, tMsg)
  [ 82] pop 1 ................................... end case
  [ 84] ret
end
