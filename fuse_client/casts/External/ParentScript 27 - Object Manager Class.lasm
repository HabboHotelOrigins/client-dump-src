property pObjectList, pUpdateList, pPrepareList, pManagerList, pInstanceList, pEraseLock, pTimeOut, pUpdatePause, pBaseClsMem

on construct me
  [  0] pusharglist 0 ........................... <[:]>
  [  2] pushproplist ............................ <[:]>
  [  3] setprop 645 ............................. pObjectList = [:]
  [  6] pusharglist 0 ........................... <[]>
  [  8] pushlist ................................ <[]>
  [  9] setprop 646 ............................. pUpdateList = []
  [ 12] pusharglist 0 ........................... <[]>
  [ 14] pushlist ................................ <[]>
  [ 15] setprop 647 ............................. pPrepareList = []
  [ 18] pusharglist 0 ........................... <[]>
  [ 20] pushlist ................................ <[]>
  [ 21] setprop 648 ............................. pManagerList = []
  [ 24] pusharglist 0 ........................... <[]>
  [ 26] pushlist ................................ <[]>
  [ 27] setprop 649 ............................. pInstanceList = []
  [ 30] pushzero ................................ <0>
  [ 31] setprop 650 ............................. pEraseLock = 0
  [ 34] pusharglist 0 ........................... <>
  [ 36] extcall 32 .............................. <VOID>
  [ 38] setprop 651 ............................. pTimeOut = VOID
  [ 41] pushzero ................................ <0>
  [ 42] setprop 652 ............................. pUpdatePause = 0
  [ 45] pushcons 0 .............................. <"Object Base Class">
  [ 47] pusharglist 1 ........................... <"Object Base Class">
  [ 49] extcall 115 ............................. <script("Object Base Class")>
  [ 51] setprop 653 ............................. pBaseClsMem = script("Object Base Class")
  [ 54] getprop 645 ............................. <pObjectList>
  [ 57] pusharglistnoret 1 ...................... <pObjectList>
  [ 59] objcall 640 ............................. pObjectList.sort()
  [ 62] getprop 646 ............................. <pUpdateList>
  [ 65] pusharglistnoret 1 ...................... <pUpdateList>
  [ 67] objcall 640 ............................. pUpdateList.sort()
  [ 70] pushint8 1 .............................. <1>
  [ 72] pusharglistnoret 1 ...................... <1>
  [ 74] extcall 25 .............................. return 1
  [ 76] ret
end

on deconstruct me
  [  0] pushint8 1 .............................. <1>
  [  2] setprop 650 ............................. pEraseLock = 1
  [  5] getprop 651 ............................. <pTimeOut>
  [  8] pusharglist 1 ........................... <pTimeOut>
  [ 10] extcall 112 ............................. <objectp(pTimeOut)>
  [ 12] jmpifz [ 30] ............................ if objectp(pTimeOut) then
  [ 15] getprop 651 ............................. <pTimeOut>
  [ 18] pusharglistnoret 1 ...................... <pTimeOut>
  [ 20] objcall 654 ............................. pTimeOut.forget()
  [ 23] pusharglist 0 ........................... <>
  [ 25] extcall 32 .............................. <VOID>
  [ 27] setprop 651 ............................. pTimeOut = VOID
  [ 30] getprop 649 ............................. <pInstanceList>
  [ 33] getobjprop 22 ........................... <pInstanceList.count>
  [ 35] setlocal 0
  [ 37] getlocal 0
  [ 39] pushint8 1 .............................. <1>
  [ 41] gteq
  [ 42] jmpifz [ 69] ............................ repeat with i = pInstanceList.count down to 1
  [ 45] getparam 0 .............................. <me>
  [ 47] getprop 649 ............................. <pInstanceList>
  [ 50] getlocal 0 .............................. <i>
  [ 52] pusharglist 2 ........................... <pInstanceList, i>
  [ 54] objcall 54 .............................. <pInstanceList[i]>
  [ 56] pusharglistnoret 2 ...................... <me, pInstanceList[i]>
  [ 58] objcall 125 ............................. me.Remove(pInstanceList[i])
  [ 60] pushint8 -1
  [ 62] getlocal 0
  [ 64] add
  [ 65] setlocal 0
  [ 67] endrepeat [ 37]
  [ 69] getprop 648 ............................. <pManagerList>
  [ 72] getobjprop 22 ........................... <pManagerList.count>
  [ 74] setlocal 0
  [ 76] getlocal 0
  [ 78] pushint8 1 .............................. <1>
  [ 80] gteq
  [ 81] jmpifz [108] ............................ repeat with i = pManagerList.count down to 1
  [ 84] getparam 0 .............................. <me>
  [ 86] getprop 648 ............................. <pManagerList>
  [ 89] getlocal 0 .............................. <i>
  [ 91] pusharglist 2 ........................... <pManagerList, i>
  [ 93] objcall 54 .............................. <pManagerList[i]>
  [ 95] pusharglistnoret 2 ...................... <me, pManagerList[i]>
  [ 97] objcall 125 ............................. me.Remove(pManagerList[i])
  [ 99] pushint8 -1
  [101] getlocal 0
  [103] add
  [104] setlocal 0
  [106] endrepeat [ 76]
  [108] pusharglist 0 ........................... <[:]>
  [110] pushproplist ............................ <[:]>
  [111] setprop 645 ............................. pObjectList = [:]
  [114] pusharglist 0 ........................... <[]>
  [116] pushlist ................................ <[]>
  [117] setprop 646 ............................. pUpdateList = []
  [120] pusharglist 0 ........................... <[]>
  [122] pushlist ................................ <[]>
  [123] setprop 647 ............................. pPrepareList = []
  [126] pushint8 1 .............................. <1>
  [128] pusharglistnoret 1 ...................... <1>
  [130] extcall 25 .............................. return 1
  [132] ret
end

on create me, tid, tClassList
  [  0] getparam 1 .............................. <tid>
  [  2] pusharglist 1 ........................... <tid>
  [  4] extcall 46 .............................. <symbolp(tid)>
  [  6] not ..................................... <not symbolp(tid)>
  [  7] getparam 1 .............................. <tid>
  [  9] pusharglist 1 ........................... <tid>
  [ 11] extcall 38 .............................. <stringp(tid)>
  [ 13] not ..................................... <not stringp(tid)>
  [ 14] and ..................................... <not symbolp(tid) and not stringp(tid)>
  [ 15] jmpifz [ 35] ............................ if not symbolp(tid) and not stringp(tid) then
  [ 18] getparam 0 .............................. <me>
  [ 20] pushcons 1 .............................. <"Symbol or string expected:">
  [ 22] getparam 1 .............................. <tid>
  [ 24] joinpadstr .............................. <"Symbol or string expected:" && tid>
  [ 25] pushsymb 81 ............................. <#create>
  [ 27] pusharglist 3 ........................... <me, "Symbol or string expected:" && tid, #create>
  [ 29] extcall 39 .............................. <error(me, "Symbol or string expected:" && tid, #create)>
  [ 31] pusharglistnoret 1 ...................... <error(me, "Symbol or string expected:" && tid, #create)>
  [ 33] extcall 25 .............................. return error(me, "Symbol or string expected:" && tid, #create)
  [ 35] getprop 645 ............................. <pObjectList>
  [ 38] getparam 1 .............................. <tid>
  [ 40] pusharglist 2 ........................... <pObjectList, tid>
  [ 42] objcall 54 .............................. <pObjectList[tid]>
  [ 44] pusharglist 1 ........................... <pObjectList[tid]>
  [ 46] extcall 112 ............................. <objectp(pObjectList[tid])>
  [ 48] jmpifz [ 68] ............................ if objectp(pObjectList[tid]) then
  [ 51] getparam 0 .............................. <me>
  [ 53] pushcons 2 .............................. <"Object already exists:">
  [ 55] getparam 1 .............................. <tid>
  [ 57] joinpadstr .............................. <"Object already exists:" && tid>
  [ 58] pushsymb 81 ............................. <#create>
  [ 60] pusharglist 3 ........................... <me, "Object already exists:" && tid, #create>
  [ 62] extcall 39 .............................. <error(me, "Object already exists:" && tid, #create)>
  [ 64] pusharglistnoret 1 ...................... <error(me, "Object already exists:" && tid, #create)>
  [ 66] extcall 25 .............................. return error(me, "Object already exists:" && tid, #create)
  [ 68] getparam 1 .............................. <tid>
  [ 70] pushsymb 655 ............................ <#random>
  [ 73] eq ...................................... <tid = #random>
  [ 74] jmpifz [ 84] ............................ if tid = #random then
  [ 77] pusharglist 0 ........................... <>
  [ 79] extcall 409 ............................. <getUniqueID()>
  [ 82] setparam 1 .............................. tid = getUniqueID()
  [ 84] getparam 2 .............................. <tClassList>
  [ 86] pusharglist 1 ........................... <tClassList>
  [ 88] extcall 20 .............................. <voidp(tClassList)>
  [ 90] jmpifz [107] ............................ if voidp(tClassList) then
  [ 93] getparam 0 .............................. <me>
  [ 95] pushcons 3 .............................. <"Class member name expected!">
  [ 97] pushsymb 81 ............................. <#create>
  [ 99] pusharglist 3 ........................... <me, "Class member name expected!", #create>
  [101] extcall 39 .............................. <error(me, "Class member name expected!", #create)>
  [103] pusharglistnoret 1 ...................... <error(me, "Class member name expected!", #create)>
  [105] extcall 25 .............................. return error(me, "Class member name expected!", #create)
  [107] getparam 2 .............................. <tClassList>
  [109] pusharglist 1 ........................... <tClassList>
  [111] extcall 53 .............................. <listp(tClassList)>
  [113] not ..................................... <not listp(tClassList)>
  [114] jmpifz [124] ............................ if not listp(tClassList) then
  [117] getparam 2 .............................. <tClassList>
  [119] pusharglist 1 ........................... <[tClassList]>
  [121] pushlist ................................ <[tClassList]>
  [122] setparam 2 .............................. tClassList = [tClassList]
  [124] getparam 2 .............................. <tClassList>
  [126] pusharglist 1 ........................... <tClassList>
  [128] objcall 552 ............................. <tClassList.duplicate()>
  [131] setparam 2 .............................. tClassList = tClassList.duplicate()
  [133] pusharglist 0 ........................... <>
  [135] extcall 32 .............................. <VOID>
  [137] setlocal 0 .............................. tObject = VOID
  [139] pusharglist 0 ........................... <>
  [141] extcall 32 .............................. <VOID>
  [143] setlocal 1 .............................. tTemp = VOID
  [145] getprop 653 ............................. <pBaseClsMem>
  [148] pusharglist 1 ........................... <pBaseClsMem>
  [150] objcall 116 ............................. <pBaseClsMem.new()>
  [152] setlocal 2 .............................. tBase = pBaseClsMem.new()
  [154] getlocal 2 .............................. <tBase>
  [156] pusharglistnoret 1 ...................... <tBase>
  [158] objcall 117 ............................. tBase.construct()
  [160] getparam 1 .............................. <tid>
  [162] pushsymb 656 ............................ <#temp>
  [165] nteq .................................... <tid <> #temp>
  [166] jmpifz [186] ............................ if tid <> #temp then
  [169] getlocal 2 .............................. <tBase>
  [171] getparam 1 .............................. <tid>
  [173] setobjprop 34 ........................... tBase.id = tid
  [175] getprop 645 ............................. <pObjectList>
  [178] getparam 1 .............................. <tid>
  [180] getlocal 2 .............................. <tBase>
  [182] pusharglistnoret 3 ...................... <pObjectList, tid, tBase>
  [184] objcall 24 .............................. pObjectList[tid] = tBase
  [186] getparam 2 .............................. <tClassList>
  [188] pushint8 1 .............................. <1>
  [190] getlocal 2 .............................. <tBase>
  [192] pusharglistnoret 3 ...................... <tClassList, 1, tBase>
  [194] objcall 657 ............................. tClassList.addAt(1, tBase)
  [197] getparam 2 .............................. <tClassList>
  [199] peek 0
  [201] pusharglist 1
  [203] extcall 22
  [205] pushint8 1
  [207] peek 0
  [209] peek 2
  [211] lteq
  [212] jmpifz [437] ............................ repeat with tClass in tClassList
  [215] peek 2
  [217] peek 1
  [219] pusharglist 2
  [221] extcall 54
  [223] setlocal 3
  [225] getlocal 3 .............................. <tClass>
  [227] pusharglist 1 ........................... <tClass>
  [229] extcall 112 ............................. <objectp(tClass)>
  [231] jmpifz [244] ............................ if objectp(tClass) then / else
  [234] getlocal 3 .............................. <tClass>
  [236] setlocal 0 .............................. tObject = tClass
  [238] pushzero ................................ <0>
  [239] setlocal 4 .............................. tInitFlag = 0
  [241] jmp [352]
  [244] getparam 0 .............................. <me>
  [246] pushsymb 172 ............................ <#resource_manager>
  [248] pusharglist 2 ........................... <me, #resource_manager>
  [250] objcall 102 ............................. <me.managerExists(#resource_manager)>
  [252] jmpifz [274] ............................ if me.managerExists(#resource_manager) then / else
  [255] getparam 0 .............................. <me>
  [257] pushsymb 172 ............................ <#resource_manager>
  [259] pusharglist 2 ........................... <me, #resource_manager>
  [261] objcall 101 ............................. <me.getManager(#resource_manager)>
  [263] getlocal 3 .............................. <tClass>
  [265] pusharglist 2 ........................... <me.getManager(#resource_manager), tClass>
  [267] objcall 52 .............................. <me.getManager(#resource_manager).getmemnum(tClass)>
  [269] setlocal 5 .............................. tMemNum = me.getManager(#resource_manager).getmemnum(tClass)
  [271] jmp [285]
  [274] getlocal 3 .............................. <tClass>
  [276] pusharglist 1 ........................... <tClass>
  [278] extcall 41 .............................. <member(tClass)>
  [280] getobjprop 658 .......................... <member(tClass).number>
  [283] setlocal 5 .............................. tMemNum = member(tClass).number
  [285] getlocal 5 .............................. <tMemNum>
  [287] pushint8 1 .............................. <1>
  [289] lt ...................................... <tMemNum < 1>
  [290] jmpifz [329] ............................ if tMemNum < 1 then
  [293] getparam 1 .............................. <tid>
  [295] pushsymb 656 ............................ <#temp>
  [298] nteq .................................... <tid <> #temp>
  [299] jmpifz [312] ............................ if tid <> #temp then
  [302] getprop 645 ............................. <pObjectList>
  [305] getparam 1 .............................. <tid>
  [307] pusharglistnoret 2 ...................... <pObjectList, tid>
  [309] objcall 659 ............................. pObjectList.deleteProp(tid)
  [312] getparam 0 .............................. <me>
  [314] pushcons 4 .............................. <"Script not found:">
  [316] getlocal 5 .............................. <tMemNum>
  [318] joinpadstr .............................. <"Script not found:" && tMemNum>
  [319] pushsymb 81 ............................. <#create>
  [321] pusharglist 3 ........................... <me, "Script not found:" && tMemNum, #create>
  [323] extcall 39 .............................. <error(me, "Script not found:" && tMemNum, #create)>
  [325] pusharglistnoret 1 ...................... <error(me, "Script not found:" && tMemNum, #create)>
  [327] extcall 25 .............................. return error(me, "Script not found:" && tMemNum, #create)
  [329] getlocal 5 .............................. <tMemNum>
  [331] pusharglist 1 ........................... <tMemNum>
  [333] extcall 115 ............................. <script(tMemNum)>
  [335] pusharglist 1 ........................... <script(tMemNum)>
  [337] objcall 116 ............................. <script(tMemNum).new()>
  [339] setlocal 0 .............................. tObject = script(tMemNum).new()
  [341] getlocal 0 .............................. <tObject>
  [343] pushsymb 117 ............................ <#construct>
  [345] pusharglist 2 ........................... <tObject, #construct>
  [347] objcall 660 ............................. <tObject.handler(#construct)>
  [350] setlocal 4 .............................. tInitFlag = tObject.handler(#construct)
  [352] getlocal 0 .............................. <tObject>
  [354] pushsymb 661 ............................ <#instance>
  [357] pusharglist 2 ........................... <tObject, #instance>
  [359] extcall 488 ............................. <ilk(tObject, #instance)>
  [362] jmpifz [380] ............................ if ilk(tObject, #instance) then
  [365] getlocal 0 .............................. <tObject>
  [367] pushsymb 662 ............................ <#ancestor>
  [370] getlocal 1 .............................. <tTemp>
  [372] pusharglistnoret 3 ...................... <tObject, #ancestor, tTemp>
  [374] objcall 24 .............................. tObject[#ancestor] = tTemp
  [376] getlocal 0 .............................. <tObject>
  [378] setlocal 1 .............................. tTemp = tObject
  [380] getparam 1 .............................. <tid>
  [382] pushsymb 656 ............................ <#temp>
  [385] nteq .................................... <tid <> #temp>
  [386] getparam 2 .............................. <tClassList>
  [388] pusharglist 1 ........................... <tClassList>
  [390] objcall 663 ............................. <tClassList.getLast()>
  [393] getlocal 3 .............................. <tClass>
  [395] eq ...................................... <tClassList.getLast() = tClass>
  [396] and ..................................... <(tid <> #temp) and (tClassList.getLast() = tClass)>
  [397] jmpifz [421] ............................ if (tid <> #temp) and (tClassList.getLast() = tClass) then
  [400] getprop 645 ............................. <pObjectList>
  [403] getparam 1 .............................. <tid>
  [405] getlocal 0 .............................. <tObject>
  [407] pusharglistnoret 3 ...................... <pObjectList, tid, tObject>
  [409] objcall 24 .............................. pObjectList[tid] = tObject
  [411] getprop 649 ............................. <pInstanceList>
  [414] getparam 1 .............................. <tid>
  [416] pusharglistnoret 2 ...................... <pInstanceList, tid>
  [418] objcall 664 ............................. pInstanceList.append(tid)
  [421] getlocal 4 .............................. <tInitFlag>
  [423] jmpifz [432] ............................ if tInitFlag then
  [426] getlocal 0 .............................. <tObject>
  [428] pusharglistnoret 1 ...................... <tObject>
  [430] objcall 117 ............................. tObject.construct()
  [432] pushint8 1
  [434] add
  [435] endrepeat [207]
  [437] pop 3
  [439] getlocal 0 .............................. <tObject>
  [441] pusharglistnoret 1 ...................... <tObject>
  [443] extcall 25 .............................. return tObject
  [445] ret
end

on get me, tid
  [  0] getprop 645 ............................. <pObjectList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pObjectList, tid>
  [  7] objcall 54 .............................. <pObjectList[tid]>
  [  9] setlocal 0 .............................. tObj = pObjectList[tid]
  [ 11] getlocal 0 .............................. <tObj>
  [ 13] pusharglist 1 ........................... <tObj>
  [ 15] extcall 20 .............................. <voidp(tObj)>
  [ 17] jmpifz [ 28] ............................ if voidp(tObj) then / else
  [ 20] pushzero ................................ <0>
  [ 21] pusharglistnoret 1 ...................... <0>
  [ 23] extcall 25 .............................. return 0
  [ 25] jmp [ 34]
  [ 28] getlocal 0 .............................. <tObj>
  [ 30] pusharglistnoret 1 ...................... <tObj>
  [ 32] extcall 25 .............................. return tObj
  [ 34] ret
end

on Remove me, tid
  [  0] getprop 645 ............................. <pObjectList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pObjectList, tid>
  [  7] objcall 54 .............................. <pObjectList[tid]>
  [  9] setlocal 0 .............................. tObj = pObjectList[tid]
  [ 11] getlocal 0 .............................. <tObj>
  [ 13] pusharglist 1 ........................... <tObj>
  [ 15] extcall 20 .............................. <voidp(tObj)>
  [ 17] jmpifz [ 25] ............................ if voidp(tObj) then
  [ 20] pushzero ................................ <0>
  [ 21] pusharglistnoret 1 ...................... <0>
  [ 23] extcall 25 .............................. return 0
  [ 25] getlocal 0 .............................. <tObj>
  [ 27] pushsymb 661 ............................ <#instance>
  [ 30] pusharglist 2 ........................... <tObj, #instance>
  [ 32] extcall 488 ............................. <ilk(tObj, #instance)>
  [ 35] jmpifz [114] ............................ if ilk(tObj, #instance) then
  [ 38] getlocal 0 .............................. <tObj>
  [ 40] getobjprop 667 .......................... <tObj.valid>
  [ 43] not ..................................... <not tObj.valid>
  [ 44] jmpifz [ 52] ............................ if not tObj.valid then
  [ 47] pushzero ................................ <0>
  [ 48] pusharglistnoret 1 ...................... <0>
  [ 50] extcall 25 .............................. return 0
  [ 52] pushint8 1 .............................. <1>
  [ 54] setlocal 1
  [ 56] getlocal 1
  [ 58] getlocal 0 .............................. <tObj>
  [ 60] pushsymb 668 ............................ <#delays>
  [ 63] pusharglist 2 ........................... <tObj, #delays>
  [ 65] objcall 22 .............................. <tObj.delays.count>
  [ 67] lteq
  [ 68] jmpifz [102] ............................ repeat with i = 1 to tObj.delays.count
  [ 71] getlocal 0 .............................. <tObj>
  [ 73] getchainedprop 668 ...................... <tObj.delays>
  [ 76] getlocal 1 .............................. <i>
  [ 78] pusharglist 2 ........................... <tObj.delays, i>
  [ 80] objcall 23 .............................. <tObj.delays.getPropAt(i)>
  [ 82] setlocal 2 .............................. tDelayID = tObj.delays.getPropAt(i)
  [ 84] getlocal 0 .............................. <tObj>
  [ 86] getlocal 2 .............................. <tDelayID>
  [ 88] pusharglistnoret 2 ...................... <tObj, tDelayID>
  [ 90] objcall 548 ............................. tObj.cancel(tDelayID)
  [ 93] pushint8 1
  [ 95] getlocal 1
  [ 97] add
  [ 98] setlocal 1
  [100] endrepeat [ 56]
  [102] getlocal 0 .............................. <tObj>
  [104] pusharglistnoret 1 ...................... <tObj>
  [106] objcall 119 ............................. tObj.deconstruct()
  [108] getlocal 0 .............................. <tObj>
  [110] pushzero ................................ <0>
  [111] setobjprop 667 .......................... tObj.valid = 0
  [114] getprop 646 ............................. <pUpdateList>
  [117] getlocal 0 .............................. <tObj>
  [119] pusharglistnoret 2 ...................... <pUpdateList, tObj>
  [121] objcall 527 ............................. pUpdateList.deleteOne(tObj)
  [124] getprop 647 ............................. <pPrepareList>
  [127] getlocal 0 .............................. <tObj>
  [129] pusharglistnoret 2 ...................... <pPrepareList, tObj>
  [131] objcall 527 ............................. pPrepareList.deleteOne(tObj)
  [134] pusharglist 0 ........................... <>
  [136] extcall 32 .............................. <VOID>
  [138] setlocal 0 .............................. tObj = VOID
  [140] getprop 650 ............................. <pEraseLock>
  [143] not ..................................... <not pEraseLock>
  [144] jmpifz [177] ............................ if not pEraseLock then
  [147] getprop 645 ............................. <pObjectList>
  [150] getparam 1 .............................. <tid>
  [152] pusharglistnoret 2 ...................... <pObjectList, tid>
  [154] objcall 659 ............................. pObjectList.deleteProp(tid)
  [157] getprop 649 ............................. <pInstanceList>
  [160] getparam 1 .............................. <tid>
  [162] pusharglistnoret 2 ...................... <pInstanceList, tid>
  [164] objcall 527 ............................. pInstanceList.deleteOne(tid)
  [167] getprop 648 ............................. <pManagerList>
  [170] getparam 1 .............................. <tid>
  [172] pusharglistnoret 2 ...................... <pManagerList, tid>
  [174] objcall 527 ............................. pManagerList.deleteOne(tid)
  [177] pushint8 1 .............................. <1>
  [179] pusharglistnoret 1 ...................... <1>
  [181] extcall 25 .............................. return 1
  [183] ret
end

on exists me, tid
  [  0] getparam 1 .............................. <tid>
  [  2] pusharglist 1 ........................... <tid>
  [  4] extcall 20 .............................. <voidp(tid)>
  [  6] jmpifz [ 14] ............................ if voidp(tid) then
  [  9] pushzero ................................ <0>
  [ 10] pusharglistnoret 1 ...................... <0>
  [ 12] extcall 25 .............................. return 0
  [ 14] getprop 645 ............................. <pObjectList>
  [ 17] getparam 1 .............................. <tid>
  [ 19] pusharglist 2 ........................... <pObjectList, tid>
  [ 21] objcall 54 .............................. <pObjectList[tid]>
  [ 23] pusharglist 1 ........................... <pObjectList[tid]>
  [ 25] extcall 112 ............................. <objectp(pObjectList[tid])>
  [ 27] pusharglistnoret 1 ...................... <objectp(pObjectList[tid])>
  [ 29] extcall 25 .............................. return objectp(pObjectList[tid])
  [ 31] ret
end

on print me
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] getprop 645 ............................. <pObjectList>
  [  9] getobjprop 22 ........................... <pObjectList.count>
  [ 11] lteq
  [ 12] jmpifz [ 71] ............................ repeat with i = 1 to pObjectList.count
  [ 15] getprop 645 ............................. <pObjectList>
  [ 18] getlocal 0 .............................. <i>
  [ 20] pusharglist 2 ........................... <pObjectList, i>
  [ 22] objcall 23 .............................. <pObjectList.getPropAt(i)>
  [ 24] setlocal 1 .............................. tProp = pObjectList.getPropAt(i)
  [ 26] getlocal 1 .............................. <tProp>
  [ 28] pusharglist 1 ........................... <tProp>
  [ 30] extcall 46 .............................. <symbolp(tProp)>
  [ 32] jmpifz [ 42] ............................ if symbolp(tProp) then
  [ 35] pushcons 5 .............................. <"#">
  [ 37] getlocal 1 .............................. <tProp>
  [ 39] joinstr ................................. <"#" & tProp>
  [ 40] setlocal 1 .............................. tProp = "#" & tProp
  [ 42] getlocal 1 .............................. <tProp>
  [ 44] pushcons 6 .............................. <":">
  [ 46] joinpadstr .............................. <tProp && ":">
  [ 47] getprop 645 ............................. <pObjectList>
  [ 50] getlocal 0 .............................. <i>
  [ 52] pusharglist 2 ........................... <pObjectList, i>
  [ 54] objcall 54 .............................. <pObjectList[i]>
  [ 56] joinpadstr .............................. <tProp && ":" && pObjectList[i]>
  [ 57] pusharglistnoret 1 ...................... <tProp && ":" && pObjectList[i]>
  [ 59] extcall 642 ............................. put tProp && ":" && pObjectList[i]
  [ 62] pushint8 1
  [ 64] getlocal 0
  [ 66] add
  [ 67] setlocal 0
  [ 69] endrepeat [  4]
  [ 71] pushint8 1 .............................. <1>
  [ 73] pusharglistnoret 1 ...................... <1>
  [ 75] extcall 25 .............................. return 1
  [ 77] ret
end

on registerObject me, tid, tObject
  [  0] getparam 2 .............................. <tObject>
  [  2] pusharglist 1 ........................... <tObject>
  [  4] extcall 112 ............................. <objectp(tObject)>
  [  6] not ..................................... <not objectp(tObject)>
  [  7] jmpifz [ 28] ............................ if not objectp(tObject) then
  [ 10] getparam 0 .............................. <me>
  [ 12] pushcons 7 .............................. <"Invalid object:">
  [ 14] getparam 2 .............................. <tObject>
  [ 16] joinpadstr .............................. <"Invalid object:" && tObject>
  [ 17] pushsymb 360 ............................ <#register>
  [ 20] pusharglist 3 ........................... <me, "Invalid object:" && tObject, #register>
  [ 22] extcall 39 .............................. <error(me, "Invalid object:" && tObject, #register)>
  [ 24] pusharglistnoret 1 ...................... <error(me, "Invalid object:" && tObject, #register)>
  [ 26] extcall 25 .............................. return error(me, "Invalid object:" && tObject, #register)
  [ 28] getprop 645 ............................. <pObjectList>
  [ 31] getparam 1 .............................. <tid>
  [ 33] pusharglist 2 ........................... <pObjectList, tid>
  [ 35] objcall 54 .............................. <pObjectList[tid]>
  [ 37] pusharglist 1 ........................... <pObjectList[tid]>
  [ 39] extcall 20 .............................. <voidp(pObjectList[tid])>
  [ 41] not ..................................... <not voidp(pObjectList[tid])>
  [ 42] jmpifz [ 63] ............................ if not voidp(pObjectList[tid]) then
  [ 45] getparam 0 .............................. <me>
  [ 47] pushcons 2 .............................. <"Object already exists:">
  [ 49] getparam 1 .............................. <tid>
  [ 51] joinpadstr .............................. <"Object already exists:" && tid>
  [ 52] pushsymb 360 ............................ <#register>
  [ 55] pusharglist 3 ........................... <me, "Object already exists:" && tid, #register>
  [ 57] extcall 39 .............................. <error(me, "Object already exists:" && tid, #register)>
  [ 59] pusharglistnoret 1 ...................... <error(me, "Object already exists:" && tid, #register)>
  [ 61] extcall 25 .............................. return error(me, "Object already exists:" && tid, #register)
  [ 63] getprop 645 ............................. <pObjectList>
  [ 66] getparam 1 .............................. <tid>
  [ 68] getparam 2 .............................. <tObject>
  [ 70] pusharglistnoret 3 ...................... <pObjectList, tid, tObject>
  [ 72] objcall 24 .............................. pObjectList[tid] = tObject
  [ 74] getprop 649 ............................. <pInstanceList>
  [ 77] getparam 1 .............................. <tid>
  [ 79] pusharglistnoret 2 ...................... <pInstanceList, tid>
  [ 81] objcall 664 ............................. pInstanceList.append(tid)
  [ 84] pushint8 1 .............................. <1>
  [ 86] pusharglistnoret 1 ...................... <1>
  [ 88] extcall 25 .............................. return 1
  [ 90] ret
end

on unregisterObject me, tid
  [  0] getprop 645 ............................. <pObjectList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pObjectList, tid>
  [  7] objcall 54 .............................. <pObjectList[tid]>
  [  9] pusharglist 1 ........................... <pObjectList[tid]>
  [ 11] extcall 20 .............................. <voidp(pObjectList[tid])>
  [ 13] jmpifz [ 34] ............................ if voidp(pObjectList[tid]) then
  [ 16] getparam 0 .............................. <me>
  [ 18] pushcons 8 .............................. <"Referred object not found:">
  [ 20] getparam 1 .............................. <tid>
  [ 22] joinpadstr .............................. <"Referred object not found:" && tid>
  [ 23] pushsymb 361 ............................ <#unregister>
  [ 26] pusharglist 3 ........................... <me, "Referred object not found:" && tid, #unregister>
  [ 28] extcall 39 .............................. <error(me, "Referred object not found:" && tid, #unregister)>
  [ 30] pusharglistnoret 1 ...................... <error(me, "Referred object not found:" && tid, #unregister)>
  [ 32] extcall 25 .............................. return error(me, "Referred object not found:" && tid, #unregister)
  [ 34] getprop 645 ............................. <pObjectList>
  [ 37] getparam 1 .............................. <tid>
  [ 39] pusharglist 2 ........................... <pObjectList, tid>
  [ 41] objcall 54 .............................. <pObjectList[tid]>
  [ 43] setlocal 0 .............................. tObj = pObjectList[tid]
  [ 45] getprop 645 ............................. <pObjectList>
  [ 48] getparam 1 .............................. <tid>
  [ 50] pusharglistnoret 2 ...................... <pObjectList, tid>
  [ 52] objcall 659 ............................. pObjectList.deleteProp(tid)
  [ 55] getprop 646 ............................. <pUpdateList>
  [ 58] getlocal 0 .............................. <tObj>
  [ 60] pusharglistnoret 2 ...................... <pUpdateList, tObj>
  [ 62] objcall 527 ............................. pUpdateList.deleteOne(tObj)
  [ 65] getprop 647 ............................. <pPrepareList>
  [ 68] getlocal 0 .............................. <tObj>
  [ 70] pusharglistnoret 2 ...................... <pPrepareList, tObj>
  [ 72] objcall 527 ............................. pPrepareList.deleteOne(tObj)
  [ 75] getprop 649 ............................. <pInstanceList>
  [ 78] getparam 1 .............................. <tid>
  [ 80] pusharglistnoret 2 ...................... <pInstanceList, tid>
  [ 82] objcall 527 ............................. pInstanceList.deleteOne(tid)
  [ 85] pusharglist 0 ........................... <>
  [ 87] extcall 32 .............................. <VOID>
  [ 89] setlocal 0 .............................. tObj = VOID
  [ 91] pushint8 1 .............................. <1>
  [ 93] pusharglistnoret 1 ...................... <1>
  [ 95] extcall 25 .............................. return 1
  [ 97] ret
end

on registerManager me, tid
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <tid>
  [  4] pusharglist 2 ........................... <me, tid>
  [  6] objcall 88 .............................. <me.exists(tid)>
  [  8] not ..................................... <not me.exists(tid)>
  [  9] jmpifz [ 29] ............................ if not me.exists(tid) then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 8 .............................. <"Referred object not found:">
  [ 16] getparam 1 .............................. <tid>
  [ 18] joinpadstr .............................. <"Referred object not found:" && tid>
  [ 19] pushsymb 104 ............................ <#registerManager>
  [ 21] pusharglist 3 ........................... <me, "Referred object not found:" && tid, #registerManager>
  [ 23] extcall 39 .............................. <error(me, "Referred object not found:" && tid, #registerManager)>
  [ 25] pusharglistnoret 1 ...................... <error(me, "Referred object not found:" && tid, #registerManager)>
  [ 27] extcall 25 .............................. return error(me, "Referred object not found:" && tid, #registerManager)
  [ 29] getprop 648 ............................. <pManagerList>
  [ 32] getparam 1 .............................. <tid>
  [ 34] pusharglist 2 ........................... <pManagerList, tid>
  [ 36] objcall 641 ............................. <pManagerList.getOne(tid)>
  [ 39] pushzero ................................ <0>
  [ 40] nteq .................................... <pManagerList.getOne(tid) <> 0>
  [ 41] jmpifz [ 61] ............................ if pManagerList.getOne(tid) <> 0 then
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 9 .............................. <"Manager alreay registered:">
  [ 48] getparam 1 .............................. <tid>
  [ 50] joinpadstr .............................. <"Manager alreay registered:" && tid>
  [ 51] pushsymb 104 ............................ <#registerManager>
  [ 53] pusharglist 3 ........................... <me, "Manager alreay registered:" && tid, #registerManager>
  [ 55] extcall 39 .............................. <error(me, "Manager alreay registered:" && tid, #registerManager)>
  [ 57] pusharglistnoret 1 ...................... <error(me, "Manager alreay registered:" && tid, #registerManager)>
  [ 59] extcall 25 .............................. return error(me, "Manager alreay registered:" && tid, #registerManager)
  [ 61] getprop 649 ............................. <pInstanceList>
  [ 64] getparam 1 .............................. <tid>
  [ 66] pusharglistnoret 2 ...................... <pInstanceList, tid>
  [ 68] objcall 527 ............................. pInstanceList.deleteOne(tid)
  [ 71] getprop 648 ............................. <pManagerList>
  [ 74] getparam 1 .............................. <tid>
  [ 76] pusharglistnoret 2 ...................... <pManagerList, tid>
  [ 78] objcall 664 ............................. pManagerList.append(tid)
  [ 81] pushint8 1 .............................. <1>
  [ 83] pusharglistnoret 1 ...................... <1>
  [ 85] extcall 25 .............................. return 1
  [ 87] ret
end

on unregisterManager me, tid
  [  0] getparam 0 .............................. <me>
  [  2] getparam 1 .............................. <tid>
  [  4] pusharglist 2 ........................... <me, tid>
  [  6] objcall 88 .............................. <me.exists(tid)>
  [  8] not ..................................... <not me.exists(tid)>
  [  9] jmpifz [ 29] ............................ if not me.exists(tid) then
  [ 12] getparam 0 .............................. <me>
  [ 14] pushcons 8 .............................. <"Referred object not found:">
  [ 16] getparam 1 .............................. <tid>
  [ 18] joinpadstr .............................. <"Referred object not found:" && tid>
  [ 19] pushsymb 105 ............................ <#unregisterManager>
  [ 21] pusharglist 3 ........................... <me, "Referred object not found:" && tid, #unregisterManager>
  [ 23] extcall 39 .............................. <error(me, "Referred object not found:" && tid, #unregisterManager)>
  [ 25] pusharglistnoret 1 ...................... <error(me, "Referred object not found:" && tid, #unregisterManager)>
  [ 27] extcall 25 .............................. return error(me, "Referred object not found:" && tid, #unregisterManager)
  [ 29] getprop 649 ............................. <pInstanceList>
  [ 32] getparam 1 .............................. <tid>
  [ 34] pusharglist 2 ........................... <pInstanceList, tid>
  [ 36] objcall 641 ............................. <pInstanceList.getOne(tid)>
  [ 39] pushzero ................................ <0>
  [ 40] nteq .................................... <pInstanceList.getOne(tid) <> 0>
  [ 41] jmpifz [ 61] ............................ if pInstanceList.getOne(tid) <> 0 then
  [ 44] getparam 0 .............................. <me>
  [ 46] pushcons 10 ............................. <"Manager already unregistered:">
  [ 48] getparam 1 .............................. <tid>
  [ 50] joinpadstr .............................. <"Manager already unregistered:" && tid>
  [ 51] pushsymb 105 ............................ <#unregisterManager>
  [ 53] pusharglist 3 ........................... <me, "Manager already unregistered:" && tid, #unregisterManager>
  [ 55] extcall 39 .............................. <error(me, "Manager already unregistered:" && tid, #unregisterManager)>
  [ 57] pusharglistnoret 1 ...................... <error(me, "Manager already unregistered:" && tid, #unregisterManager)>
  [ 59] extcall 25 .............................. return error(me, "Manager already unregistered:" && tid, #unregisterManager)
  [ 61] getprop 648 ............................. <pManagerList>
  [ 64] getparam 1 .............................. <tid>
  [ 66] pusharglistnoret 2 ...................... <pManagerList, tid>
  [ 68] objcall 527 ............................. pManagerList.deleteOne(tid)
  [ 71] getprop 649 ............................. <pInstanceList>
  [ 74] getparam 1 .............................. <tid>
  [ 76] pusharglistnoret 2 ...................... <pInstanceList, tid>
  [ 78] objcall 664 ............................. pInstanceList.append(tid)
  [ 81] pushint8 1 .............................. <1>
  [ 83] pusharglistnoret 1 ...................... <1>
  [ 85] extcall 25 .............................. return 1
  [ 87] ret
end

on getManager me, tid
  [  0] getprop 648 ............................. <pManagerList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pManagerList, tid>
  [  7] objcall 641 ............................. <pManagerList.getOne(tid)>
  [ 10] not ..................................... <not pManagerList.getOne(tid)>
  [ 11] jmpifz [ 31] ............................ if not pManagerList.getOne(tid) then
  [ 14] getparam 0 .............................. <me>
  [ 16] pushcons 11 ............................. <"Manager not found:">
  [ 18] getparam 1 .............................. <tid>
  [ 20] joinpadstr .............................. <"Manager not found:" && tid>
  [ 21] pushsymb 101 ............................ <#getManager>
  [ 23] pusharglist 3 ........................... <me, "Manager not found:" && tid, #getManager>
  [ 25] extcall 39 .............................. <error(me, "Manager not found:" && tid, #getManager)>
  [ 27] pusharglistnoret 1 ...................... <error(me, "Manager not found:" && tid, #getManager)>
  [ 29] extcall 25 .............................. return error(me, "Manager not found:" && tid, #getManager)
  [ 31] getprop 645 ............................. <pObjectList>
  [ 34] getparam 1 .............................. <tid>
  [ 36] pusharglist 2 ........................... <pObjectList, tid>
  [ 38] objcall 54 .............................. <pObjectList[tid]>
  [ 40] pusharglistnoret 1 ...................... <pObjectList[tid]>
  [ 42] extcall 25 .............................. return pObjectList[tid]
  [ 44] ret
end

on managerExists me, tid
  [  0] getprop 648 ............................. <pManagerList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pManagerList, tid>
  [  7] objcall 641 ............................. <pManagerList.getOne(tid)>
  [ 10] pushzero ................................ <0>
  [ 11] nteq .................................... <pManagerList.getOne(tid) <> 0>
  [ 12] pusharglistnoret 1 ...................... <pManagerList.getOne(tid) <> 0>
  [ 14] extcall 25 .............................. return pManagerList.getOne(tid) <> 0
  [ 16] ret
end

on receivePrepare me, tid
  [  0] getprop 645 ............................. <pObjectList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pObjectList, tid>
  [  7] objcall 54 .............................. <pObjectList[tid]>
  [  9] pusharglist 1 ........................... <pObjectList[tid]>
  [ 11] extcall 20 .............................. <voidp(pObjectList[tid])>
  [ 13] jmpifz [ 21] ............................ if voidp(pObjectList[tid]) then
  [ 16] pushzero ................................ <0>
  [ 17] pusharglistnoret 1 ...................... <0>
  [ 19] extcall 25 .............................. return 0
  [ 21] getprop 647 ............................. <pPrepareList>
  [ 24] getprop 645 ............................. <pObjectList>
  [ 27] getparam 1 .............................. <tid>
  [ 29] pusharglist 2 ........................... <pObjectList, tid>
  [ 31] objcall 54 .............................. <pObjectList[tid]>
  [ 33] pusharglist 2 ........................... <pPrepareList, pObjectList[tid]>
  [ 35] objcall 517 ............................. <pPrepareList.getPos(pObjectList[tid])>
  [ 38] pushzero ................................ <0>
  [ 39] gt ...................................... <pPrepareList.getPos(pObjectList[tid]) > 0>
  [ 40] jmpifz [ 48] ............................ if pPrepareList.getPos(pObjectList[tid]) > 0 then
  [ 43] pushzero ................................ <0>
  [ 44] pusharglistnoret 1 ...................... <0>
  [ 46] extcall 25 .............................. return 0
  [ 48] getprop 647 ............................. <pPrepareList>
  [ 51] getprop 645 ............................. <pObjectList>
  [ 54] getparam 1 .............................. <tid>
  [ 56] pusharglist 2 ........................... <pObjectList, tid>
  [ 58] objcall 54 .............................. <pObjectList[tid]>
  [ 60] pusharglistnoret 2 ...................... <pPrepareList, pObjectList[tid]>
  [ 62] objcall 122 ............................. pPrepareList.add(pObjectList[tid])
  [ 64] getprop 652 ............................. <pUpdatePause>
  [ 67] not ..................................... <not pUpdatePause>
  [ 68] jmpifz [112] ............................ if not pUpdatePause then
  [ 71] getprop 651 ............................. <pTimeOut>
  [ 74] pusharglist 1 ........................... <pTimeOut>
  [ 76] extcall 20 .............................. <voidp(pTimeOut)>
  [ 78] jmpifz [112] ............................ if voidp(pTimeOut) then
  [ 81] pushcons 12 ............................. <"objectmanager">
  [ 83] getmovieprop 671 ........................ <the milliSeconds>
  [ 86] joinstr ................................. <"objectmanager" & the milliSeconds>
  [ 87] pusharglist 1 ........................... <"objectmanager" & the milliSeconds>
  [ 89] extcall 670 ............................. <timeout("objectmanager" & the milliSeconds)>
  [ 92] pushint8 60 ............................. <60>
  [ 94] pushint16 1000 .......................... <1000>
  [ 97] mul ..................................... <60 * 1000>
  [ 98] pushint8 60 ............................. <60>
  [100] mul ..................................... <60 * 1000 * 60>
  [101] pushsymb 33 ............................. <#null>
  [103] getparam 0 .............................. <me>
  [105] pusharglist 4 ........................... <timeout("objectmanager" & the milliSeconds), 60 * 1000 * 60, #null, me>
  [107] objcall 116 ............................. <timeout("objectmanager" & the milliSeconds).new(60 * 1000 * 60, #null, me)>
  [109] setprop 651 ............................. pTimeOut = timeout("objectmanager" & the milliSeconds).new(60 * 1000 * 60, #null, me)
  [112] pushint8 1 .............................. <1>
  [114] pusharglistnoret 1 ...................... <1>
  [116] extcall 25 .............................. return 1
  [118] ret
end

on removePrepare me, tid
  [  0] getprop 645 ............................. <pObjectList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pObjectList, tid>
  [  7] objcall 54 .............................. <pObjectList[tid]>
  [  9] pusharglist 1 ........................... <pObjectList[tid]>
  [ 11] extcall 20 .............................. <voidp(pObjectList[tid])>
  [ 13] jmpifz [ 21] ............................ if voidp(pObjectList[tid]) then
  [ 16] pushzero ................................ <0>
  [ 17] pusharglistnoret 1 ...................... <0>
  [ 19] extcall 25 .............................. return 0
  [ 21] getprop 647 ............................. <pPrepareList>
  [ 24] getprop 645 ............................. <pObjectList>
  [ 27] getparam 1 .............................. <tid>
  [ 29] pusharglist 2 ........................... <pObjectList, tid>
  [ 31] objcall 54 .............................. <pObjectList[tid]>
  [ 33] pusharglist 2 ........................... <pPrepareList, pObjectList[tid]>
  [ 35] objcall 641 ............................. <pPrepareList.getOne(pObjectList[tid])>
  [ 38] pushint8 1 .............................. <1>
  [ 40] lt ...................................... <pPrepareList.getOne(pObjectList[tid]) < 1>
  [ 41] jmpifz [ 49] ............................ if pPrepareList.getOne(pObjectList[tid]) < 1 then
  [ 44] pushzero ................................ <0>
  [ 45] pusharglistnoret 1 ...................... <0>
  [ 47] extcall 25 .............................. return 0
  [ 49] getprop 647 ............................. <pPrepareList>
  [ 52] getprop 645 ............................. <pObjectList>
  [ 55] getparam 1 .............................. <tid>
  [ 57] pusharglist 2 ........................... <pObjectList, tid>
  [ 59] objcall 54 .............................. <pObjectList[tid]>
  [ 61] pusharglistnoret 2 ...................... <pPrepareList, pObjectList[tid]>
  [ 63] objcall 527 ............................. pPrepareList.deleteOne(pObjectList[tid])
  [ 66] getprop 647 ............................. <pPrepareList>
  [ 69] getobjprop 22 ........................... <pPrepareList.count>
  [ 71] pushzero ................................ <0>
  [ 72] eq ...................................... <pPrepareList.count = 0>
  [ 73] getprop 646 ............................. <pUpdateList>
  [ 76] getobjprop 22 ........................... <pUpdateList.count>
  [ 78] pushzero ................................ <0>
  [ 79] eq ...................................... <pUpdateList.count = 0>
  [ 80] and ..................................... <(pPrepareList.count = 0) and (pUpdateList.count = 0)>
  [ 81] jmpifz [109] ............................ if (pPrepareList.count = 0) and (pUpdateList.count = 0) then
  [ 84] getprop 651 ............................. <pTimeOut>
  [ 87] pusharglist 1 ........................... <pTimeOut>
  [ 89] extcall 112 ............................. <objectp(pTimeOut)>
  [ 91] jmpifz [109] ............................ if objectp(pTimeOut) then
  [ 94] getprop 651 ............................. <pTimeOut>
  [ 97] pusharglistnoret 1 ...................... <pTimeOut>
  [ 99] objcall 654 ............................. pTimeOut.forget()
  [102] pusharglist 0 ........................... <>
  [104] extcall 32 .............................. <VOID>
  [106] setprop 651 ............................. pTimeOut = VOID
  [109] pushint8 1 .............................. <1>
  [111] pusharglistnoret 1 ...................... <1>
  [113] extcall 25 .............................. return 1
  [115] ret
end

on receiveUpdate me, tid
  [  0] getprop 645 ............................. <pObjectList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pObjectList, tid>
  [  7] objcall 54 .............................. <pObjectList[tid]>
  [  9] pusharglist 1 ........................... <pObjectList[tid]>
  [ 11] extcall 20 .............................. <voidp(pObjectList[tid])>
  [ 13] jmpifz [ 21] ............................ if voidp(pObjectList[tid]) then
  [ 16] pushzero ................................ <0>
  [ 17] pusharglistnoret 1 ...................... <0>
  [ 19] extcall 25 .............................. return 0
  [ 21] getprop 646 ............................. <pUpdateList>
  [ 24] getprop 645 ............................. <pObjectList>
  [ 27] getparam 1 .............................. <tid>
  [ 29] pusharglist 2 ........................... <pObjectList, tid>
  [ 31] objcall 54 .............................. <pObjectList[tid]>
  [ 33] pusharglist 2 ........................... <pUpdateList, pObjectList[tid]>
  [ 35] objcall 517 ............................. <pUpdateList.getPos(pObjectList[tid])>
  [ 38] pushzero ................................ <0>
  [ 39] gt ...................................... <pUpdateList.getPos(pObjectList[tid]) > 0>
  [ 40] jmpifz [ 48] ............................ if pUpdateList.getPos(pObjectList[tid]) > 0 then
  [ 43] pushzero ................................ <0>
  [ 44] pusharglistnoret 1 ...................... <0>
  [ 46] extcall 25 .............................. return 0
  [ 48] getprop 646 ............................. <pUpdateList>
  [ 51] getprop 645 ............................. <pObjectList>
  [ 54] getparam 1 .............................. <tid>
  [ 56] pusharglist 2 ........................... <pObjectList, tid>
  [ 58] objcall 54 .............................. <pObjectList[tid]>
  [ 60] pusharglistnoret 2 ...................... <pUpdateList, pObjectList[tid]>
  [ 62] objcall 122 ............................. pUpdateList.add(pObjectList[tid])
  [ 64] getprop 652 ............................. <pUpdatePause>
  [ 67] not ..................................... <not pUpdatePause>
  [ 68] jmpifz [112] ............................ if not pUpdatePause then
  [ 71] getprop 651 ............................. <pTimeOut>
  [ 74] pusharglist 1 ........................... <pTimeOut>
  [ 76] extcall 20 .............................. <voidp(pTimeOut)>
  [ 78] jmpifz [112] ............................ if voidp(pTimeOut) then
  [ 81] pushcons 12 ............................. <"objectmanager">
  [ 83] getmovieprop 671 ........................ <the milliSeconds>
  [ 86] joinstr ................................. <"objectmanager" & the milliSeconds>
  [ 87] pusharglist 1 ........................... <"objectmanager" & the milliSeconds>
  [ 89] extcall 670 ............................. <timeout("objectmanager" & the milliSeconds)>
  [ 92] pushint8 60 ............................. <60>
  [ 94] pushint16 1000 .......................... <1000>
  [ 97] mul ..................................... <60 * 1000>
  [ 98] pushint8 60 ............................. <60>
  [100] mul ..................................... <60 * 1000 * 60>
  [101] pushsymb 33 ............................. <#null>
  [103] getparam 0 .............................. <me>
  [105] pusharglist 4 ........................... <timeout("objectmanager" & the milliSeconds), 60 * 1000 * 60, #null, me>
  [107] objcall 116 ............................. <timeout("objectmanager" & the milliSeconds).new(60 * 1000 * 60, #null, me)>
  [109] setprop 651 ............................. pTimeOut = timeout("objectmanager" & the milliSeconds).new(60 * 1000 * 60, #null, me)
  [112] pushint8 1 .............................. <1>
  [114] pusharglistnoret 1 ...................... <1>
  [116] extcall 25 .............................. return 1
  [118] ret
end

on removeUpdate me, tid
  [  0] getprop 645 ............................. <pObjectList>
  [  3] getparam 1 .............................. <tid>
  [  5] pusharglist 2 ........................... <pObjectList, tid>
  [  7] objcall 54 .............................. <pObjectList[tid]>
  [  9] pusharglist 1 ........................... <pObjectList[tid]>
  [ 11] extcall 20 .............................. <voidp(pObjectList[tid])>
  [ 13] jmpifz [ 21] ............................ if voidp(pObjectList[tid]) then
  [ 16] pushzero ................................ <0>
  [ 17] pusharglistnoret 1 ...................... <0>
  [ 19] extcall 25 .............................. return 0
  [ 21] getprop 646 ............................. <pUpdateList>
  [ 24] getprop 645 ............................. <pObjectList>
  [ 27] getparam 1 .............................. <tid>
  [ 29] pusharglist 2 ........................... <pObjectList, tid>
  [ 31] objcall 54 .............................. <pObjectList[tid]>
  [ 33] pusharglist 2 ........................... <pUpdateList, pObjectList[tid]>
  [ 35] objcall 641 ............................. <pUpdateList.getOne(pObjectList[tid])>
  [ 38] pushint8 1 .............................. <1>
  [ 40] lt ...................................... <pUpdateList.getOne(pObjectList[tid]) < 1>
  [ 41] jmpifz [ 49] ............................ if pUpdateList.getOne(pObjectList[tid]) < 1 then
  [ 44] pushzero ................................ <0>
  [ 45] pusharglistnoret 1 ...................... <0>
  [ 47] extcall 25 .............................. return 0
  [ 49] getprop 646 ............................. <pUpdateList>
  [ 52] getprop 645 ............................. <pObjectList>
  [ 55] getparam 1 .............................. <tid>
  [ 57] pusharglist 2 ........................... <pObjectList, tid>
  [ 59] objcall 54 .............................. <pObjectList[tid]>
  [ 61] pusharglistnoret 2 ...................... <pUpdateList, pObjectList[tid]>
  [ 63] objcall 527 ............................. pUpdateList.deleteOne(pObjectList[tid])
  [ 66] getprop 647 ............................. <pPrepareList>
  [ 69] getobjprop 22 ........................... <pPrepareList.count>
  [ 71] pushzero ................................ <0>
  [ 72] eq ...................................... <pPrepareList.count = 0>
  [ 73] getprop 646 ............................. <pUpdateList>
  [ 76] getobjprop 22 ........................... <pUpdateList.count>
  [ 78] pushzero ................................ <0>
  [ 79] eq ...................................... <pUpdateList.count = 0>
  [ 80] and ..................................... <(pPrepareList.count = 0) and (pUpdateList.count = 0)>
  [ 81] jmpifz [109] ............................ if (pPrepareList.count = 0) and (pUpdateList.count = 0) then
  [ 84] getprop 651 ............................. <pTimeOut>
  [ 87] pusharglist 1 ........................... <pTimeOut>
  [ 89] extcall 112 ............................. <objectp(pTimeOut)>
  [ 91] jmpifz [109] ............................ if objectp(pTimeOut) then
  [ 94] getprop 651 ............................. <pTimeOut>
  [ 97] pusharglistnoret 1 ...................... <pTimeOut>
  [ 99] objcall 654 ............................. pTimeOut.forget()
  [102] pusharglist 0 ........................... <>
  [104] extcall 32 .............................. <VOID>
  [106] setprop 651 ............................. pTimeOut = VOID
  [109] pushint8 1 .............................. <1>
  [111] pusharglistnoret 1 ...................... <1>
  [113] extcall 25 .............................. return 1
  [115] ret
end

on pauseUpdate me
  [  0] getprop 651 ............................. <pTimeOut>
  [  3] pusharglist 1 ........................... <pTimeOut>
  [  5] extcall 112 ............................. <objectp(pTimeOut)>
  [  7] jmpifz [ 25] ............................ if objectp(pTimeOut) then
  [ 10] getprop 651 ............................. <pTimeOut>
  [ 13] pusharglistnoret 1 ...................... <pTimeOut>
  [ 15] objcall 654 ............................. pTimeOut.forget()
  [ 18] pusharglist 0 ........................... <>
  [ 20] extcall 32 .............................. <VOID>
  [ 22] setprop 651 ............................. pTimeOut = VOID
  [ 25] pushint8 1 .............................. <1>
  [ 27] setprop 652 ............................. pUpdatePause = 1
  [ 30] pushint8 1 .............................. <1>
  [ 32] pusharglistnoret 1 ...................... <1>
  [ 34] extcall 25 .............................. return 1
  [ 36] ret
end

on resumeUpdate me
  [  0] getprop 646 ............................. <pUpdateList>
  [  3] getobjprop 22 ........................... <pUpdateList.count>
  [  5] pushzero ................................ <0>
  [  6] gt ...................................... <pUpdateList.count > 0>
  [  7] getprop 651 ............................. <pTimeOut>
  [ 10] pusharglist 1 ........................... <pTimeOut>
  [ 12] extcall 20 .............................. <voidp(pTimeOut)>
  [ 14] and ..................................... <(pUpdateList.count > 0) and voidp(pTimeOut)>
  [ 15] jmpifz [ 49] ............................ if (pUpdateList.count > 0) and voidp(pTimeOut) then
  [ 18] pushcons 12 ............................. <"objectmanager">
  [ 20] getmovieprop 671 ........................ <the milliSeconds>
  [ 23] joinstr ................................. <"objectmanager" & the milliSeconds>
  [ 24] pusharglist 1 ........................... <"objectmanager" & the milliSeconds>
  [ 26] extcall 670 ............................. <timeout("objectmanager" & the milliSeconds)>
  [ 29] pushint8 60 ............................. <60>
  [ 31] pushint16 1000 .......................... <1000>
  [ 34] mul ..................................... <60 * 1000>
  [ 35] pushint8 60 ............................. <60>
  [ 37] mul ..................................... <60 * 1000 * 60>
  [ 38] pushsymb 33 ............................. <#null>
  [ 40] getparam 0 .............................. <me>
  [ 42] pusharglist 4 ........................... <timeout("objectmanager" & the milliSeconds), 60 * 1000 * 60, #null, me>
  [ 44] objcall 116 ............................. <timeout("objectmanager" & the milliSeconds).new(60 * 1000 * 60, #null, me)>
  [ 46] setprop 651 ............................. pTimeOut = timeout("objectmanager" & the milliSeconds).new(60 * 1000 * 60, #null, me)
  [ 49] pushzero ................................ <0>
  [ 50] setprop 652 ............................. pUpdatePause = 0
  [ 53] pushint8 1 .............................. <1>
  [ 55] pusharglistnoret 1 ...................... <1>
  [ 57] extcall 25 .............................. return 1
  [ 59] ret
end

on prepareFrame me
  [  0] pushsymb 435 ............................ <#prepare>
  [  3] getprop 647 ............................. <pPrepareList>
  [  6] pusharglistnoret 2 ...................... <#prepare, pPrepareList>
  [  8] extcall 68 .............................. call(#prepare, pPrepareList)
  [ 10] pushsymb 672 ............................ <#update>
  [ 13] getprop 646 ............................. <pUpdateList>
  [ 16] pusharglistnoret 2 ...................... <#update, pUpdateList>
  [ 18] extcall 68 .............................. call(#update, pUpdateList)
  [ 20] ret
end

on null me
  [  0] ret
end
