property m_ar_subturns, m_iNumber, m_iChecksum, m_bTested

on construct me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setprop 677 ............................. m_ar_subturns = []
  [  6] pushint8 1 .............................. <1>
  [  8] inv ..................................... <-1>
  [  9] setprop 678 ............................. m_iNumber = -1
  [ 12] pushzero ................................ <0>
  [ 13] setprop 679 ............................. m_bTested = 0
  [ 16] pushzero ................................ <0>
  [ 17] setprop 680 ............................. m_iChecksum = 0
  [ 20] pushint8 1 .............................. <1>
  [ 22] pusharglistnoret 1 ...................... <1>
  [ 24] extcall 53 .............................. return 1
  [ 26] ret
end

on deconstruct me
  [  0] pusharglist 0 ........................... <[]>
  [  2] pushlist ................................ <[]>
  [  3] setprop 677 ............................. m_ar_subturns = []
  [  6] pushint8 1 .............................. <1>
  [  8] pusharglistnoret 1 ...................... <1>
  [ 10] extcall 53 .............................. return 1
  [ 12] ret
end

on AddElement me, i_iSubturn, i_rElement
  [  0] getprop 677 ............................. <m_ar_subturns>
  [  3] getobjprop 143 .......................... <m_ar_subturns.count>
  [  5] getparam 1 .............................. <i_iSubturn>
  [  7] lt ...................................... <m_ar_subturns.count < i_iSubturn>
  [  8] jmpifz [ 49] ............................ if m_ar_subturns.count < i_iSubturn then
  [ 11] getprop 677 ............................. <m_ar_subturns>
  [ 14] getobjprop 143 .......................... <m_ar_subturns.count>
  [ 16] pushint8 1 .............................. <1>
  [ 18] add ..................................... <m_ar_subturns.count + 1>
  [ 19] setlocal 0
  [ 21] getlocal 0
  [ 23] getparam 1 .............................. <i_iSubturn>
  [ 25] lteq
  [ 26] jmpifz [ 49] ............................ repeat with i = m_ar_subturns.count + 1 to i_iSubturn
  [ 29] getprop 677 ............................. <m_ar_subturns>
  [ 32] pusharglist 0 ........................... <[]>
  [ 34] pushlist ................................ <[]>
  [ 35] pusharglistnoret 2 ...................... <m_ar_subturns, []>
  [ 37] objcall 385 ............................. m_ar_subturns.append([])
  [ 40] pushint8 1
  [ 42] getlocal 0
  [ 44] add
  [ 45] setlocal 0
  [ 47] endrepeat [ 21]
  [ 49] getparam 2 .............................. <i_rElement>
  [ 51] pusharglist 1 ........................... <i_rElement>
  [ 53] extcall 564 ............................. <voidp(i_rElement)>
  [ 56] not ..................................... <not voidp(i_rElement)>
  [ 57] jmpifz [ 76] ............................ if not voidp(i_rElement) then
  [ 60] getprop 677 ............................. <m_ar_subturns>
  [ 63] getparam 1 .............................. <i_iSubturn>
  [ 65] pusharglist 2 ........................... <m_ar_subturns, i_iSubturn>
  [ 67] objcall 99 .............................. <m_ar_subturns[i_iSubturn]>
  [ 69] getparam 2 .............................. <i_rElement>
  [ 71] pusharglistnoret 2 ...................... <m_ar_subturns[i_iSubturn], i_rElement>
  [ 73] objcall 385 ............................. m_ar_subturns[i_iSubturn].append(i_rElement)
  [ 76] ret
end

on SetNumber me, i_iNumber
  [  0] getparam 1 .............................. <i_iNumber>
  [  2] setprop 678 ............................. m_iNumber = i_iNumber
  [  5] ret
end

on SetChecksum me, i_iChecksum
  [  0] getparam 1 .............................. <i_iChecksum>
  [  2] setprop 680 ............................. m_iChecksum = i_iChecksum
  [  5] ret
end

on GetSubTurn me, i_iSubturn
  [  0] getparam 1 .............................. <i_iSubturn>
  [  2] getprop 677 ............................. <m_ar_subturns>
  [  5] getobjprop 143 .......................... <m_ar_subturns.count>
  [  7] gt ...................................... <i_iSubturn > m_ar_subturns.count>
  [  8] getparam 1 .............................. <i_iSubturn>
  [ 10] pushint8 1 .............................. <1>
  [ 12] lt ...................................... <i_iSubturn < 1>
  [ 13] or ...................................... <(i_iSubturn > m_ar_subturns.count) or (i_iSubturn < 1)>
  [ 14] jmpifz [ 37] ............................ if (i_iSubturn > m_ar_subturns.count) or (i_iSubturn < 1) then
  [ 17] pushcons 0 .............................. <"MGEngine : Requested subturn ">
  [ 19] getparam 1 .............................. <i_iSubturn>
  [ 21] joinstr ................................. <"MGEngine : Requested subturn " & i_iSubturn>
  [ 22] pushcons 1 .............................. <" that does not exist">
  [ 24] joinstr ................................. <"MGEngine : Requested subturn " & i_iSubturn & " that does not exist">
  [ 25] pusharglistnoret 1 ...................... <"MGEngine : Requested subturn " & i_iSubturn & " that does not exist">
  [ 27] extcall 470 ............................. put "MGEngine : Requested subturn " & i_iSubturn & " that does not exist"
  [ 30] pusharglist 0 ........................... <[]>
  [ 32] pushlist ................................ <[]>
  [ 33] pusharglistnoret 1 ...................... <[]>
  [ 35] extcall 53 .............................. return []
  [ 37] getprop 677 ............................. <m_ar_subturns>
  [ 40] getparam 1 .............................. <i_iSubturn>
  [ 42] pusharglist 2 ........................... <m_ar_subturns, i_iSubturn>
  [ 44] objcall 99 .............................. <m_ar_subturns[i_iSubturn]>
  [ 46] pusharglistnoret 1 ...................... <m_ar_subturns[i_iSubturn]>
  [ 48] extcall 53 .............................. return m_ar_subturns[i_iSubturn]
  [ 50] ret
end

on GetNSubTurns me
  [  0] getprop 677 ............................. <m_ar_subturns>
  [  3] getobjprop 143 .......................... <m_ar_subturns.count>
  [  5] pusharglistnoret 1 ...................... <m_ar_subturns.count>
  [  7] extcall 53 .............................. return m_ar_subturns.count
  [  9] ret
end

on GetNumber me
  [  0] getprop 678 ............................. <m_iNumber>
  [  3] pusharglistnoret 1 ...................... <m_iNumber>
  [  5] extcall 53 .............................. return m_iNumber
  [  7] ret
end

on GetCheckSum me
  [  0] getprop 680 ............................. <m_iChecksum>
  [  3] pusharglistnoret 1 ...................... <m_iChecksum>
  [  5] extcall 53 .............................. return m_iChecksum
  [  7] ret
end

on GetTested me
  [  0] getprop 679 ............................. <m_bTested>
  [  3] pusharglistnoret 1 ...................... <m_bTested>
  [  5] extcall 53 .............................. return m_bTested
  [  7] ret
end

on SetTested me, a_bVal
  [  0] getparam 1 .............................. <a_bVal>
  [  2] setprop 679 ............................. m_bTested = a_bVal
  [  5] ret
end

on GetSubTurns me
  [  0] getprop 677 ............................. <m_ar_subturns>
  [  3] pusharglistnoret 1 ...................... <m_ar_subturns>
  [  5] extcall 53 .............................. return m_ar_subturns
  [  7] ret
end

on dump me
  [  0] pushcons 2 .............................. <"* Turn dump:">
  [  2] getprop 678 ............................. <m_iNumber>
  [  5] joinpadstr .............................. <"* Turn dump:" && m_iNumber>
  [  6] pushcons 3 .............................. <"events:">
  [  8] joinpadstr .............................. <"* Turn dump:" && m_iNumber && "events:">
  [  9] getprop 677 ............................. <m_ar_subturns>
  [ 12] joinpadstr .............................. <"* Turn dump:" && m_iNumber && "events:" && m_ar_subturns>
  [ 13] pusharglistnoret 1 ...................... <"* Turn dump:" && m_iNumber && "events:" && m_ar_subturns>
  [ 15] extcall 470 ............................. put "* Turn dump:" && m_iNumber && "events:" && m_ar_subturns
  [ 18] ret
end
