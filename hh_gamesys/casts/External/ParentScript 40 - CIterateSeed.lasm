on TestSeed this, a_iSeed
  [  0] pushint8 1 .............................. <1>
  [  2] setlocal 0
  [  4] getlocal 0
  [  6] pushint16 1000 .......................... <1000>
  [  9] lteq
  [ 10] jmpifz [ 50] ............................ repeat with i = 1 to 1000
  [ 13] getparam 0 .............................. <this>
  [ 15] getparam 1 .............................. <a_iSeed>
  [ 17] pusharglist 2 ........................... <this, a_iSeed>
  [ 19] objcall 636 ............................. <this.IntToBits(a_iSeed)>
  [ 22] getparam 1 .............................. <a_iSeed>
  [ 24] joinpadstr .............................. <this.IntToBits(a_iSeed) && a_iSeed>
  [ 25] pusharglistnoret 1 ...................... <this.IntToBits(a_iSeed) && a_iSeed>
  [ 27] extcall 470 ............................. put this.IntToBits(a_iSeed) && a_iSeed
  [ 30] getparam 0 .............................. <this>
  [ 32] getparam 1 .............................. <a_iSeed>
  [ 34] pusharglist 2 ........................... <this, a_iSeed>
  [ 36] objcall 598 ............................. <this.IterateSeed(a_iSeed)>
  [ 39] setparam 1 .............................. a_iSeed = this.IterateSeed(a_iSeed)
  [ 41] pushint8 1
  [ 43] getlocal 0
  [ 45] add
  [ 46] setlocal 0
  [ 48] endrepeat [  4]
  [ 50] ret
end

on IterateSeed this, a_iSeed
  [  0] pushzero ................................ <0>
  [  1] setlocal 0 .............................. t_iSeed2 = 0
  [  3] getparam 1 .............................. <a_iSeed>
  [  5] pushzero ................................ <0>
  [  6] eq ...................................... <a_iSeed = 0>
  [  7] jmpifz [ 15] ............................ if a_iSeed = 0 then
  [ 10] pushint8 1 .............................. <1>
  [ 12] inv ..................................... <-1>
  [ 13] setparam 1 .............................. a_iSeed = -1
  [ 15] getparam 0 .............................. <this>
  [ 17] getparam 1 .............................. <a_iSeed>
  [ 19] pushint8 13 ............................. <13>
  [ 21] pusharglist 3 ........................... <this, a_iSeed, 13>
  [ 23] objcall 633 ............................. <this.BitLeft(a_iSeed, 13)>
  [ 26] setlocal 0 .............................. t_iSeed2 = this.BitLeft(a_iSeed, 13)
  [ 28] getparam 1 .............................. <a_iSeed>
  [ 30] getlocal 0 .............................. <t_iSeed2>
  [ 32] pusharglist 2 ........................... <a_iSeed, t_iSeed2>
  [ 34] extcall 639 ............................. <bitXor(a_iSeed, t_iSeed2)>
  [ 37] setparam 1 .............................. a_iSeed = bitXor(a_iSeed, t_iSeed2)
  [ 39] getparam 0 .............................. <this>
  [ 41] getparam 1 .............................. <a_iSeed>
  [ 43] pushint8 17 ............................. <17>
  [ 45] pusharglist 3 ........................... <this, a_iSeed, 17>
  [ 47] objcall 634 ............................. <this.BitRight(a_iSeed, 17)>
  [ 50] setlocal 0 .............................. t_iSeed2 = this.BitRight(a_iSeed, 17)
  [ 52] getparam 1 .............................. <a_iSeed>
  [ 54] getlocal 0 .............................. <t_iSeed2>
  [ 56] pusharglist 2 ........................... <a_iSeed, t_iSeed2>
  [ 58] extcall 639 ............................. <bitXor(a_iSeed, t_iSeed2)>
  [ 61] setparam 1 .............................. a_iSeed = bitXor(a_iSeed, t_iSeed2)
  [ 63] getparam 0 .............................. <this>
  [ 65] getparam 1 .............................. <a_iSeed>
  [ 67] pushint8 5 .............................. <5>
  [ 69] pusharglist 3 ........................... <this, a_iSeed, 5>
  [ 71] objcall 633 ............................. <this.BitLeft(a_iSeed, 5)>
  [ 74] setlocal 0 .............................. t_iSeed2 = this.BitLeft(a_iSeed, 5)
  [ 76] getparam 1 .............................. <a_iSeed>
  [ 78] getlocal 0 .............................. <t_iSeed2>
  [ 80] pusharglist 2 ........................... <a_iSeed, t_iSeed2>
  [ 82] extcall 639 ............................. <bitXor(a_iSeed, t_iSeed2)>
  [ 85] setparam 1 .............................. a_iSeed = bitXor(a_iSeed, t_iSeed2)
  [ 87] getparam 1 .............................. <a_iSeed>
  [ 89] pusharglistnoret 1 ...................... <a_iSeed>
  [ 91] extcall 53 .............................. return a_iSeed
  [ 93] ret
end

on getRandomNumber this, iteratedSeed, maxValue
  [  0] getparam 1 .............................. <iteratedSeed>
  [  2] pushzero ................................ <0>
  [  3] lt ...................................... <iteratedSeed < 0>
  [  4] jmpifz [ 24] ............................ if iteratedSeed < 0 then / else
  [  7] getparam 1 .............................. <iteratedSeed>
  [  9] pusharglist 1 ........................... <iteratedSeed>
  [ 11] extcall 268 ............................. <abs(iteratedSeed)>
  [ 14] getparam 2 .............................. <maxValue>
  [ 16] mod ..................................... <abs(iteratedSeed) mod maxValue>
  [ 17] pusharglistnoret 1 ...................... <abs(iteratedSeed) mod maxValue>
  [ 19] extcall 53 .............................. return abs(iteratedSeed) mod maxValue
  [ 21] jmp [ 33]
  [ 24] getparam 1 .............................. <iteratedSeed>
  [ 26] getparam 2 .............................. <maxValue>
  [ 28] mod ..................................... <iteratedSeed mod maxValue>
  [ 29] pusharglistnoret 1 ...................... <iteratedSeed mod maxValue>
  [ 31] extcall 53 .............................. return iteratedSeed mod maxValue
  [ 33] ret
end

on BitLeft this, n, s
  [  0] getparam 1 .............................. <n>
  [  2] pushint8 2 .............................. <2>
  [  4] getparam 2 .............................. <s>
  [  6] pushint8 32 ............................. <32>
  [  8] mod ..................................... <s mod 32>
  [  9] pusharglist 2 ........................... <2, s mod 32>
  [ 11] extcall 643 ............................. <power(2, s mod 32)>
  [ 14] mul ..................................... <n * power(2, s mod 32)>
  [ 15] pusharglist 1 ........................... <n * power(2, s mod 32)>
  [ 17] extcall 277 ............................. <integer(n * power(2, s mod 32))>
  [ 20] pusharglistnoret 1 ...................... <integer(n * power(2, s mod 32))>
  [ 22] extcall 53 .............................. return integer(n * power(2, s mod 32))
  [ 24] ret
end

on BitRight this, n, s
  [  0] getparam 2 .............................. <s>
  [  2] pushint8 32 ............................. <32>
  [  4] mod ..................................... <s mod 32>
  [  5] setparam 2 .............................. s = s mod 32
  [  7] getparam 1 .............................. <n>
  [  9] pushzero ................................ <0>
  [ 10] gt ...................................... <n > 0>
  [ 11] jmpifz [ 39] ............................ if n > 0 then / else
  [ 14] getparam 1 .............................. <n>
  [ 16] pushint8 2 .............................. <2>
  [ 18] getparam 2 .............................. <s>
  [ 20] pusharglist 2 ........................... <2, s>
  [ 22] extcall 643 ............................. <power(2, s)>
  [ 25] div ..................................... <n / power(2, s)>
  [ 26] pushzero ................................ <0>
  [ 27] pusharglist 2 ........................... <n / power(2, s), 0>
  [ 29] extcall 646 ............................. <bitOr(n / power(2, s), 0)>
  [ 32] pusharglistnoret 1 ...................... <bitOr(n / power(2, s), 0)>
  [ 34] extcall 53 .............................. return bitOr(n / power(2, s), 0)
  [ 36] jmp [ 88]
  [ 39] getparam 1 .............................. <n>
  [ 41] pushint8 2 .............................. <2>
  [ 43] getparam 2 .............................. <s>
  [ 45] pusharglist 2 ........................... <2, s>
  [ 47] extcall 643 ............................. <power(2, s)>
  [ 50] div ..................................... <n / power(2, s)>
  [ 51] setlocal 0 .............................. f = n / power(2, s)
  [ 53] getlocal 0 .............................. <f>
  [ 55] pusharglist 1 ........................... <f>
  [ 57] extcall 277 ............................. <integer(f)>
  [ 60] setlocal 1 .............................. i = integer(f)
  [ 62] getlocal 1 .............................. <i>
  [ 64] getlocal 0 .............................. <f>
  [ 66] gt ...................................... <i > f>
  [ 67] jmpifz [ 82] ............................ if i > f then / else
  [ 70] getlocal 1 .............................. <i>
  [ 72] pushint8 1 .............................. <1>
  [ 74] sub ..................................... <i - 1>
  [ 75] pusharglistnoret 1 ...................... <i - 1>
  [ 77] extcall 53 .............................. return i - 1
  [ 79] jmp [ 88]
  [ 82] getlocal 1 .............................. <i>
  [ 84] pusharglistnoret 1 ...................... <i>
  [ 86] extcall 53 .............................. return i
  [ 88] ret
end

on BitRightZF this, n, s
  [  0] getparam 2 .............................. <s>
  [  2] pushint8 32 ............................. <32>
  [  4] mod ..................................... <s mod 32>
  [  5] setparam 2 .............................. s = s mod 32
  [  7] getparam 1 .............................. <n>
  [  9] pushzero ................................ <0>
  [ 10] lt ...................................... <n < 0>
  [ 11] jmpifz [ 92] ............................ if n < 0 then / else
  [ 14] getparam 2 .............................. <s>
  [ 16] pushzero ................................ <0>
  [ 17] eq ...................................... <s = 0>
  [ 18] jmpifz [ 47] ............................ if s = 0 then / else
  [ 21] pusharglist 0 ........................... <>
  [ 23] thebuiltin 648 .......................... <the maxinteger>
  [ 26] pusharglist 1 ........................... <the maxinteger>
  [ 28] extcall 449 ............................. <float(the maxinteger)>
  [ 31] pushint8 2 .............................. <2>
  [ 33] mul ..................................... <float(the maxinteger) * 2>
  [ 34] pushint8 2 .............................. <2>
  [ 36] add ..................................... <(float(the maxinteger) * 2) + 2>
  [ 37] getparam 1 .............................. <n>
  [ 39] add ..................................... <(float(the maxinteger) * 2) + 2 + n>
  [ 40] pusharglistnoret 1 ...................... <(float(the maxinteger) * 2) + 2 + n>
  [ 42] extcall 53 .............................. return (float(the maxinteger) * 2) + 2 + n
  [ 44] jmp [ 89]
  [ 47] getparam 1 .............................. <n>
  [ 49] pusharglist 0 ........................... <>
  [ 51] thebuiltin 648 .......................... <the maxinteger>
  [ 54] add ..................................... <n + the maxinteger>
  [ 55] pushint8 1 .............................. <1>
  [ 57] add ..................................... <n + the maxinteger + 1>
  [ 58] pushint8 2 .............................. <2>
  [ 60] getparam 2 .............................. <s>
  [ 62] pusharglist 2 ........................... <2, s>
  [ 64] extcall 643 ............................. <power(2, s)>
  [ 67] div ..................................... <(n + the maxinteger + 1) / power(2, s)>
  [ 68] pushint8 2 .............................. <2>
  [ 70] pushint8 31 ............................. <31>
  [ 72] getparam 2 .............................. <s>
  [ 74] sub ..................................... <31 - s>
  [ 75] pusharglist 2 ........................... <2, 31 - s>
  [ 77] extcall 643 ............................. <power(2, 31 - s)>
  [ 80] pusharglist 2 ........................... <(n + the maxinteger + 1) / power(2, s), power(2, 31 - s)>
  [ 82] extcall 646 ............................. <bitOr((n + the maxinteger + 1) / power(2, s), power(2, 31 - s))>
  [ 85] pusharglistnoret 1 ...................... <bitOr((n + the maxinteger + 1) / power(2, s), power(2, 31 - s))>
  [ 87] extcall 53 .............................. return bitOr((n + the maxinteger + 1) / power(2, s), power(2, 31 - s))
  [ 89] jmp [114]
  [ 92] getparam 1 .............................. <n>
  [ 94] pushint8 2 .............................. <2>
  [ 96] getparam 2 .............................. <s>
  [ 98] pusharglist 2 ........................... <2, s>
  [100] extcall 643 ............................. <power(2, s)>
  [103] div ..................................... <n / power(2, s)>
  [104] pushzero ................................ <0>
  [105] pusharglist 2 ........................... <n / power(2, s), 0>
  [107] extcall 646 ............................. <bitOr(n / power(2, s), 0)>
  [110] pusharglistnoret 1 ...................... <bitOr(n / power(2, s), 0)>
  [112] extcall 53 .............................. return bitOr(n / power(2, s), 0)
  [114] ret
end

on IntToBits this, a_iInput
  [  0] pushcons 0 .............................. <"01">
  [  2] setlocal 0 .............................. tDigits = "01"
  [  4] getparam 1 .............................. <a_iInput>
  [  6] pushzero ................................ <0>
  [  7] gt ...................................... <a_iInput > 0>
  [  8] jmpifz [ 47] ............................ repeat while a_iInput > 0
  [ 11] getparam 1 .............................. <a_iInput>
  [ 13] pushint8 2 .............................. <2>
  [ 15] mod ..................................... <a_iInput mod 2>
  [ 16] setlocal 1 .............................. tD = a_iInput mod 2
  [ 18] getparam 1 .............................. <a_iInput>
  [ 20] pushint8 2 .............................. <2>
  [ 22] div ..................................... <a_iInput / 2>
  [ 23] setparam 1 .............................. a_iInput = a_iInput / 2
  [ 25] getlocal 0 .............................. <tDigits>
  [ 27] pushsymb 431 ............................ <#char>
  [ 30] getlocal 1 .............................. <tD>
  [ 32] pushint8 1 .............................. <1>
  [ 34] add ..................................... <tD + 1>
  [ 35] pusharglist 3 ........................... <tDigits, #char, tD + 1>
  [ 37] objcall 290 ............................. <tDigits.char[tD + 1]>
  [ 40] getlocal 2 .............................. <tHexstr>
  [ 42] joinstr ................................. <tDigits.char[tD + 1] & tHexstr>
  [ 43] setlocal 2 .............................. tHexstr = tDigits.char[tD + 1] & tHexstr
  [ 45] endrepeat [  4]
  [ 47] pushint8 1 .............................. <1>
  [ 49] jmpifz [ 76] ............................ repeat while 1
  [ 52] getlocal 2 .............................. <tHexstr>
  [ 54] pusharglist 1 ........................... <tHexstr>
  [ 56] extcall 393 ............................. <length(tHexstr)>
  [ 59] pushint8 32 ............................. <32>
  [ 61] eq ...................................... <length(tHexstr) = 32>
  [ 62] jmpifz [ 68] ............................ if length(tHexstr) = 32 then
  [ 65] jmp [ 76] ............................... exit repeat
  [ 68] pushcons 1 .............................. <"0">
  [ 70] pushint8 2 .............................. <2>
  [ 72] put 53 .................................. put "0" before tHexstr
  [ 74] endrepeat [ 47]
  [ 76] getlocal 2 .............................. <tHexstr>
  [ 78] pusharglistnoret 1 ...................... <tHexstr>
  [ 80] extcall 53 .............................. return tHexstr
  [ 82] ret
end
