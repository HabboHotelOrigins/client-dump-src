property pSquareRoot

on construct me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 53 .............................. return 1
  [  6] ret
end

on deconstruct me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 53 .............................. return 1
  [  6] ret
end

on testForObjectToObjectCollision me, tThisObject, tOtherObject, tDump
  [  0] getparam 1 .............................. <tThisObject>
  [  2] getparam 2 .............................. <tOtherObject>
  [  4] eq ...................................... <tThisObject = tOtherObject>
  [  5] jmpifz [ 13] ............................ if tThisObject = tOtherObject then
  [  8] pushzero ................................ <0>
  [  9] pusharglistnoret 1 ...................... <0>
  [ 11] extcall 53 .............................. return 0
  [ 13] getparam 2 .............................. <tOtherObject>
  [ 15] pushsymb 494 ............................ <#gameobject_collisionshape_type>
  [ 18] pusharglist 2 ........................... <tOtherObject, #gameobject_collisionshape_type>
  [ 20] objcall 32 .............................. <tOtherObject.getGameObjectProperty(#gameobject_collisionshape_type)>
  [ 22] peek 0 .................................. case tOtherObject.getGameObjectProperty(#gameobject_collisionshape_type) of
  [ 24] pushsymb 192 ............................ <#none>
  [ 26] eq
  [ 27] jmpifz [ 40] ............................ (case) #none:
  [ 30] pop 1
  [ 32] pushzero ................................ <0>
  [ 33] pusharglistnoret 1 ...................... <0>
  [ 35] extcall 53 .............................. return 0
  [ 37] jmp [440]
  [ 40] peek 0
  [ 42] pushsymb 495 ............................ <#point>
  [ 45] eq
  [ 46] jmpifz [150] ............................ (case) #point:
  [ 49] getparam 1 .............................. <tThisObject>
  [ 51] pushsymb 494 ............................ <#gameobject_collisionshape_type>
  [ 54] pusharglist 2 ........................... <tThisObject, #gameobject_collisionshape_type>
  [ 56] objcall 32 .............................. <tThisObject.getGameObjectProperty(#gameobject_collisionshape_type)>
  [ 58] peek 0 .................................. case tThisObject.getGameObjectProperty(#gameobject_collisionshape_type) of
  [ 60] pushsymb 192 ............................ <#none>
  [ 62] eq
  [ 63] jmpifz [ 76] ............................ (case) #none:
  [ 66] pop 2
  [ 68] pushzero ................................ <0>
  [ 69] pusharglistnoret 1 ...................... <0>
  [ 71] extcall 53 .............................. return 0
  [ 73] jmp [145]
  [ 76] peek 0
  [ 78] pushsymb 495 ............................ <#point>
  [ 81] eq
  [ 82] jmpifz [ 95] ............................ (case) #point:
  [ 85] pop 2
  [ 87] pushzero ................................ <0>
  [ 88] pusharglistnoret 1 ...................... <0>
  [ 90] extcall 53 .............................. return 0
  [ 92] jmp [145]
  [ 95] peek 0
  [ 97] pushsymb 496 ............................ <#circle>
  [100] eq
  [101] jmpifz [124] ............................ (case) #circle:
  [104] pop 2
  [106] getparam 0 .............................. <me>
  [108] getparam 2 .............................. <tOtherObject>
  [110] getparam 1 .............................. <tThisObject>
  [112] pusharglist 3 ........................... <me, tOtherObject, tThisObject>
  [114] objcall 491 ............................. <me.TestPointToCircleCollision(tOtherObject, tThisObject)>
  [117] pusharglistnoret 1 ...................... <me.TestPointToCircleCollision(tOtherObject, tThisObject)>
  [119] extcall 53 .............................. return me.TestPointToCircleCollision(tOtherObject, tThisObject)
  [121] jmp [145]
  [124] peek 0
  [126] pushsymb 497 ............................ <#triplecircle>
  [129] eq
  [130] jmpifz [136] ............................ (case) #triplecircle:
  [133] jmp [145]
  [136] peek 0
  [138] pushsymb 498 ............................ <#box>
  [141] eq
  [142] jmpifz [145] ............................ (case) #box:
  [145] pop 1 ................................... end case
  [147] jmp [440]
  [150] peek 0
  [152] pushsymb 496 ............................ <#circle>
  [155] eq
  [156] jmpifz [279] ............................ (case) #circle:
  [159] getparam 1 .............................. <tThisObject>
  [161] pushsymb 494 ............................ <#gameobject_collisionshape_type>
  [164] pusharglist 2 ........................... <tThisObject, #gameobject_collisionshape_type>
  [166] objcall 32 .............................. <tThisObject.getGameObjectProperty(#gameobject_collisionshape_type)>
  [168] peek 0 .................................. case tThisObject.getGameObjectProperty(#gameobject_collisionshape_type) of
  [170] pushsymb 192 ............................ <#none>
  [172] eq
  [173] jmpifz [186] ............................ (case) #none:
  [176] pop 2
  [178] pushzero ................................ <0>
  [179] pusharglistnoret 1 ...................... <0>
  [181] extcall 53 .............................. return 0
  [183] jmp [274]
  [186] peek 0
  [188] pushsymb 495 ............................ <#point>
  [191] eq
  [192] jmpifz [215] ............................ (case) #point:
  [195] pop 2
  [197] getparam 0 .............................. <me>
  [199] getparam 1 .............................. <tThisObject>
  [201] getparam 2 .............................. <tOtherObject>
  [203] pusharglist 3 ........................... <me, tThisObject, tOtherObject>
  [205] objcall 491 ............................. <me.TestPointToCircleCollision(tThisObject, tOtherObject)>
  [208] pusharglistnoret 1 ...................... <me.TestPointToCircleCollision(tThisObject, tOtherObject)>
  [210] extcall 53 .............................. return me.TestPointToCircleCollision(tThisObject, tOtherObject)
  [212] jmp [274]
  [215] peek 0
  [217] pushsymb 496 ............................ <#circle>
  [220] eq
  [221] jmpifz [246] ............................ (case) #circle:
  [224] pop 2
  [226] getparam 0 .............................. <me>
  [228] getparam 1 .............................. <tThisObject>
  [230] getparam 2 .............................. <tOtherObject>
  [232] getparam 3 .............................. <tDump>
  [234] pusharglist 4 ........................... <me, tThisObject, tOtherObject, tDump>
  [236] objcall 492 ............................. <me.TestCircleToCircleCollision(tThisObject, tOtherObject, tDump)>
  [239] pusharglistnoret 1 ...................... <me.TestCircleToCircleCollision(tThisObject, tOtherObject, tDump)>
  [241] extcall 53 .............................. return me.TestCircleToCircleCollision(tThisObject, tOtherObject, tDump)
  [243] jmp [274]
  [246] peek 0
  [248] pushsymb 497 ............................ <#triplecircle>
  [251] eq
  [252] jmpifz [258] ............................ (case) #triplecircle:
  [255] jmp [274]
  [258] peek 0
  [260] pushsymb 498 ............................ <#box>
  [263] eq
  [264] jmpifz [274] ............................ (case) #box:
  [267] pop 2
  [269] pushzero ................................ <0>
  [270] pusharglistnoret 1 ...................... <0>
  [272] extcall 53 .............................. return 0
  [274] pop 1 ................................... end case
  [276] jmp [440]
  [279] peek 0
  [281] pushsymb 497 ............................ <#triplecircle>
  [284] eq
  [285] jmpifz [336] ............................ (case) #triplecircle:
  [288] getparam 1 .............................. <tThisObject>
  [290] pushsymb 494 ............................ <#gameobject_collisionshape_type>
  [293] pusharglist 2 ........................... <tThisObject, #gameobject_collisionshape_type>
  [295] objcall 32 .............................. <tThisObject.getGameObjectProperty(#gameobject_collisionshape_type)>
  [297] peek 0 .................................. case tThisObject.getGameObjectProperty(#gameobject_collisionshape_type) of
  [299] pushsymb 192 ............................ <#none>
  [301] eq
  [302] jmpifz [315] ............................ (case) #none:
  [305] pop 2
  [307] pushzero ................................ <0>
  [308] pusharglistnoret 1 ...................... <0>
  [310] extcall 53 .............................. return 0
  [312] jmp [331]
  [315] peek 0
  [317] pushsymb 498 ............................ <#box>
  [320] eq
  [321] jmpifz [331] ............................ (case) #box:
  [324] pop 2
  [326] pushzero ................................ <0>
  [327] pusharglistnoret 1 ...................... <0>
  [329] extcall 53 .............................. return 0
  [331] pop 1 ................................... end case
  [333] jmp [440]
  [336] peek 0
  [338] pushsymb 498 ............................ <#box>
  [341] eq
  [342] jmpifz [440] ............................ (case) #box:
  [345] getparam 1 .............................. <tThisObject>
  [347] pushsymb 494 ............................ <#gameobject_collisionshape_type>
  [350] pusharglist 2 ........................... <tThisObject, #gameobject_collisionshape_type>
  [352] objcall 32 .............................. <tThisObject.getGameObjectProperty(#gameobject_collisionshape_type)>
  [354] peek 0 .................................. case tThisObject.getGameObjectProperty(#gameobject_collisionshape_type) of
  [356] pushsymb 192 ............................ <#none>
  [358] eq
  [359] jmpifz [372] ............................ (case) #none:
  [362] pop 2
  [364] pushzero ................................ <0>
  [365] pusharglistnoret 1 ...................... <0>
  [367] extcall 53 .............................. return 0
  [369] jmp [438]
  [372] peek 0
  [374] pushsymb 495 ............................ <#point>
  [377] eq
  [378] jmpifz [384] ............................ (case) #point:
  [381] jmp [438]
  [384] peek 0
  [386] pushsymb 496 ............................ <#circle>
  [389] eq
  [390] jmpifz [403] ............................ (case) #circle:
  [393] pop 2
  [395] pushzero ................................ <0>
  [396] pusharglistnoret 1 ...................... <0>
  [398] extcall 53 .............................. return 0
  [400] jmp [438]
  [403] peek 0
  [405] pushsymb 497 ............................ <#triplecircle>
  [408] eq
  [409] jmpifz [422] ............................ (case) #triplecircle:
  [412] pop 2
  [414] pushzero ................................ <0>
  [415] pusharglistnoret 1 ...................... <0>
  [417] extcall 53 .............................. return 0
  [419] jmp [438]
  [422] peek 0
  [424] pushsymb 498 ............................ <#box>
  [427] eq
  [428] jmpifz [438] ............................ (case) #box:
  [431] pop 2
  [433] pushzero ................................ <0>
  [434] pusharglistnoret 1 ...................... <0>
  [436] extcall 53 .............................. return 0
  [438] pop 1 ................................... end case
  [440] pop 1 ................................... end case
  [442] pushzero ................................ <0>
  [443] pusharglistnoret 1 ...................... <0>
  [445] extcall 53 .............................. return 0
  [447] ret
end

on TestPointToCircleCollision me, tThisObject, tOtherObject
  [  0] getparam 2 .............................. <tOtherObject>
  [  2] pusharglist 1 ........................... <tOtherObject>
  [  4] objcall 502 ............................. <tOtherObject.getLocation()>
  [  7] getobjprop 395 .......................... <tOtherObject.getLocation().x>
  [ 10] getparam 1 .............................. <tThisObject>
  [ 12] pusharglist 1 ........................... <tThisObject>
  [ 14] objcall 502 ............................. <tThisObject.getLocation()>
  [ 17] getobjprop 395 .......................... <tThisObject.getLocation().x>
  [ 20] sub ..................................... <tOtherObject.getLocation().x - tThisObject.getLocation().x>
  [ 21] setlocal 0 .............................. distanceX = tOtherObject.getLocation().x - tThisObject.getLocation().x
  [ 23] getlocal 0 .............................. <distanceX>
  [ 25] pushzero ................................ <0>
  [ 26] lt ...................................... <distanceX < 0>
  [ 27] jmpifz [ 35] ............................ if distanceX < 0 then
  [ 30] getlocal 0 .............................. <distanceX>
  [ 32] inv ..................................... <-distanceX>
  [ 33] setlocal 0 .............................. distanceX = -distanceX
  [ 35] getparam 2 .............................. <tOtherObject>
  [ 37] pusharglist 1 ........................... <tOtherObject>
  [ 39] objcall 502 ............................. <tOtherObject.getLocation()>
  [ 42] getobjprop 396 .......................... <tOtherObject.getLocation().y>
  [ 45] getparam 1 .............................. <tThisObject>
  [ 47] pusharglist 1 ........................... <tThisObject>
  [ 49] objcall 502 ............................. <tThisObject.getLocation()>
  [ 52] getobjprop 396 .......................... <tThisObject.getLocation().y>
  [ 55] sub ..................................... <tOtherObject.getLocation().y - tThisObject.getLocation().y>
  [ 56] setlocal 1 .............................. distanceY = tOtherObject.getLocation().y - tThisObject.getLocation().y
  [ 58] getlocal 1 .............................. <distanceY>
  [ 60] pushzero ................................ <0>
  [ 61] lt ...................................... <distanceY < 0>
  [ 62] jmpifz [ 70] ............................ if distanceY < 0 then
  [ 65] getlocal 1 .............................. <distanceY>
  [ 67] inv ..................................... <-distanceY>
  [ 68] setlocal 1 .............................. distanceY = -distanceY
  [ 70] getlocal 0 .............................. <distanceX>
  [ 72] getlocal 0 .............................. <distanceX>
  [ 74] mul ..................................... <distanceX * distanceX>
  [ 75] getlocal 1 .............................. <distanceY>
  [ 77] getlocal 1 .............................. <distanceY>
  [ 79] mul ..................................... <distanceY * distanceY>
  [ 80] add ..................................... <(distanceX * distanceX) + (distanceY * distanceY)>
  [ 81] pusharglist 1 ........................... <(distanceX * distanceX) + (distanceY * distanceY)>
  [ 83] extcall 45 .............................. <sqrt((distanceX * distanceX) + (distanceY * distanceY))>
  [ 85] getparam 2 .............................. <tOtherObject>
  [ 87] pushsymb 503 ............................ <#gameobject_collisionshape_radius>
  [ 90] pusharglist 2 ........................... <tOtherObject, #gameobject_collisionshape_radius>
  [ 92] objcall 32 .............................. <tOtherObject.getGameObjectProperty(#gameobject_collisionshape_radius)>
  [ 94] lt ...................................... <sqrt((distanceX * distanceX) + (distanceY * distanceY)) < tOtherObject.getGameObjectProperty(#gameobject_collisionshape_radius)>
  [ 95] jmpifz [107] ............................ if sqrt((distanceX * distanceX) + (distanceY * distanceY)) < tOtherObject.getGameObjectProperty(#gameobject_collisionshape_radius) then / else
  [ 98] pushint8 1 .............................. <1>
  [100] pusharglistnoret 1 ...................... <1>
  [102] extcall 53 .............................. return 1
  [104] jmp [112]
  [107] pushzero ................................ <0>
  [108] pusharglistnoret 1 ...................... <0>
  [110] extcall 53 .............................. return 0
  [112] ret
end

on TestCircleToCircleCollision me, tThisObject, tOtherObject, tDump
  [  0] getparam 2 .............................. <tOtherObject>
  [  2] pusharglist 1 ........................... <tOtherObject>
  [  4] objcall 502 ............................. <tOtherObject.getLocation()>
  [  7] getobjprop 395 .......................... <tOtherObject.getLocation().x>
  [ 10] getparam 1 .............................. <tThisObject>
  [ 12] pusharglist 1 ........................... <tThisObject>
  [ 14] objcall 502 ............................. <tThisObject.getLocation()>
  [ 17] getobjprop 395 .......................... <tThisObject.getLocation().x>
  [ 20] sub ..................................... <tOtherObject.getLocation().x - tThisObject.getLocation().x>
  [ 21] setlocal 0 .............................. distanceX = tOtherObject.getLocation().x - tThisObject.getLocation().x
  [ 23] getlocal 0 .............................. <distanceX>
  [ 25] pushzero ................................ <0>
  [ 26] lt ...................................... <distanceX < 0>
  [ 27] jmpifz [ 35] ............................ if distanceX < 0 then
  [ 30] getlocal 0 .............................. <distanceX>
  [ 32] inv ..................................... <-distanceX>
  [ 33] setlocal 0 .............................. distanceX = -distanceX
  [ 35] getparam 2 .............................. <tOtherObject>
  [ 37] pusharglist 1 ........................... <tOtherObject>
  [ 39] objcall 502 ............................. <tOtherObject.getLocation()>
  [ 42] getobjprop 396 .......................... <tOtherObject.getLocation().y>
  [ 45] getparam 1 .............................. <tThisObject>
  [ 47] pusharglist 1 ........................... <tThisObject>
  [ 49] objcall 502 ............................. <tThisObject.getLocation()>
  [ 52] getobjprop 396 .......................... <tThisObject.getLocation().y>
  [ 55] sub ..................................... <tOtherObject.getLocation().y - tThisObject.getLocation().y>
  [ 56] setlocal 1 .............................. distanceY = tOtherObject.getLocation().y - tThisObject.getLocation().y
  [ 58] getlocal 1 .............................. <distanceY>
  [ 60] pushzero ................................ <0>
  [ 61] lt ...................................... <distanceY < 0>
  [ 62] jmpifz [ 70] ............................ if distanceY < 0 then
  [ 65] getlocal 1 .............................. <distanceY>
  [ 67] inv ..................................... <-distanceY>
  [ 68] setlocal 1 .............................. distanceY = -distanceY
  [ 70] getparam 2 .............................. <tOtherObject>
  [ 72] pushsymb 503 ............................ <#gameobject_collisionshape_radius>
  [ 75] pusharglist 2 ........................... <tOtherObject, #gameobject_collisionshape_radius>
  [ 77] objcall 32 .............................. <tOtherObject.getGameObjectProperty(#gameobject_collisionshape_radius)>
  [ 79] getparam 1 .............................. <tThisObject>
  [ 81] pushsymb 503 ............................ <#gameobject_collisionshape_radius>
  [ 84] pusharglist 2 ........................... <tThisObject, #gameobject_collisionshape_radius>
  [ 86] objcall 32 .............................. <tThisObject.getGameObjectProperty(#gameobject_collisionshape_radius)>
  [ 88] add ..................................... <tOtherObject.getGameObjectProperty(#gameobject_collisionshape_radius) + tThisObject.getGameObjectProperty(#gameobject_collisionshape_radius)>
  [ 89] setlocal 2 .............................. collisionDistance = tOtherObject.getGameObjectProperty(#gameobject_collisionshape_radius) + tThisObject.getGameObjectProperty(#gameobject_collisionshape_radius)
  [ 91] getlocal 1 .............................. <distanceY>
  [ 93] getlocal 2 .............................. <collisionDistance>
  [ 95] lt ...................................... <distanceY < collisionDistance>
  [ 96] getlocal 0 .............................. <distanceX>
  [ 98] getlocal 2 .............................. <collisionDistance>
  [100] lt ...................................... <distanceX < collisionDistance>
  [101] and ..................................... <(distanceY < collisionDistance) and (distanceX < collisionDistance)>
  [102] jmpifz [131] ............................ if (distanceY < collisionDistance) and (distanceX < collisionDistance) then
  [105] getlocal 0 .............................. <distanceX>
  [107] getlocal 0 .............................. <distanceX>
  [109] mul ..................................... <distanceX * distanceX>
  [110] getlocal 1 .............................. <distanceY>
  [112] getlocal 1 .............................. <distanceY>
  [114] mul ..................................... <distanceY * distanceY>
  [115] add ..................................... <(distanceX * distanceX) + (distanceY * distanceY)>
  [116] getlocal 2 .............................. <collisionDistance>
  [118] getlocal 2 .............................. <collisionDistance>
  [120] mul ..................................... <collisionDistance * collisionDistance>
  [121] lt ...................................... <((distanceX * distanceX) + (distanceY * distanceY)) < (collisionDistance * collisionDistance)>
  [122] jmpifz [131] ............................ if ((distanceX * distanceX) + (distanceY * distanceY)) < (collisionDistance * collisionDistance) then
  [125] pushint8 1 .............................. <1>
  [127] pusharglistnoret 1 ...................... <1>
  [129] extcall 53 .............................. return 1
  [131] pushzero ................................ <0>
  [132] pusharglistnoret 1 ...................... <0>
  [134] extcall 53 .............................. return 0
  [136] ret
end

on testDistance me, i_pos1X, i_pos1Y, i_pos2X, i_pos2Y, i_distance
  [  0] getparam 3 .............................. <i_pos2X>
  [  2] getparam 1 .............................. <i_pos1X>
  [  4] sub ..................................... <i_pos2X - i_pos1X>
  [  5] pusharglist 1 ........................... <i_pos2X - i_pos1X>
  [  7] extcall 268 ............................. <abs(i_pos2X - i_pos1X)>
  [ 10] setlocal 0 .............................. distX = abs(i_pos2X - i_pos1X)
  [ 12] getparam 4 .............................. <i_pos2Y>
  [ 14] getparam 2 .............................. <i_pos1Y>
  [ 16] sub ..................................... <i_pos2Y - i_pos1Y>
  [ 17] pusharglist 1 ........................... <i_pos2Y - i_pos1Y>
  [ 19] extcall 268 ............................. <abs(i_pos2Y - i_pos1Y)>
  [ 22] setlocal 1 .............................. distY = abs(i_pos2Y - i_pos1Y)
  [ 24] getlocal 0 .............................. <distX>
  [ 26] getparam 5 .............................. <i_distance>
  [ 28] gt ...................................... <distX > i_distance>
  [ 29] getlocal 1 .............................. <distY>
  [ 31] getparam 5 .............................. <i_distance>
  [ 33] gt ...................................... <distY > i_distance>
  [ 34] or ...................................... <(distX > i_distance) or (distY > i_distance)>
  [ 35] jmpifz [ 46] ............................ if (distX > i_distance) or (distY > i_distance) then / else
  [ 38] pushzero ................................ <0>
  [ 39] pusharglistnoret 1 ...................... <0>
  [ 41] extcall 53 .............................. return 0
  [ 43] jmp [ 72]
  [ 46] getlocal 0 .............................. <distX>
  [ 48] getlocal 0 .............................. <distX>
  [ 50] mul ..................................... <distX * distX>
  [ 51] getlocal 1 .............................. <distY>
  [ 53] getlocal 1 .............................. <distY>
  [ 55] mul ..................................... <distY * distY>
  [ 56] add ..................................... <(distX * distX) + (distY * distY)>
  [ 57] getparam 5 .............................. <i_distance>
  [ 59] getparam 5 .............................. <i_distance>
  [ 61] mul ..................................... <i_distance * i_distance>
  [ 62] lt ...................................... <((distX * distX) + (distY * distY)) < (i_distance * i_distance)>
  [ 63] jmpifz [ 72] ............................ if ((distX * distX) + (distY * distY)) < (i_distance * i_distance) then
  [ 66] pushint8 1 .............................. <1>
  [ 68] pusharglistnoret 1 ...................... <1>
  [ 70] extcall 53 .............................. return 1
  [ 72] pushzero ................................ <0>
  [ 73] pusharglistnoret 1 ...................... <0>
  [ 75] extcall 53 .............................. return 0
  [ 77] ret
end
