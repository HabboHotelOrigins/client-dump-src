on createImgFromTxt me
  [  0] getparam 0 .............................. <me>
  [  2] getchainedprop 34 ....................... <me.pTextMem>
  [  4] pushzero ................................ <0>
  [  5] pushzero ................................ <0>
  [  6] getparam 0 .............................. <me>
  [  8] getobjprop 36 ........................... <me.pOwnW>
  [ 10] getparam 0 .............................. <me>
  [ 12] getobjprop 37 ........................... <me.pOwnH>
  [ 14] pusharglist 4 ........................... <0, 0, me.pOwnW, me.pOwnH>
  [ 16] extcall 35 .............................. <rect(0, 0, me.pOwnW, me.pOwnH)>
  [ 18] setobjprop 35 ........................... me.pTextMem.rect = rect(0, 0, me.pOwnW, me.pOwnH)
  [ 20] getparam 0 .............................. <me>
  [ 22] pushsymb 39 ............................. <#pFontData>
  [ 24] pushsymb 40 ............................. <#fontStyle>
  [ 26] pusharglist 3 ........................... <me, #pFontData, #fontStyle>
  [ 28] objcall 41 .............................. <me.pFontData[#fontStyle]>
  [ 30] pusharglist 1 ........................... <me.pFontData[#fontStyle]>
  [ 32] extcall 38 .............................. <listp(me.pFontData[#fontStyle])>
  [ 34] not ..................................... <not listp(me.pFontData[#fontStyle])>
  [ 35] jmpifz [130] ............................ if not listp(me.pFontData[#fontStyle]) then
  [ 38] pusharglist 0 ........................... <[]>
  [ 40] pushlist ................................ <[]>
  [ 41] setlocal 0 .............................. tList = []
  [ 43] getmovieprop 42 ......................... <the itemDelimiter>
  [ 45] setlocal 1 .............................. tDelim = the itemDelimiter
  [ 47] pushcons 0 .............................. <",">
  [ 49] setmovieprop 42 ......................... the itemDelimiter = ","
  [ 51] pushint8 1 .............................. <1>
  [ 53] setlocal 2
  [ 55] getlocal 2
  [ 57] getparam 0 .............................. <me>
  [ 59] pushsymb 39 ............................. <#pFontData>
  [ 61] pushsymb 40 ............................. <#fontStyle>
  [ 63] pusharglist 3 ........................... <me, #pFontData, #fontStyle>
  [ 65] objcall 43 .............................. <me.pFontData[#fontStyle]>
  [ 67] pushsymb 44 ............................. <#item>
  [ 69] pusharglist 2 ........................... <me.pFontData[#fontStyle], #item>
  [ 71] objcall 45 .............................. <me.pFontData[#fontStyle].item.count>
  [ 73] lteq
  [ 74] jmpifz [114] ............................ repeat with i = 1 to me.pFontData[#fontStyle].item.count
  [ 77] getlocal 0 .............................. <tList>
  [ 79] getparam 0 .............................. <me>
  [ 81] pushsymb 39 ............................. <#pFontData>
  [ 83] pushsymb 40 ............................. <#fontStyle>
  [ 85] pusharglist 3 ........................... <me, #pFontData, #fontStyle>
  [ 87] objcall 43 .............................. <me.pFontData[#fontStyle]>
  [ 89] pushsymb 44 ............................. <#item>
  [ 91] getlocal 2 .............................. <i>
  [ 93] pusharglist 3 ........................... <me.pFontData[#fontStyle], #item, i>
  [ 95] objcall 41 .............................. <me.pFontData[#fontStyle].item[i]>
  [ 97] pusharglist 1 ........................... <me.pFontData[#fontStyle].item[i]>
  [ 99] extcall 46 .............................. <symbol(me.pFontData[#fontStyle].item[i])>
  [101] pusharglistnoret 2 ...................... <tList, symbol(me.pFontData[#fontStyle].item[i])>
  [103] objcall 47 .............................. tList.add(symbol(me.pFontData[#fontStyle].item[i]))
  [105] pushint8 1
  [107] getlocal 2
  [109] add
  [110] setlocal 2
  [112] endrepeat [ 55]
  [114] getlocal 1 .............................. <tDelim>
  [116] setmovieprop 42 ......................... the itemDelimiter = tDelim
  [118] getparam 0 .............................. <me>
  [120] pushsymb 39 ............................. <#pFontData>
  [122] pushsymb 40 ............................. <#fontStyle>
  [124] getlocal 0 .............................. <tList>
  [126] pusharglistnoret 4 ...................... <me, #pFontData, #fontStyle, tList>
  [128] objcall 48 .............................. me.pFontData[#fontStyle] = tList
  [130] getparam 0 .............................. <me>
  [132] pushsymb 39 ............................. <#pFontData>
  [134] pushsymb 49 ............................. <#text>
  [136] pusharglist 3 ........................... <me, #pFontData, #text>
  [138] objcall 41 .............................. <me.pFontData[#text]>
  [140] pusharglist 1 ........................... <me.pFontData[#text]>
  [142] extcall 10 .............................. <voidp(me.pFontData[#text])>
  [144] not ..................................... <not voidp(me.pFontData[#text])>
  [145] jmpifz [181] ............................ if not voidp(me.pFontData[#text]) then / else
  [148] getparam 0 .............................. <me>
  [150] getchainedprop 34 ....................... <me.pTextMem>
  [152] getparam 0 .............................. <me>
  [154] pushsymb 39 ............................. <#pFontData>
  [156] pushsymb 49 ............................. <#text>
  [158] pusharglist 3 ........................... <me, #pFontData, #text>
  [160] objcall 41 .............................. <me.pFontData[#text]>
  [162] setobjprop 49 ........................... me.pTextMem.text = me.pFontData[#text]
  [164] getparam 0 .............................. <me>
  [166] pushsymb 39 ............................. <#pFontData>
  [168] pushsymb 49 ............................. <#text>
  [170] pusharglist 0 ........................... <>
  [172] extcall 50 .............................. <VOID>
  [174] pusharglistnoret 4 ...................... <me, #pFontData, #text, VOID>
  [176] objcall 48 .............................. me.pFontData[#text] = VOID
  [178] jmp [378]
  [181] getparam 0 .............................. <me>
  [183] pushsymb 39 ............................. <#pFontData>
  [185] pushsymb 51 ............................. <#key>
  [187] pusharglist 3 ........................... <me, #pFontData, #key>
  [189] objcall 41 .............................. <me.pFontData[#key]>
  [191] pushcons 1 .............................. <EMPTY>
  [193] eq ...................................... <me.pFontData[#key] = EMPTY>
  [194] jmpifz [208] ............................ if me.pFontData[#key] = EMPTY then / else
  [197] getparam 0 .............................. <me>
  [199] getchainedprop 34 ....................... <me.pTextMem>
  [201] pushcons 1 .............................. <EMPTY>
  [203] setobjprop 49 ........................... me.pTextMem.text = EMPTY
  [205] jmp [378]
  [208] getparam 0 .............................. <me>
  [210] pushsymb 39 ............................. <#pFontData>
  [212] pushsymb 51 ............................. <#key>
  [214] pusharglist 3 ........................... <me, #pFontData, #key>
  [216] objcall 43 .............................. <me.pFontData[#key]>
  [218] pushsymb 52 ............................. <#char>
  [220] pushint8 1 .............................. <1>
  [222] pusharglist 3 ........................... <me.pFontData[#key], #char, 1>
  [224] objcall 41 .............................. <me.pFontData[#key].char[1]>
  [226] pushcons 2 .............................. <"%">
  [228] eq ...................................... <me.pFontData[#key].char[1] = "%">
  [229] jmpifz [297] ............................ if me.pFontData[#key].char[1] = "%" then / else
  [232] getparam 0 .............................. <me>
  [234] pushsymb 39 ............................. <#pFontData>
  [236] pushsymb 51 ............................. <#key>
  [238] pusharglist 3 ........................... <me, #pFontData, #key>
  [240] objcall 43 .............................. <me.pFontData[#key]>
  [242] pushsymb 52 ............................. <#char>
  [244] pushint8 2 .............................. <2>
  [246] getparam 0 .............................. <me>
  [248] pushsymb 39 ............................. <#pFontData>
  [250] pushsymb 51 ............................. <#key>
  [252] pusharglist 3 ........................... <me, #pFontData, #key>
  [254] objcall 41 .............................. <me.pFontData[#key]>
  [256] pusharglist 1 ........................... <me.pFontData[#key]>
  [258] extcall 53 .............................. <length(me.pFontData[#key])>
  [260] pusharglist 4 ........................... <me.pFontData[#key], #char, 2, length(me.pFontData[#key])>
  [262] objcall 41 .............................. <me.pFontData[#key].char[2..length(me.pFontData[#key])]>
  [264] pusharglist 1 ........................... <me.pFontData[#key].char[2..length(me.pFontData[#key])]>
  [266] extcall 46 .............................. <symbol(me.pFontData[#key].char[2..length(me.pFontData[#key])])>
  [268] setlocal 3 .............................. tKey = symbol(me.pFontData[#key].char[2..length(me.pFontData[#key])])
  [270] getparam 0 .............................. <me>
  [272] getchainedprop 34 ....................... <me.pTextMem>
  [274] getparam 0 .............................. <me>
  [276] getobjprop 55 ........................... <me.pMotherId>
  [278] pusharglist 1 ........................... <me.pMotherId>
  [280] extcall 27 .............................. <getObject(me.pMotherId)>
  [282] getlocal 3 .............................. <tKey>
  [284] pusharglist 2 ........................... <getObject(me.pMotherId), tKey>
  [286] objcall 56 .............................. <getObject(me.pMotherId).getProperty(tKey)>
  [288] pusharglist 1 ........................... <getObject(me.pMotherId).getProperty(tKey)>
  [290] extcall 54 .............................. <string(getObject(me.pMotherId).getProperty(tKey))>
  [292] setobjprop 49 ........................... me.pTextMem.text = string(getObject(me.pMotherId).getProperty(tKey))
  [294] jmp [378]
  [297] getparam 0 .............................. <me>
  [299] pushsymb 39 ............................. <#pFontData>
  [301] pushsymb 51 ............................. <#key>
  [303] pusharglist 3 ........................... <me, #pFontData, #key>
  [305] objcall 41 .............................. <me.pFontData[#key]>
  [307] pusharglist 1 ........................... <me.pFontData[#key]>
  [309] extcall 57 .............................. <textExists(me.pFontData[#key])>
  [311] jmpifz [341] ............................ if textExists(me.pFontData[#key]) then / else
  [314] getparam 0 .............................. <me>
  [316] getchainedprop 34 ....................... <me.pTextMem>
  [318] pusharglist 0 ........................... <>
  [320] extcall 58 .............................. <getTextManager()>
  [322] getparam 0 .............................. <me>
  [324] pushsymb 39 ............................. <#pFontData>
  [326] pushsymb 51 ............................. <#key>
  [328] pusharglist 3 ........................... <me, #pFontData, #key>
  [330] objcall 41 .............................. <me.pFontData[#key]>
  [332] pusharglist 2 ........................... <getTextManager(), me.pFontData[#key]>
  [334] objcall 29 .............................. <getTextManager().GET(me.pFontData[#key])>
  [336] setobjprop 49 ........................... me.pTextMem.text = getTextManager().GET(me.pFontData[#key])
  [338] jmp [378]
  [341] getparam 0 .............................. <me>
  [343] pushcons 3 .............................. <"Text not found:">
  [345] getparam 0 .............................. <me>
  [347] pushsymb 39 ............................. <#pFontData>
  [349] pushsymb 51 ............................. <#key>
  [351] pusharglist 3 ........................... <me, #pFontData, #key>
  [353] objcall 41 .............................. <me.pFontData[#key]>
  [355] joinpadstr .............................. <"Text not found:" && me.pFontData[#key]>
  [356] pushsymb 33 ............................. <#createImgFromTxt>
  [358] pusharglistnoret 3 ...................... <me, "Text not found:" && me.pFontData[#key], #createImgFromTxt>
  [360] extcall 11 .............................. error(me, "Text not found:" && me.pFontData[#key], #createImgFromTxt)
  [362] getparam 0 .............................. <me>
  [364] getchainedprop 34 ....................... <me.pTextMem>
  [366] getparam 0 .............................. <me>
  [368] pushsymb 39 ............................. <#pFontData>
  [370] pushsymb 51 ............................. <#key>
  [372] pusharglist 3 ........................... <me, #pFontData, #key>
  [374] objcall 41 .............................. <me.pFontData[#key]>
  [376] setobjprop 49 ........................... me.pTextMem.text = me.pFontData[#key]
  [378] getparam 0 .............................. <me>
  [380] pushsymb 39 ............................. <#pFontData>
  [382] pushsymb 49 ............................. <#text>
  [384] getparam 0 .............................. <me>
  [386] getchainedprop 34 ....................... <me.pTextMem>
  [388] getobjprop 49 ........................... <me.pTextMem.text>
  [390] pusharglistnoret 4 ...................... <me, #pFontData, #text, me.pTextMem.text>
  [392] objcall 48 .............................. me.pFontData[#text] = me.pTextMem.text
  [394] getparam 0 .............................. <me>
  [396] getchainedprop 34 ....................... <me.pTextMem>
  [398] getobjprop 40 ........................... <me.pTextMem.fontStyle>
  [400] getparam 0 .............................. <me>
  [402] pushsymb 39 ............................. <#pFontData>
  [404] pushsymb 40 ............................. <#fontStyle>
  [406] pusharglist 3 ........................... <me, #pFontData, #fontStyle>
  [408] objcall 41 .............................. <me.pFontData[#fontStyle]>
  [410] nteq .................................... <me.pTextMem.fontStyle <> me.pFontData[#fontStyle]>
  [411] jmpifz [430] ............................ if me.pTextMem.fontStyle <> me.pFontData[#fontStyle] then
  [414] getparam 0 .............................. <me>
  [416] getchainedprop 34 ....................... <me.pTextMem>
  [418] getparam 0 .............................. <me>
  [420] pushsymb 39 ............................. <#pFontData>
  [422] pushsymb 40 ............................. <#fontStyle>
  [424] pusharglist 3 ........................... <me, #pFontData, #fontStyle>
  [426] objcall 41 .............................. <me.pFontData[#fontStyle]>
  [428] setobjprop 40 ........................... me.pTextMem.fontStyle = me.pFontData[#fontStyle]
  [430] getparam 0 .............................. <me>
  [432] getchainedprop 34 ....................... <me.pTextMem>
  [434] getobjprop 59 ........................... <me.pTextMem.wordWrap>
  [436] getparam 0 .............................. <me>
  [438] pushsymb 39 ............................. <#pFontData>
  [440] pushsymb 59 ............................. <#wordWrap>
  [442] pusharglist 3 ........................... <me, #pFontData, #wordWrap>
  [444] objcall 41 .............................. <me.pFontData[#wordWrap]>
  [446] nteq .................................... <me.pTextMem.wordWrap <> me.pFontData[#wordWrap]>
  [447] jmpifz [466] ............................ if me.pTextMem.wordWrap <> me.pFontData[#wordWrap] then
  [450] getparam 0 .............................. <me>
  [452] getchainedprop 34 ....................... <me.pTextMem>
  [454] getparam 0 .............................. <me>
  [456] pushsymb 39 ............................. <#pFontData>
  [458] pushsymb 59 ............................. <#wordWrap>
  [460] pusharglist 3 ........................... <me, #pFontData, #wordWrap>
  [462] objcall 41 .............................. <me.pFontData[#wordWrap]>
  [464] setobjprop 59 ........................... me.pTextMem.wordWrap = me.pFontData[#wordWrap]
  [466] getparam 0 .............................. <me>
  [468] getchainedprop 34 ....................... <me.pTextMem>
  [470] getobjprop 60 ........................... <me.pTextMem.alignment>
  [472] getparam 0 .............................. <me>
  [474] pushsymb 39 ............................. <#pFontData>
  [476] pushsymb 60 ............................. <#alignment>
  [478] pusharglist 3 ........................... <me, #pFontData, #alignment>
  [480] objcall 41 .............................. <me.pFontData[#alignment]>
  [482] nteq .................................... <me.pTextMem.alignment <> me.pFontData[#alignment]>
  [483] jmpifz [502] ............................ if me.pTextMem.alignment <> me.pFontData[#alignment] then
  [486] getparam 0 .............................. <me>
  [488] getchainedprop 34 ....................... <me.pTextMem>
  [490] getparam 0 .............................. <me>
  [492] pushsymb 39 ............................. <#pFontData>
  [494] pushsymb 60 ............................. <#alignment>
  [496] pusharglist 3 ........................... <me, #pFontData, #alignment>
  [498] objcall 41 .............................. <me.pFontData[#alignment]>
  [500] setobjprop 60 ........................... me.pTextMem.alignment = me.pFontData[#alignment]
  [502] getparam 0 .............................. <me>
  [504] getchainedprop 34 ....................... <me.pTextMem>
  [506] getobjprop 61 ........................... <me.pTextMem.bgColor>
  [508] getparam 0 .............................. <me>
  [510] pushsymb 39 ............................. <#pFontData>
  [512] pushsymb 61 ............................. <#bgColor>
  [514] pusharglist 3 ........................... <me, #pFontData, #bgColor>
  [516] objcall 41 .............................. <me.pFontData[#bgColor]>
  [518] nteq .................................... <me.pTextMem.bgColor <> me.pFontData[#bgColor]>
  [519] jmpifz [538] ............................ if me.pTextMem.bgColor <> me.pFontData[#bgColor] then
  [522] getparam 0 .............................. <me>
  [524] getchainedprop 34 ....................... <me.pTextMem>
  [526] getparam 0 .............................. <me>
  [528] pushsymb 39 ............................. <#pFontData>
  [530] pushsymb 61 ............................. <#bgColor>
  [532] pusharglist 3 ........................... <me, #pFontData, #bgColor>
  [534] objcall 41 .............................. <me.pFontData[#bgColor]>
  [536] setobjprop 61 ........................... me.pTextMem.bgColor = me.pFontData[#bgColor]
  [538] getparam 0 .............................. <me>
  [540] getchainedprop 34 ....................... <me.pTextMem>
  [542] getobjprop 62 ........................... <me.pTextMem.font>
  [544] getparam 0 .............................. <me>
  [546] pushsymb 39 ............................. <#pFontData>
  [548] pushsymb 62 ............................. <#font>
  [550] pusharglist 3 ........................... <me, #pFontData, #font>
  [552] objcall 41 .............................. <me.pFontData[#font]>
  [554] nteq .................................... <me.pTextMem.font <> me.pFontData[#font]>
  [555] jmpifz [574] ............................ if me.pTextMem.font <> me.pFontData[#font] then
  [558] getparam 0 .............................. <me>
  [560] getchainedprop 34 ....................... <me.pTextMem>
  [562] getparam 0 .............................. <me>
  [564] pushsymb 39 ............................. <#pFontData>
  [566] pushsymb 62 ............................. <#font>
  [568] pusharglist 3 ........................... <me, #pFontData, #font>
  [570] objcall 41 .............................. <me.pFontData[#font]>
  [572] setobjprop 62 ........................... me.pTextMem.font = me.pFontData[#font]
  [574] getparam 0 .............................. <me>
  [576] getchainedprop 34 ....................... <me.pTextMem>
  [578] getobjprop 63 ........................... <me.pTextMem.fontSize>
  [580] getparam 0 .............................. <me>
  [582] pushsymb 39 ............................. <#pFontData>
  [584] pushsymb 63 ............................. <#fontSize>
  [586] pusharglist 3 ........................... <me, #pFontData, #fontSize>
  [588] objcall 41 .............................. <me.pFontData[#fontSize]>
  [590] nteq .................................... <me.pTextMem.fontSize <> me.pFontData[#fontSize]>
  [591] jmpifz [610] ............................ if me.pTextMem.fontSize <> me.pFontData[#fontSize] then
  [594] getparam 0 .............................. <me>
  [596] getchainedprop 34 ....................... <me.pTextMem>
  [598] getparam 0 .............................. <me>
  [600] pushsymb 39 ............................. <#pFontData>
  [602] pushsymb 63 ............................. <#fontSize>
  [604] pusharglist 3 ........................... <me, #pFontData, #fontSize>
  [606] objcall 41 .............................. <me.pFontData[#fontSize]>
  [608] setobjprop 63 ........................... me.pTextMem.fontSize = me.pFontData[#fontSize]
  [610] getparam 0 .............................. <me>
  [612] getchainedprop 34 ....................... <me.pTextMem>
  [614] getobjprop 64 ........................... <me.pTextMem.color>
  [616] getparam 0 .............................. <me>
  [618] pushsymb 39 ............................. <#pFontData>
  [620] pushsymb 64 ............................. <#color>
  [622] pusharglist 3 ........................... <me, #pFontData, #color>
  [624] objcall 41 .............................. <me.pFontData[#color]>
  [626] nteq .................................... <me.pTextMem.color <> me.pFontData[#color]>
  [627] jmpifz [646] ............................ if me.pTextMem.color <> me.pFontData[#color] then
  [630] getparam 0 .............................. <me>
  [632] getchainedprop 34 ....................... <me.pTextMem>
  [634] getparam 0 .............................. <me>
  [636] pushsymb 39 ............................. <#pFontData>
  [638] pushsymb 64 ............................. <#color>
  [640] pusharglist 3 ........................... <me, #pFontData, #color>
  [642] objcall 41 .............................. <me.pFontData[#color]>
  [644] setobjprop 64 ........................... me.pTextMem.color = me.pFontData[#color]
  [646] getparam 0 .............................. <me>
  [648] getchainedprop 34 ....................... <me.pTextMem>
  [650] getobjprop 65 ........................... <me.pTextMem.fixedLineSpace>
  [652] getparam 0 .............................. <me>
  [654] pushsymb 39 ............................. <#pFontData>
  [656] pushsymb 65 ............................. <#fixedLineSpace>
  [658] pusharglist 3 ........................... <me, #pFontData, #fixedLineSpace>
  [660] objcall 41 .............................. <me.pFontData[#fixedLineSpace]>
  [662] nteq .................................... <me.pTextMem.fixedLineSpace <> me.pFontData[#fixedLineSpace]>
  [663] jmpifz [682] ............................ if me.pTextMem.fixedLineSpace <> me.pFontData[#fixedLineSpace] then
  [666] getparam 0 .............................. <me>
  [668] getchainedprop 34 ....................... <me.pTextMem>
  [670] getparam 0 .............................. <me>
  [672] pushsymb 39 ............................. <#pFontData>
  [674] pushsymb 65 ............................. <#fixedLineSpace>
  [676] pusharglist 3 ........................... <me, #pFontData, #fixedLineSpace>
  [678] objcall 41 .............................. <me.pFontData[#fixedLineSpace]>
  [680] setobjprop 65 ........................... me.pTextMem.fixedLineSpace = me.pFontData[#fixedLineSpace]
  [682] getparam 0 .............................. <me>
  [684] getchainedprop 34 ....................... <me.pTextMem>
  [686] getobjprop 66 ........................... <me.pTextMem.topSpacing>
  [688] pushint8 10 ............................. <10>
  [690] lt ...................................... <me.pTextMem.topSpacing < 10>
  [691] jmpifz [702] ............................ if me.pTextMem.topSpacing < 10 then
  [694] getparam 0 .............................. <me>
  [696] getchainedprop 34 ....................... <me.pTextMem>
  [698] pushint8 1 .............................. <1>
  [700] setobjprop 66 ........................... me.pTextMem.topSpacing = 1
  [702] getparam 0 .............................. <me>
  [704] getobjprop 67 ........................... <me.pScaleH>
  [706] pushsymb 68 ............................. <#center>
  [708] eq ...................................... <me.pScaleH = #center>
  [709] jmpifz [835] ............................ if me.pScaleH = #center then / else
  [712] getparam 0 .............................. <me>
  [714] getchainedprop 34 ....................... <me.pTextMem>
  [716] getparam 0 .............................. <me>
  [718] getchainedprop 34 ....................... <me.pTextMem>
  [720] pushsymb 52 ............................. <#char>
  [722] pusharglist 2 ........................... <me.pTextMem, #char>
  [724] objcall 45 .............................. <me.pTextMem.char.count>
  [726] pusharglist 2 ........................... <me.pTextMem, me.pTextMem.char.count>
  [728] objcall 69 .............................. <me.pTextMem.charPosToLoc(me.pTextMem.char.count)>
  [730] getobjprop 70 ........................... <me.pTextMem.charPosToLoc(me.pTextMem.char.count).locH>
  [732] pushint8 16 ............................. <16>
  [734] add ..................................... <me.pTextMem.charPosToLoc(me.pTextMem.char.count).locH + 16>
  [735] setlocal 4 .............................. tWidth = me.pTextMem.charPosToLoc(me.pTextMem.char.count).locH + 16
  [737] getparam 0 .............................. <me>
  [739] pushsymb 71 ............................. <#pProps>
  [741] pushsymb 72 ............................. <#style>
  [743] pusharglist 3 ........................... <me, #pProps, #style>
  [745] objcall 41 .............................. <me.pProps[#style]>
  [747] pushsymb 73 ............................. <#unique>
  [749] eq ...................................... <me.pProps[#style] = #unique>
  [750] jmpifz [787] ............................ if me.pProps[#style] = #unique then / else
  [753] getparam 0 .............................. <me>
  [755] getparam 0 .............................. <me>
  [757] getobjprop 74 ........................... <me.pLocX>
  [759] getparam 0 .............................. <me>
  [761] getobjprop 75 ........................... <me.pwidth>
  [763] getlocal 4 .............................. <tWidth>
  [765] sub ..................................... <me.pwidth - tWidth>
  [766] pushint8 2 .............................. <2>
  [768] div ..................................... <(me.pwidth - tWidth) / 2>
  [769] add ..................................... <me.pLocX + ((me.pwidth - tWidth) / 2)>
  [770] setobjprop 74 ........................... me.pLocX = me.pLocX + ((me.pwidth - tWidth) / 2)
  [772] getparam 0 .............................. <me>
  [774] getlocal 4 .............................. <tWidth>
  [776] setobjprop 75 ........................... me.pwidth = tWidth
  [778] getparam 0 .............................. <me>
  [780] getlocal 4 .............................. <tWidth>
  [782] setobjprop 36 ........................... me.pOwnW = tWidth
  [784] jmp [812]
  [787] getparam 0 .............................. <me>
  [789] getparam 0 .............................. <me>
  [791] getobjprop 76 ........................... <me.pOwnX>
  [793] getparam 0 .............................. <me>
  [795] getobjprop 36 ........................... <me.pOwnW>
  [797] getlocal 4 .............................. <tWidth>
  [799] sub ..................................... <me.pOwnW - tWidth>
  [800] pushint8 2 .............................. <2>
  [802] div ..................................... <(me.pOwnW - tWidth) / 2>
  [803] add ..................................... <me.pOwnX + ((me.pOwnW - tWidth) / 2)>
  [804] setobjprop 76 ........................... me.pOwnX = me.pOwnX + ((me.pOwnW - tWidth) / 2)
  [806] getparam 0 .............................. <me>
  [808] getlocal 4 .............................. <tWidth>
  [810] setobjprop 36 ........................... me.pOwnW = tWidth
  [812] getparam 0 .............................. <me>
  [814] getchainedprop 34 ....................... <me.pTextMem>
  [816] pushzero ................................ <0>
  [817] pushzero ................................ <0>
  [818] getlocal 4 .............................. <tWidth>
  [820] getparam 0 .............................. <me>
  [822] getchainedprop 34 ....................... <me.pTextMem>
  [824] getobjprop 77 ........................... <me.pTextMem.height>
  [826] pusharglist 4 ........................... <0, 0, tWidth, me.pTextMem.height>
  [828] extcall 35 .............................. <rect(0, 0, tWidth, me.pTextMem.height)>
  [830] setobjprop 35 ........................... me.pTextMem.rect = rect(0, 0, tWidth, me.pTextMem.height)
  [832] jmp [886]
  [835] getparam 0 .............................. <me>
  [837] pushsymb 71 ............................. <#pProps>
  [839] pushsymb 72 ............................. <#style>
  [841] pusharglist 3 ........................... <me, #pProps, #style>
  [843] objcall 41 .............................. <me.pProps[#style]>
  [845] pushsymb 73 ............................. <#unique>
  [847] eq ...................................... <me.pProps[#style] = #unique>
  [848] jmpifz [874] ............................ if me.pProps[#style] = #unique then / else
  [851] getparam 0 .............................. <me>
  [853] getparam 0 .............................. <me>
  [855] getchainedprop 34 ....................... <me.pTextMem>
  [857] getchainedprop 78 ....................... <me.pTextMem.image>
  [859] getobjprop 79 ........................... <me.pTextMem.image.width>
  [861] setobjprop 75 ........................... me.pwidth = me.pTextMem.image.width
  [863] getparam 0 .............................. <me>
  [865] getparam 0 .............................. <me>
  [867] getobjprop 75 ........................... <me.pwidth>
  [869] setobjprop 36 ........................... me.pOwnW = me.pwidth
  [871] jmp [886]
  [874] getparam 0 .............................. <me>
  [876] getparam 0 .............................. <me>
  [878] getchainedprop 34 ....................... <me.pTextMem>
  [880] getchainedprop 78 ....................... <me.pTextMem.image>
  [882] getobjprop 79 ........................... <me.pTextMem.image.width>
  [884] setobjprop 36 ........................... me.pOwnW = me.pTextMem.image.width
  [886] getparam 0 .............................. <me>
  [888] pushsymb 80 ............................. <#pScrolls>
  [890] pusharglist 2 ........................... <me, #pScrolls>
  [892] objcall 45 .............................. <me.pScrolls.count>
  [894] pushzero ................................ <0>
  [895] gt ...................................... <me.pScrolls.count > 0>
  [896] jmpifz [912] ............................ if me.pScrolls.count > 0 then / else
  [899] getparam 0 .............................. <me>
  [901] getchainedprop 34 ....................... <me.pTextMem>
  [903] getchainedprop 35 ....................... <me.pTextMem.rect>
  [905] getobjprop 77 ........................... <me.pTextMem.rect.height>
  [907] setlocal 5 .............................. tHeight = me.pTextMem.rect.height
  [909] jmp [918]
  [912] getparam 0 .............................. <me>
  [914] getobjprop 37 ........................... <me.pOwnH>
  [916] setlocal 5 .............................. tHeight = me.pOwnH
  [918] getparam 0 .............................. <me>
  [920] getparam 0 .............................. <me>
  [922] getobjprop 36 ........................... <me.pOwnW>
  [924] getlocal 5 .............................. <tHeight>
  [926] getparam 0 .............................. <me>
  [928] getobjprop 81 ........................... <me.pDepth>
  [930] getparam 0 .............................. <me>
  [932] getobjprop 82 ........................... <me.pPalette>
  [934] pusharglist 4 ........................... <me.pOwnW, tHeight, me.pDepth, me.pPalette>
  [936] extcall 78 .............................. <image(me.pOwnW, tHeight, me.pDepth, me.pPalette)>
  [938] setobjprop 83 ........................... me.pimage = image(me.pOwnW, tHeight, me.pDepth, me.pPalette)
  [940] getparam 0 .............................. <me>
  [942] getobjprop 83 ........................... <me.pimage>
  [944] pusharglist 0 ........................... <>
  [946] extcall 50 .............................. <VOID>
  [948] eq ...................................... <me.pimage = VOID>
  [949] jmpifz [957] ............................ if me.pimage = VOID then
  [952] pushzero ................................ <0>
  [953] pusharglistnoret 1 ...................... <0>
  [955] extcall 7 ............................... return 0
  [957] getparam 0 .............................. <me>
  [959] getobjprop 34 ........................... <me.pTextMem>
  [961] pusharglist 0 ........................... <>
  [963] extcall 50 .............................. <VOID>
  [965] eq ...................................... <me.pTextMem = VOID>
  [966] jmpifz [974] ............................ if me.pTextMem = VOID then
  [969] pushzero ................................ <0>
  [970] pusharglistnoret 1 ...................... <0>
  [972] extcall 7 ............................... return 0
  [974] getparam 0 .............................. <me>
  [976] getobjprop 84 ........................... <me.pNeedFill>
  [978] jmpifz [1005] ........................... if me.pNeedFill then
  [981] getparam 0 .............................. <me>
  [983] getchainedprop 83 ....................... <me.pimage>
  [985] getparam 0 .............................. <me>
  [987] getchainedprop 83 ....................... <me.pimage>
  [989] getobjprop 35 ........................... <me.pimage.rect>
  [991] getparam 0 .............................. <me>
  [993] pushsymb 39 ............................. <#pFontData>
  [995] pushsymb 61 ............................. <#bgColor>
  [997] pusharglist 3 ........................... <me, #pFontData, #bgColor>
  [999] objcall 41 .............................. <me.pFontData[#bgColor]>
  [1001] pusharglistnoret 3 ..................... <me.pimage, me.pimage.rect, me.pFontData[#bgColor]>
  [1003] objcall 85 ............................. me.pimage.fill(me.pimage.rect, me.pFontData[#bgColor])
  [1005] getparam 0 ............................. <me>
  [1007] getchainedprop 83 ...................... <me.pimage>
  [1009] getparam 0 ............................. <me>
  [1011] getchainedprop 34 ...................... <me.pTextMem>
  [1013] getobjprop 78 .......................... <me.pTextMem.image>
  [1015] getparam 0 ............................. <me>
  [1017] getchainedprop 83 ...................... <me.pimage>
  [1019] getobjprop 35 .......................... <me.pimage.rect>
  [1021] getparam 0 ............................. <me>
  [1023] getchainedprop 83 ...................... <me.pimage>
  [1025] getobjprop 35 .......................... <me.pimage.rect>
  [1027] pushsymb 86 ............................ <#ink>
  [1029] pushint8 8 ............................. <8>
  [1031] pusharglist 2 .......................... <[#ink: 8]>
  [1033] pushproplist ........................... <[#ink: 8]>
  [1034] pusharglistnoret 5 ..................... <me.pimage, me.pTextMem.image, me.pimage.rect, me.pimage.rect, [#ink: 8]>
  [1036] objcall 87 ............................. me.pimage.copyPixels(me.pTextMem.image, me.pimage.rect, me.pimage.rect, [#ink: 8])
  [1038] pushint8 1 ............................. <1>
  [1040] pusharglistnoret 1 ..................... <1>
  [1042] extcall 7 .............................. return 1
  [1044] ret
end
