on construct me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 53 .............................. return 1
  [  6] ret
end

on deconstruct me
  [  0] pushint8 1 .............................. <1>
  [  2] pusharglistnoret 1 ...................... <1>
  [  4] extcall 53 .............................. return 1
  [  6] ret
end

on testForLineOfSight me, tLineOfSightTester, tX1, tY1, tX2, tY2, tBlockingLevel, tExcludeFirst, tExcludeLast
  [  0] getparam 4 .............................. <tX2>
  [  2] getparam 2 .............................. <tX1>
  [  4] sub ..................................... <tX2 - tX1>
  [  5] setlocal 0 .............................. tDeltaX = tX2 - tX1
  [  7] getparam 5 .............................. <tY2>
  [  9] getparam 3 .............................. <tY1>
  [ 11] sub ..................................... <tY2 - tY1>
  [ 12] setlocal 1 .............................. tDeltaY = tY2 - tY1
  [ 14] pushzero ................................ <0>
  [ 15] setlocal 2 .............................. tDump = 0
  [ 17] getlocal 2 .............................. <tDump>
  [ 19] jmpifz [ 56] ............................ if tDump then
  [ 22] pushcons 0 .............................. <"* X1/Y1:">
  [ 24] getparam 2 .............................. <tX1>
  [ 26] joinpadstr .............................. <"* X1/Y1:" && tX1>
  [ 27] getparam 3 .............................. <tY1>
  [ 29] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1>
  [ 30] pushcons 1 .............................. <"X2/Y2:">
  [ 32] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:">
  [ 33] getparam 4 .............................. <tX2>
  [ 35] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2>
  [ 36] getparam 5 .............................. <tY2>
  [ 38] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2 && tY2>
  [ 39] pushcons 2 .............................. <"* tDeltaX">
  [ 41] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2 && tY2 && "* tDeltaX">
  [ 42] getlocal 0 .............................. <tDeltaX>
  [ 44] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2 && tY2 && "* tDeltaX" && tDeltaX>
  [ 45] pushcons 3 .............................. <"* tDeltaY">
  [ 47] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2 && tY2 && "* tDeltaX" && tDeltaX && "* tDeltaY">
  [ 48] getlocal 1 .............................. <tDeltaY>
  [ 50] joinpadstr .............................. <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2 && tY2 && "* tDeltaX" && tDeltaX && "* tDeltaY" && tDeltaY>
  [ 51] pusharglistnoret 1 ...................... <"* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2 && tY2 && "* tDeltaX" && tDeltaX && "* tDeltaY" && tDeltaY>
  [ 53] extcall 470 ............................. put "* X1/Y1:" && tX1 && tY1 && "X2/Y2:" && tX2 && tY2 && "* tDeltaX" && tDeltaX && "* tDeltaY" && tDeltaY
  [ 56] getlocal 0 .............................. <tDeltaX>
  [ 58] pushzero ................................ <0>
  [ 59] eq ...................................... <tDeltaX = 0>
  [ 60] jmpifz [302] ............................ if tDeltaX = 0 then / else
  [ 63] getlocal 2 .............................. <tDump>
  [ 65] jmpifz [ 75] ............................ if tDump then
  [ 68] pushcons 4 .............................. <"* 1">
  [ 70] pusharglistnoret 1 ...................... <"* 1">
  [ 72] extcall 470 ............................. put "* 1"
  [ 75] getlocal 1 .............................. <tDeltaY>
  [ 77] pushzero ................................ <0>
  [ 78] eq ...................................... <tDeltaY = 0>
  [ 79] jmpifz [113] ............................ if tDeltaY = 0 then
  [ 82] getparam 7 .............................. <tExcludeFirst>
  [ 84] getparam 8 .............................. <tExcludeLast>
  [ 86] or ...................................... <tExcludeFirst or tExcludeLast>
  [ 87] jmpifz [ 96] ............................ if tExcludeFirst or tExcludeLast then
  [ 90] pushint8 1 .............................. <1>
  [ 92] pusharglistnoret 1 ...................... <1>
  [ 94] extcall 53 .............................. return 1
  [ 96] getparam 1 .............................. <tLineOfSightTester>
  [ 98] getparam 2 .............................. <tX1>
  [100] getparam 3 .............................. <tY1>
  [102] getparam 6 .............................. <tBlockingLevel>
  [104] pusharglist 4 ........................... <tLineOfSightTester, tX1, tY1, tBlockingLevel>
  [106] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX1, tY1, tBlockingLevel)>
  [109] pusharglistnoret 1 ...................... <tLineOfSightTester.isBlockingLineOfSight(tX1, tY1, tBlockingLevel)>
  [111] extcall 53 .............................. return tLineOfSightTester.isBlockingLineOfSight(tX1, tY1, tBlockingLevel)
  [113] getlocal 1 .............................. <tDeltaY>
  [115] pushzero ................................ <0>
  [116] gt ...................................... <tDeltaY > 0>
  [117] jmpifz [211] ............................ if tDeltaY > 0 then / else
  [120] getlocal 2 .............................. <tDump>
  [122] jmpifz [132] ............................ if tDump then
  [125] pushcons 5 .............................. <"* 1b">
  [127] pusharglistnoret 1 ...................... <"* 1b">
  [129] extcall 470 ............................. put "* 1b"
  [132] getparam 3 .............................. <tY1>
  [134] setlocal 3 .............................. tYFirst = tY1
  [136] getparam 8 .............................. <tExcludeLast>
  [138] jmpifz [151] ............................ if tExcludeLast then / else
  [141] getparam 5 .............................. <tY2>
  [143] pushint8 1 .............................. <1>
  [145] sub ..................................... <tY2 - 1>
  [146] setlocal 4 .............................. tYLast = tY2 - 1
  [148] jmp [155]
  [151] getparam 5 .............................. <tY2>
  [153] setlocal 4 .............................. tYLast = tY2
  [155] getlocal 3 .............................. <tYFirst>
  [157] setlocal 5
  [159] getlocal 5
  [161] getlocal 4 .............................. <tYLast>
  [163] lteq
  [164] jmpifz [208] ............................ repeat with tY = tYFirst to tYLast
  [167] getparam 7 .............................. <tExcludeFirst>
  [169] jmpifz [178] ............................ if tExcludeFirst then
  [172] pushzero ................................ <0>
  [173] setparam 7 .............................. tExcludeFirst = 0
  [175] jmp [199] ............................... next repeat
  [178] getparam 1 .............................. <tLineOfSightTester>
  [180] getparam 2 .............................. <tX1>
  [182] getlocal 5 .............................. <tY>
  [184] getparam 6 .............................. <tBlockingLevel>
  [186] pusharglist 4 ........................... <tLineOfSightTester, tX1, tY, tBlockingLevel>
  [188] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX1, tY, tBlockingLevel)>
  [191] jmpifz [199] ............................ if tLineOfSightTester.isBlockingLineOfSight(tX1, tY, tBlockingLevel) then
  [194] pushzero ................................ <0>
  [195] pusharglistnoret 1 ...................... <0>
  [197] extcall 53 .............................. return 0
  [199] pushint8 1
  [201] getlocal 5
  [203] add
  [204] setlocal 5
  [206] endrepeat [159]
  [208] jmp [299]
  [211] getlocal 2 .............................. <tDump>
  [213] jmpifz [223] ............................ if tDump then
  [216] pushcons 6 .............................. <"* 1c">
  [218] pusharglistnoret 1 ...................... <"* 1c">
  [220] extcall 470 ............................. put "* 1c"
  [223] getparam 3 .............................. <tY1>
  [225] setlocal 3 .............................. tYFirst = tY1
  [227] getparam 8 .............................. <tExcludeLast>
  [229] jmpifz [242] ............................ if tExcludeLast then / else
  [232] getparam 5 .............................. <tY2>
  [234] pushint8 1 .............................. <1>
  [236] add ..................................... <tY2 + 1>
  [237] setlocal 4 .............................. tYLast = tY2 + 1
  [239] jmp [246]
  [242] getparam 5 .............................. <tY2>
  [244] setlocal 4 .............................. tYLast = tY2
  [246] getlocal 3 .............................. <tYFirst>
  [248] setlocal 5
  [250] getlocal 5
  [252] getlocal 4 .............................. <tYLast>
  [254] gteq
  [255] jmpifz [299] ............................ repeat with tY = tYFirst down to tYLast
  [258] getparam 7 .............................. <tExcludeFirst>
  [260] jmpifz [269] ............................ if tExcludeFirst then
  [263] pushzero ................................ <0>
  [264] setparam 7 .............................. tExcludeFirst = 0
  [266] jmp [290] ............................... next repeat
  [269] getparam 1 .............................. <tLineOfSightTester>
  [271] getparam 2 .............................. <tX1>
  [273] getlocal 5 .............................. <tY>
  [275] getparam 6 .............................. <tBlockingLevel>
  [277] pusharglist 4 ........................... <tLineOfSightTester, tX1, tY, tBlockingLevel>
  [279] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX1, tY, tBlockingLevel)>
  [282] jmpifz [290] ............................ if tLineOfSightTester.isBlockingLineOfSight(tX1, tY, tBlockingLevel) then
  [285] pushzero ................................ <0>
  [286] pusharglistnoret 1 ...................... <0>
  [288] extcall 53 .............................. return 0
  [290] pushint8 -1
  [292] getlocal 5
  [294] add
  [295] setlocal 5
  [297] endrepeat [250]
  [299] jmp [1830]
  [302] getlocal 1 .............................. <tDeltaY>
  [304] pushzero ................................ <0>
  [305] eq ...................................... <tDeltaY = 0>
  [306] jmpifz [542] ............................ if tDeltaY = 0 then / else
  [309] getlocal 2 .............................. <tDump>
  [311] jmpifz [321] ............................ if tDump then
  [314] pushcons 7 .............................. <"* 2">
  [316] pusharglistnoret 1 ...................... <"* 2">
  [318] extcall 470 ............................. put "* 2"
  [321] getlocal 0 .............................. <tDeltaX>
  [323] pushzero ................................ <0>
  [324] gt ...................................... <tDeltaX > 0>
  [325] jmpifz [419] ............................ if tDeltaX > 0 then / else
  [328] getlocal 2 .............................. <tDump>
  [330] jmpifz [340] ............................ if tDump then
  [333] pushcons 8 .............................. <"* 2a">
  [335] pusharglistnoret 1 ...................... <"* 2a">
  [337] extcall 470 ............................. put "* 2a"
  [340] getparam 2 .............................. <tX1>
  [342] setlocal 6 .............................. tXFirst = tX1
  [344] getparam 8 .............................. <tExcludeLast>
  [346] jmpifz [359] ............................ if tExcludeLast then / else
  [349] getparam 4 .............................. <tX2>
  [351] pushint8 1 .............................. <1>
  [353] sub ..................................... <tX2 - 1>
  [354] setlocal 7 .............................. tXLast = tX2 - 1
  [356] jmp [363]
  [359] getparam 4 .............................. <tX2>
  [361] setlocal 7 .............................. tXLast = tX2
  [363] getlocal 6 .............................. <tXFirst>
  [365] setlocal 8
  [367] getlocal 8
  [369] getlocal 7 .............................. <tXLast>
  [371] lteq
  [372] jmpifz [416] ............................ repeat with tX = tXFirst to tXLast
  [375] getparam 7 .............................. <tExcludeFirst>
  [377] jmpifz [386] ............................ if tExcludeFirst then
  [380] pushzero ................................ <0>
  [381] setparam 7 .............................. tExcludeFirst = 0
  [383] jmp [407] ............................... next repeat
  [386] getparam 1 .............................. <tLineOfSightTester>
  [388] getlocal 8 .............................. <tX>
  [390] getparam 3 .............................. <tY1>
  [392] getparam 6 .............................. <tBlockingLevel>
  [394] pusharglist 4 ........................... <tLineOfSightTester, tX, tY1, tBlockingLevel>
  [396] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel)>
  [399] jmpifz [407] ............................ if tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel) then
  [402] pushzero ................................ <0>
  [403] pusharglistnoret 1 ...................... <0>
  [405] extcall 53 .............................. return 0
  [407] pushint8 1
  [409] getlocal 8
  [411] add
  [412] setlocal 8
  [414] endrepeat [367]
  [416] jmp [539]
  [419] getlocal 2 .............................. <tDump>
  [421] jmpifz [431] ............................ if tDump then
  [424] pushcons 9 .............................. <"* 2b">
  [426] pusharglistnoret 1 ...................... <"* 2b">
  [428] extcall 470 ............................. put "* 2b"
  [431] getparam 2 .............................. <tX1>
  [433] setlocal 6 .............................. tXFirst = tX1
  [435] getparam 8 .............................. <tExcludeLast>
  [437] jmpifz [450] ............................ if tExcludeLast then / else
  [440] getparam 4 .............................. <tX2>
  [442] pushint8 1 .............................. <1>
  [444] add ..................................... <tX2 + 1>
  [445] setlocal 7 .............................. tXLast = tX2 + 1
  [447] jmp [454]
  [450] getparam 4 .............................. <tX2>
  [452] setlocal 7 .............................. tXLast = tX2
  [454] getlocal 6 .............................. <tXFirst>
  [456] setlocal 8
  [458] getlocal 8
  [460] getlocal 7 .............................. <tXLast>
  [462] gteq
  [463] jmpifz [539] ............................ repeat with tX = tXFirst down to tXLast
  [466] getparam 7 .............................. <tExcludeFirst>
  [468] jmpifz [477] ............................ if tExcludeFirst then
  [471] pushzero ................................ <0>
  [472] setparam 7 .............................. tExcludeFirst = 0
  [474] jmp [530] ............................... next repeat
  [477] getlocal 2 .............................. <tDump>
  [479] jmpifz [509] ............................ if tDump then
  [482] pushcons 10 ............................. <"* isBlockingLineOfSight result">
  [484] getlocal 8 .............................. <tX>
  [486] joinpadstr .............................. <"* isBlockingLineOfSight result" && tX>
  [487] getparam 3 .............................. <tY1>
  [489] joinpadstr .............................. <"* isBlockingLineOfSight result" && tX && tY1>
  [490] getparam 1 .............................. <tLineOfSightTester>
  [492] getlocal 8 .............................. <tX>
  [494] getparam 3 .............................. <tY1>
  [496] getparam 6 .............................. <tBlockingLevel>
  [498] pusharglist 4 ........................... <tLineOfSightTester, tX, tY1, tBlockingLevel>
  [500] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel)>
  [503] joinpadstr .............................. <"* isBlockingLineOfSight result" && tX && tY1 && tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel)>
  [504] pusharglistnoret 1 ...................... <"* isBlockingLineOfSight result" && tX && tY1 && tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel)>
  [506] extcall 470 ............................. put "* isBlockingLineOfSight result" && tX && tY1 && tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel)
  [509] getparam 1 .............................. <tLineOfSightTester>
  [511] getlocal 8 .............................. <tX>
  [513] getparam 3 .............................. <tY1>
  [515] getparam 6 .............................. <tBlockingLevel>
  [517] pusharglist 4 ........................... <tLineOfSightTester, tX, tY1, tBlockingLevel>
  [519] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel)>
  [522] jmpifz [530] ............................ if tLineOfSightTester.isBlockingLineOfSight(tX, tY1, tBlockingLevel) then
  [525] pushzero ................................ <0>
  [526] pusharglistnoret 1 ...................... <0>
  [528] extcall 53 .............................. return 0
  [530] pushint8 -1
  [532] getlocal 8
  [534] add
  [535] setlocal 8
  [537] endrepeat [458]
  [539] jmp [1830]
  [542] getlocal 0 .............................. <tDeltaX>
  [544] pushzero ................................ <0>
  [545] gt ...................................... <tDeltaX > 0>
  [546] jmpifz [1187] ........................... if tDeltaX > 0 then / else
  [549] getlocal 2 .............................. <tDump>
  [551] jmpifz [561] ............................ if tDump then
  [554] pushcons 11 ............................. <"* 3">
  [556] pusharglistnoret 1 ...................... <"* 3">
  [558] extcall 470 ............................. put "* 3"
  [561] getlocal 1 .............................. <tDeltaY>
  [563] pushzero ................................ <0>
  [564] gt ...................................... <tDeltaY > 0>
  [565] jmpifz [884] ............................ if tDeltaY > 0 then / else
  [568] getlocal 0 .............................. <tDeltaX>
  [570] getlocal 1 .............................. <tDeltaY>
  [572] gt ...................................... <tDeltaX > tDeltaY>
  [573] jmpifz [721] ............................ if tDeltaX > tDeltaY then / else
  [576] getlocal 2 .............................. <tDump>
  [578] jmpifz [588] ............................ if tDump then
  [581] pushcons 12 ............................. <"* 3a">
  [583] pusharglistnoret 1 ...................... <"* 3a">
  [585] extcall 470 ............................. put "* 3a"
  [588] getparam 3 .............................. <tY1>
  [590] setlocal 5 .............................. tY = tY1
  [592] getlocal 1 .............................. <tDeltaY>
  [594] pushint8 4 .............................. <4>
  [596] mul ..................................... <tDeltaY * 4>
  [597] getlocal 0 .............................. <tDeltaX>
  [599] sub ..................................... <(tDeltaY * 4) - tDeltaX>
  [600] setlocal 9 .............................. tD = (tDeltaY * 4) - tDeltaX
  [602] getparam 2 .............................. <tX1>
  [604] setlocal 6 .............................. tXFirst = tX1
  [606] getparam 8 .............................. <tExcludeLast>
  [608] jmpifz [621] ............................ if tExcludeLast then / else
  [611] getparam 4 .............................. <tX2>
  [613] pushint8 1 .............................. <1>
  [615] sub ..................................... <tX2 - 1>
  [616] setlocal 7 .............................. tXLast = tX2 - 1
  [618] jmp [625]
  [621] getparam 4 .............................. <tX2>
  [623] setlocal 7 .............................. tXLast = tX2
  [625] getlocal 6 .............................. <tXFirst>
  [627] setlocal 8
  [629] getlocal 8
  [631] getlocal 7 .............................. <tXLast>
  [633] lteq
  [634] jmpifz [718] ............................ repeat with tX = tXFirst to tXLast
  [637] getparam 7 .............................. <tExcludeFirst>
  [639] jmpifz [648] ............................ if tExcludeFirst then / else
  [642] pushzero ................................ <0>
  [643] setparam 7 .............................. tExcludeFirst = 0
  [645] jmp [669]
  [648] getparam 1 .............................. <tLineOfSightTester>
  [650] getlocal 8 .............................. <tX>
  [652] getlocal 5 .............................. <tY>
  [654] getparam 6 .............................. <tBlockingLevel>
  [656] pusharglist 4 ........................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [658] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [661] jmpifz [669] ............................ if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [664] pushzero ................................ <0>
  [665] pusharglistnoret 1 ...................... <0>
  [667] extcall 53 .............................. return 0
  [669] getlocal 9 .............................. <tD>
  [671] pushzero ................................ <0>
  [672] lt ...................................... <tD < 0>
  [673] jmpifz [689] ............................ if tD < 0 then
  [676] getlocal 9 .............................. <tD>
  [678] getlocal 1 .............................. <tDeltaY>
  [680] pushint8 4 .............................. <4>
  [682] mul ..................................... <tDeltaY * 4>
  [683] add ..................................... <tD + (tDeltaY * 4)>
  [684] setlocal 9 .............................. tD = tD + (tDeltaY * 4)
  [686] jmp [709] ............................... next repeat
  [689] getlocal 9 .............................. <tD>
  [691] getlocal 1 .............................. <tDeltaY>
  [693] getlocal 0 .............................. <tDeltaX>
  [695] sub ..................................... <tDeltaY - tDeltaX>
  [696] pushint8 4 .............................. <4>
  [698] mul ..................................... <(tDeltaY - tDeltaX) * 4>
  [699] add ..................................... <tD + ((tDeltaY - tDeltaX) * 4)>
  [700] setlocal 9 .............................. tD = tD + ((tDeltaY - tDeltaX) * 4)
  [702] getlocal 5 .............................. <tY>
  [704] pushint8 1 .............................. <1>
  [706] add ..................................... <tY + 1>
  [707] setlocal 5 .............................. tY = tY + 1
  [709] pushint8 1
  [711] getlocal 8
  [713] add
  [714] setlocal 8
  [716] endrepeat [629]
  [718] jmp [881]
  [721] getlocal 2 .............................. <tDump>
  [723] jmpifz [733] ............................ if tDump then
  [726] pushcons 13 ............................. <"* 3b">
  [728] pusharglistnoret 1 ...................... <"* 3b">
  [730] extcall 470 ............................. put "* 3b"
  [733] getparam 2 .............................. <tX1>
  [735] setlocal 8 .............................. tX = tX1
  [737] getlocal 0 .............................. <tDeltaX>
  [739] pushint8 4 .............................. <4>
  [741] mul ..................................... <tDeltaX * 4>
  [742] getlocal 1 .............................. <tDeltaY>
  [744] sub ..................................... <(tDeltaX * 4) - tDeltaY>
  [745] setlocal 9 .............................. tD = (tDeltaX * 4) - tDeltaY
  [747] getparam 3 .............................. <tY1>
  [749] setlocal 3 .............................. tYFirst = tY1
  [751] getparam 8 .............................. <tExcludeLast>
  [753] jmpifz [766] ............................ if tExcludeLast then / else
  [756] getparam 5 .............................. <tY2>
  [758] pushint8 1 .............................. <1>
  [760] sub ..................................... <tY2 - 1>
  [761] setlocal 4 .............................. tYLast = tY2 - 1
  [763] jmp [770]
  [766] getparam 5 .............................. <tY2>
  [768] setlocal 4 .............................. tYLast = tY2
  [770] getlocal 3 .............................. <tYFirst>
  [772] setlocal 5
  [774] getlocal 5
  [776] getlocal 4 .............................. <tYLast>
  [778] lteq
  [779] jmpifz [881] ............................ repeat with tY = tYFirst to tYLast
  [782] getparam 7 .............................. <tExcludeFirst>
  [784] jmpifz [793] ............................ if tExcludeFirst then / else
  [787] pushzero ................................ <0>
  [788] setparam 7 .............................. tExcludeFirst = 0
  [790] jmp [832]
  [793] getlocal 2 .............................. <tDump>
  [795] jmpifz [811] ............................ if tDump then
  [798] pushcons 14 ............................. <"* testing">
  [800] getlocal 8 .............................. <tX>
  [802] joinpadstr .............................. <"* testing" && tX>
  [803] getlocal 5 .............................. <tY>
  [805] joinpadstr .............................. <"* testing" && tX && tY>
  [806] pusharglistnoret 1 ...................... <"* testing" && tX && tY>
  [808] extcall 470 ............................. put "* testing" && tX && tY
  [811] getparam 1 .............................. <tLineOfSightTester>
  [813] getlocal 8 .............................. <tX>
  [815] getlocal 5 .............................. <tY>
  [817] getparam 6 .............................. <tBlockingLevel>
  [819] pusharglist 4 ........................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [821] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [824] jmpifz [832] ............................ if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [827] pushzero ................................ <0>
  [828] pusharglistnoret 1 ...................... <0>
  [830] extcall 53 .............................. return 0
  [832] getlocal 9 .............................. <tD>
  [834] pushzero ................................ <0>
  [835] lt ...................................... <tD < 0>
  [836] jmpifz [852] ............................ if tD < 0 then
  [839] getlocal 9 .............................. <tD>
  [841] getlocal 0 .............................. <tDeltaX>
  [843] pushint8 4 .............................. <4>
  [845] mul ..................................... <tDeltaX * 4>
  [846] add ..................................... <tD + (tDeltaX * 4)>
  [847] setlocal 9 .............................. tD = tD + (tDeltaX * 4)
  [849] jmp [872] ............................... next repeat
  [852] getlocal 9 .............................. <tD>
  [854] getlocal 0 .............................. <tDeltaX>
  [856] getlocal 1 .............................. <tDeltaY>
  [858] sub ..................................... <tDeltaX - tDeltaY>
  [859] pushint8 4 .............................. <4>
  [861] mul ..................................... <(tDeltaX - tDeltaY) * 4>
  [862] add ..................................... <tD + ((tDeltaX - tDeltaY) * 4)>
  [863] setlocal 9 .............................. tD = tD + ((tDeltaX - tDeltaY) * 4)
  [865] getlocal 8 .............................. <tX>
  [867] pushint8 1 .............................. <1>
  [869] add ..................................... <tX + 1>
  [870] setlocal 8 .............................. tX = tX + 1
  [872] pushint8 1
  [874] getlocal 5
  [876] add
  [877] setlocal 5
  [879] endrepeat [774]
  [881] jmp [1184]
  [884] getlocal 1 .............................. <tDeltaY>
  [886] inv ..................................... <-tDeltaY>
  [887] setlocal 1 .............................. tDeltaY = -tDeltaY
  [889] getlocal 0 .............................. <tDeltaX>
  [891] getlocal 1 .............................. <tDeltaY>
  [893] gt ...................................... <tDeltaX > tDeltaY>
  [894] jmpifz [1042] ........................... if tDeltaX > tDeltaY then / else
  [897] getlocal 2 .............................. <tDump>
  [899] jmpifz [909] ............................ if tDump then
  [902] pushcons 15 ............................. <"* 3c">
  [904] pusharglistnoret 1 ...................... <"* 3c">
  [906] extcall 470 ............................. put "* 3c"
  [909] getparam 3 .............................. <tY1>
  [911] setlocal 5 .............................. tY = tY1
  [913] getlocal 1 .............................. <tDeltaY>
  [915] pushint8 4 .............................. <4>
  [917] mul ..................................... <tDeltaY * 4>
  [918] getlocal 0 .............................. <tDeltaX>
  [920] sub ..................................... <(tDeltaY * 4) - tDeltaX>
  [921] setlocal 9 .............................. tD = (tDeltaY * 4) - tDeltaX
  [923] getparam 2 .............................. <tX1>
  [925] setlocal 6 .............................. tXFirst = tX1
  [927] getparam 8 .............................. <tExcludeLast>
  [929] jmpifz [942] ............................ if tExcludeLast then / else
  [932] getparam 4 .............................. <tX2>
  [934] pushint8 1 .............................. <1>
  [936] sub ..................................... <tX2 - 1>
  [937] setlocal 7 .............................. tXLast = tX2 - 1
  [939] jmp [946]
  [942] getparam 4 .............................. <tX2>
  [944] setlocal 7 .............................. tXLast = tX2
  [946] getlocal 6 .............................. <tXFirst>
  [948] setlocal 8
  [950] getlocal 8
  [952] getlocal 7 .............................. <tXLast>
  [954] lteq
  [955] jmpifz [1039] ........................... repeat with tX = tXFirst to tXLast
  [958] getparam 7 .............................. <tExcludeFirst>
  [960] jmpifz [969] ............................ if tExcludeFirst then / else
  [963] pushzero ................................ <0>
  [964] setparam 7 .............................. tExcludeFirst = 0
  [966] jmp [990]
  [969] getparam 1 .............................. <tLineOfSightTester>
  [971] getlocal 8 .............................. <tX>
  [973] getlocal 5 .............................. <tY>
  [975] getparam 6 .............................. <tBlockingLevel>
  [977] pusharglist 4 ........................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [979] objcall 847 ............................. <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [982] jmpifz [990] ............................ if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [985] pushzero ................................ <0>
  [986] pusharglistnoret 1 ...................... <0>
  [988] extcall 53 .............................. return 0
  [990] getlocal 9 .............................. <tD>
  [992] pushzero ................................ <0>
  [993] lt ...................................... <tD < 0>
  [994] jmpifz [1010] ........................... if tD < 0 then
  [997] getlocal 9 .............................. <tD>
  [999] getlocal 1 .............................. <tDeltaY>
  [1001] pushint8 4 ............................. <4>
  [1003] mul .................................... <tDeltaY * 4>
  [1004] add .................................... <tD + (tDeltaY * 4)>
  [1005] setlocal 9 ............................. tD = tD + (tDeltaY * 4)
  [1007] jmp [1030] ............................. next repeat
  [1010] getlocal 9 ............................. <tD>
  [1012] getlocal 1 ............................. <tDeltaY>
  [1014] getlocal 0 ............................. <tDeltaX>
  [1016] sub .................................... <tDeltaY - tDeltaX>
  [1017] pushint8 4 ............................. <4>
  [1019] mul .................................... <(tDeltaY - tDeltaX) * 4>
  [1020] add .................................... <tD + ((tDeltaY - tDeltaX) * 4)>
  [1021] setlocal 9 ............................. tD = tD + ((tDeltaY - tDeltaX) * 4)
  [1023] getlocal 5 ............................. <tY>
  [1025] pushint8 1 ............................. <1>
  [1027] sub .................................... <tY - 1>
  [1028] setlocal 5 ............................. tY = tY - 1
  [1030] pushint8 1
  [1032] getlocal 8
  [1034] add
  [1035] setlocal 8
  [1037] endrepeat [950]
  [1039] jmp [1184]
  [1042] getlocal 2 ............................. <tDump>
  [1044] jmpifz [1054] .......................... if tDump then
  [1047] pushcons 16 ............................ <"* 3d">
  [1049] pusharglistnoret 1 ..................... <"* 3d">
  [1051] extcall 470 ............................ put "* 3d"
  [1054] getparam 2 ............................. <tX1>
  [1056] setlocal 8 ............................. tX = tX1
  [1058] getlocal 0 ............................. <tDeltaX>
  [1060] pushint8 4 ............................. <4>
  [1062] mul .................................... <tDeltaX * 4>
  [1063] getlocal 1 ............................. <tDeltaY>
  [1065] sub .................................... <(tDeltaX * 4) - tDeltaY>
  [1066] setlocal 9 ............................. tD = (tDeltaX * 4) - tDeltaY
  [1068] getparam 3 ............................. <tY1>
  [1070] setlocal 3 ............................. tYFirst = tY1
  [1072] getparam 8 ............................. <tExcludeLast>
  [1074] jmpifz [1087] .......................... if tExcludeLast then / else
  [1077] getparam 5 ............................. <tY2>
  [1079] pushint8 1 ............................. <1>
  [1081] add .................................... <tY2 + 1>
  [1082] setlocal 4 ............................. tYLast = tY2 + 1
  [1084] jmp [1091]
  [1087] getparam 5 ............................. <tY2>
  [1089] setlocal 4 ............................. tYLast = tY2
  [1091] getlocal 3 ............................. <tYFirst>
  [1093] setlocal 5
  [1095] getlocal 5
  [1097] getlocal 4 ............................. <tYLast>
  [1099] gteq
  [1100] jmpifz [1184] .......................... repeat with tY = tYFirst down to tYLast
  [1103] getparam 7 ............................. <tExcludeFirst>
  [1105] jmpifz [1114] .......................... if tExcludeFirst then / else
  [1108] pushzero ............................... <0>
  [1109] setparam 7 ............................. tExcludeFirst = 0
  [1111] jmp [1135]
  [1114] getparam 1 ............................. <tLineOfSightTester>
  [1116] getlocal 8 ............................. <tX>
  [1118] getlocal 5 ............................. <tY>
  [1120] getparam 6 ............................. <tBlockingLevel>
  [1122] pusharglist 4 .......................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [1124] objcall 847 ............................ <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [1127] jmpifz [1135] .......................... if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [1130] pushzero ............................... <0>
  [1131] pusharglistnoret 1 ..................... <0>
  [1133] extcall 53 ............................. return 0
  [1135] getlocal 9 ............................. <tD>
  [1137] pushzero ............................... <0>
  [1138] lt ..................................... <tD < 0>
  [1139] jmpifz [1155] .......................... if tD < 0 then
  [1142] getlocal 9 ............................. <tD>
  [1144] getlocal 0 ............................. <tDeltaX>
  [1146] pushint8 4 ............................. <4>
  [1148] mul .................................... <tDeltaX * 4>
  [1149] add .................................... <tD + (tDeltaX * 4)>
  [1150] setlocal 9 ............................. tD = tD + (tDeltaX * 4)
  [1152] jmp [1175] ............................. next repeat
  [1155] getlocal 9 ............................. <tD>
  [1157] getlocal 0 ............................. <tDeltaX>
  [1159] getlocal 1 ............................. <tDeltaY>
  [1161] sub .................................... <tDeltaX - tDeltaY>
  [1162] pushint8 4 ............................. <4>
  [1164] mul .................................... <(tDeltaX - tDeltaY) * 4>
  [1165] add .................................... <tD + ((tDeltaX - tDeltaY) * 4)>
  [1166] setlocal 9 ............................. tD = tD + ((tDeltaX - tDeltaY) * 4)
  [1168] getlocal 8 ............................. <tX>
  [1170] pushint8 1 ............................. <1>
  [1172] add .................................... <tX + 1>
  [1173] setlocal 8 ............................. tX = tX + 1
  [1175] pushint8 -1
  [1177] getlocal 5
  [1179] add
  [1180] setlocal 5
  [1182] endrepeat [1095]
  [1184] jmp [1830]
  [1187] getlocal 2 ............................. <tDump>
  [1189] jmpifz [1199] .......................... if tDump then
  [1192] pushcons 17 ............................ <"* 4">
  [1194] pusharglistnoret 1 ..................... <"* 4">
  [1196] extcall 470 ............................ put "* 4"
  [1199] getlocal 0 ............................. <tDeltaX>
  [1201] inv .................................... <-tDeltaX>
  [1202] setlocal 0 ............................. tDeltaX = -tDeltaX
  [1204] getlocal 1 ............................. <tDeltaY>
  [1206] pushzero ............................... <0>
  [1207] gt ..................................... <tDeltaY > 0>
  [1208] jmpifz [1509] .......................... if tDeltaY > 0 then / else
  [1211] getlocal 0 ............................. <tDeltaX>
  [1213] getlocal 1 ............................. <tDeltaY>
  [1215] gt ..................................... <tDeltaX > tDeltaY>
  [1216] jmpifz [1364] .......................... if tDeltaX > tDeltaY then / else
  [1219] getlocal 2 ............................. <tDump>
  [1221] jmpifz [1231] .......................... if tDump then
  [1224] pushcons 18 ............................ <"* 4a">
  [1226] pusharglistnoret 1 ..................... <"* 4a">
  [1228] extcall 470 ............................ put "* 4a"
  [1231] getparam 3 ............................. <tY1>
  [1233] setlocal 5 ............................. tY = tY1
  [1235] getlocal 1 ............................. <tDeltaY>
  [1237] pushint8 4 ............................. <4>
  [1239] mul .................................... <tDeltaY * 4>
  [1240] getlocal 0 ............................. <tDeltaX>
  [1242] sub .................................... <(tDeltaY * 4) - tDeltaX>
  [1243] setlocal 9 ............................. tD = (tDeltaY * 4) - tDeltaX
  [1245] getparam 2 ............................. <tX1>
  [1247] setlocal 6 ............................. tXFirst = tX1
  [1249] getparam 8 ............................. <tExcludeLast>
  [1251] jmpifz [1264] .......................... if tExcludeLast then / else
  [1254] getparam 4 ............................. <tX2>
  [1256] pushint8 1 ............................. <1>
  [1258] add .................................... <tX2 + 1>
  [1259] setlocal 7 ............................. tXLast = tX2 + 1
  [1261] jmp [1268]
  [1264] getparam 4 ............................. <tX2>
  [1266] setlocal 7 ............................. tXLast = tX2
  [1268] getlocal 6 ............................. <tXFirst>
  [1270] setlocal 8
  [1272] getlocal 8
  [1274] getlocal 7 ............................. <tXLast>
  [1276] gteq
  [1277] jmpifz [1361] .......................... repeat with tX = tXFirst down to tXLast
  [1280] getparam 7 ............................. <tExcludeFirst>
  [1282] jmpifz [1291] .......................... if tExcludeFirst then / else
  [1285] pushzero ............................... <0>
  [1286] setparam 7 ............................. tExcludeFirst = 0
  [1288] jmp [1312]
  [1291] getparam 1 ............................. <tLineOfSightTester>
  [1293] getlocal 8 ............................. <tX>
  [1295] getlocal 5 ............................. <tY>
  [1297] getparam 6 ............................. <tBlockingLevel>
  [1299] pusharglist 4 .......................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [1301] objcall 847 ............................ <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [1304] jmpifz [1312] .......................... if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [1307] pushzero ............................... <0>
  [1308] pusharglistnoret 1 ..................... <0>
  [1310] extcall 53 ............................. return 0
  [1312] getlocal 9 ............................. <tD>
  [1314] pushzero ............................... <0>
  [1315] lt ..................................... <tD < 0>
  [1316] jmpifz [1332] .......................... if tD < 0 then
  [1319] getlocal 9 ............................. <tD>
  [1321] getlocal 1 ............................. <tDeltaY>
  [1323] pushint8 4 ............................. <4>
  [1325] mul .................................... <tDeltaY * 4>
  [1326] add .................................... <tD + (tDeltaY * 4)>
  [1327] setlocal 9 ............................. tD = tD + (tDeltaY * 4)
  [1329] jmp [1352] ............................. next repeat
  [1332] getlocal 9 ............................. <tD>
  [1334] getlocal 1 ............................. <tDeltaY>
  [1336] getlocal 0 ............................. <tDeltaX>
  [1338] sub .................................... <tDeltaY - tDeltaX>
  [1339] pushint8 4 ............................. <4>
  [1341] mul .................................... <(tDeltaY - tDeltaX) * 4>
  [1342] add .................................... <tD + ((tDeltaY - tDeltaX) * 4)>
  [1343] setlocal 9 ............................. tD = tD + ((tDeltaY - tDeltaX) * 4)
  [1345] getlocal 5 ............................. <tY>
  [1347] pushint8 1 ............................. <1>
  [1349] add .................................... <tY + 1>
  [1350] setlocal 5 ............................. tY = tY + 1
  [1352] pushint8 -1
  [1354] getlocal 8
  [1356] add
  [1357] setlocal 8
  [1359] endrepeat [1272]
  [1361] jmp [1506]
  [1364] getlocal 2 ............................. <tDump>
  [1366] jmpifz [1376] .......................... if tDump then
  [1369] pushcons 19 ............................ <"* 4b">
  [1371] pusharglistnoret 1 ..................... <"* 4b">
  [1373] extcall 470 ............................ put "* 4b"
  [1376] getparam 2 ............................. <tX1>
  [1378] setlocal 8 ............................. tX = tX1
  [1380] getlocal 0 ............................. <tDeltaX>
  [1382] pushint8 4 ............................. <4>
  [1384] mul .................................... <tDeltaX * 4>
  [1385] getlocal 1 ............................. <tDeltaY>
  [1387] sub .................................... <(tDeltaX * 4) - tDeltaY>
  [1388] setlocal 9 ............................. tD = (tDeltaX * 4) - tDeltaY
  [1390] getparam 3 ............................. <tY1>
  [1392] setlocal 3 ............................. tYFirst = tY1
  [1394] getparam 8 ............................. <tExcludeLast>
  [1396] jmpifz [1409] .......................... if tExcludeLast then / else
  [1399] getparam 5 ............................. <tY2>
  [1401] pushint8 1 ............................. <1>
  [1403] sub .................................... <tY2 - 1>
  [1404] setlocal 4 ............................. tYLast = tY2 - 1
  [1406] jmp [1413]
  [1409] getparam 5 ............................. <tY2>
  [1411] setlocal 4 ............................. tYLast = tY2
  [1413] getlocal 3 ............................. <tYFirst>
  [1415] setlocal 5
  [1417] getlocal 5
  [1419] getlocal 4 ............................. <tYLast>
  [1421] lteq
  [1422] jmpifz [1506] .......................... repeat with tY = tYFirst to tYLast
  [1425] getparam 7 ............................. <tExcludeFirst>
  [1427] jmpifz [1436] .......................... if tExcludeFirst then / else
  [1430] pushzero ............................... <0>
  [1431] setparam 7 ............................. tExcludeFirst = 0
  [1433] jmp [1457]
  [1436] getparam 1 ............................. <tLineOfSightTester>
  [1438] getlocal 8 ............................. <tX>
  [1440] getlocal 5 ............................. <tY>
  [1442] getparam 6 ............................. <tBlockingLevel>
  [1444] pusharglist 4 .......................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [1446] objcall 847 ............................ <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [1449] jmpifz [1457] .......................... if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [1452] pushzero ............................... <0>
  [1453] pusharglistnoret 1 ..................... <0>
  [1455] extcall 53 ............................. return 0
  [1457] getlocal 9 ............................. <tD>
  [1459] pushzero ............................... <0>
  [1460] lt ..................................... <tD < 0>
  [1461] jmpifz [1477] .......................... if tD < 0 then
  [1464] getlocal 9 ............................. <tD>
  [1466] getlocal 0 ............................. <tDeltaX>
  [1468] pushint8 4 ............................. <4>
  [1470] mul .................................... <tDeltaX * 4>
  [1471] add .................................... <tD + (tDeltaX * 4)>
  [1472] setlocal 9 ............................. tD = tD + (tDeltaX * 4)
  [1474] jmp [1497] ............................. next repeat
  [1477] getlocal 9 ............................. <tD>
  [1479] getlocal 0 ............................. <tDeltaX>
  [1481] getlocal 1 ............................. <tDeltaY>
  [1483] sub .................................... <tDeltaX - tDeltaY>
  [1484] pushint8 4 ............................. <4>
  [1486] mul .................................... <(tDeltaX - tDeltaY) * 4>
  [1487] add .................................... <tD + ((tDeltaX - tDeltaY) * 4)>
  [1488] setlocal 9 ............................. tD = tD + ((tDeltaX - tDeltaY) * 4)
  [1490] getlocal 8 ............................. <tX>
  [1492] pushint8 1 ............................. <1>
  [1494] sub .................................... <tX - 1>
  [1495] setlocal 8 ............................. tX = tX - 1
  [1497] pushint8 1
  [1499] getlocal 5
  [1501] add
  [1502] setlocal 5
  [1504] endrepeat [1417]
  [1506] jmp [1830]
  [1509] getlocal 1 ............................. <tDeltaY>
  [1511] inv .................................... <-tDeltaY>
  [1512] setlocal 1 ............................. tDeltaY = -tDeltaY
  [1514] getlocal 0 ............................. <tDeltaX>
  [1516] getlocal 1 ............................. <tDeltaY>
  [1518] gt ..................................... <tDeltaX > tDeltaY>
  [1519] jmpifz [1688] .......................... if tDeltaX > tDeltaY then / else
  [1522] getlocal 2 ............................. <tDump>
  [1524] jmpifz [1534] .......................... if tDump then
  [1527] pushcons 20 ............................ <"* 4c">
  [1529] pusharglistnoret 1 ..................... <"* 4c">
  [1531] extcall 470 ............................ put "* 4c"
  [1534] getparam 3 ............................. <tY1>
  [1536] setlocal 5 ............................. tY = tY1
  [1538] getlocal 1 ............................. <tDeltaY>
  [1540] pushint8 4 ............................. <4>
  [1542] mul .................................... <tDeltaY * 4>
  [1543] getlocal 0 ............................. <tDeltaX>
  [1545] sub .................................... <(tDeltaY * 4) - tDeltaX>
  [1546] setlocal 9 ............................. tD = (tDeltaY * 4) - tDeltaX
  [1548] getparam 2 ............................. <tX1>
  [1550] setlocal 6 ............................. tXFirst = tX1
  [1552] getparam 8 ............................. <tExcludeLast>
  [1554] jmpifz [1567] .......................... if tExcludeLast then / else
  [1557] getparam 4 ............................. <tX2>
  [1559] pushint8 1 ............................. <1>
  [1561] add .................................... <tX2 + 1>
  [1562] setlocal 7 ............................. tXLast = tX2 + 1
  [1564] jmp [1571]
  [1567] getparam 4 ............................. <tX2>
  [1569] setlocal 7 ............................. tXLast = tX2
  [1571] getlocal 2 ............................. <tDump>
  [1573] jmpifz [1592] .......................... if tDump then
  [1576] pushcons 21 ............................ <"* tXFirst:">
  [1578] getlocal 6 ............................. <tXFirst>
  [1580] joinpadstr ............................. <"* tXFirst:" && tXFirst>
  [1581] pushcons 22 ............................ <"tXLast:">
  [1583] joinpadstr ............................. <"* tXFirst:" && tXFirst && "tXLast:">
  [1584] getlocal 7 ............................. <tXLast>
  [1586] joinpadstr ............................. <"* tXFirst:" && tXFirst && "tXLast:" && tXLast>
  [1587] pusharglistnoret 1 ..................... <"* tXFirst:" && tXFirst && "tXLast:" && tXLast>
  [1589] extcall 470 ............................ put "* tXFirst:" && tXFirst && "tXLast:" && tXLast
  [1592] getlocal 6 ............................. <tXFirst>
  [1594] setlocal 8
  [1596] getlocal 8
  [1598] getlocal 7 ............................. <tXLast>
  [1600] gteq
  [1601] jmpifz [1685] .......................... repeat with tX = tXFirst down to tXLast
  [1604] getparam 7 ............................. <tExcludeFirst>
  [1606] jmpifz [1615] .......................... if tExcludeFirst then / else
  [1609] pushzero ............................... <0>
  [1610] setparam 7 ............................. tExcludeFirst = 0
  [1612] jmp [1636]
  [1615] getparam 1 ............................. <tLineOfSightTester>
  [1617] getlocal 8 ............................. <tX>
  [1619] getlocal 5 ............................. <tY>
  [1621] getparam 6 ............................. <tBlockingLevel>
  [1623] pusharglist 4 .......................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [1625] objcall 847 ............................ <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [1628] jmpifz [1636] .......................... if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [1631] pushzero ............................... <0>
  [1632] pusharglistnoret 1 ..................... <0>
  [1634] extcall 53 ............................. return 0
  [1636] getlocal 9 ............................. <tD>
  [1638] pushzero ............................... <0>
  [1639] lt ..................................... <tD < 0>
  [1640] jmpifz [1656] .......................... if tD < 0 then
  [1643] getlocal 9 ............................. <tD>
  [1645] getlocal 1 ............................. <tDeltaY>
  [1647] pushint8 4 ............................. <4>
  [1649] mul .................................... <tDeltaY * 4>
  [1650] add .................................... <tD + (tDeltaY * 4)>
  [1651] setlocal 9 ............................. tD = tD + (tDeltaY * 4)
  [1653] jmp [1676] ............................. next repeat
  [1656] getlocal 9 ............................. <tD>
  [1658] getlocal 1 ............................. <tDeltaY>
  [1660] getlocal 0 ............................. <tDeltaX>
  [1662] sub .................................... <tDeltaY - tDeltaX>
  [1663] pushint8 4 ............................. <4>
  [1665] mul .................................... <(tDeltaY - tDeltaX) * 4>
  [1666] add .................................... <tD + ((tDeltaY - tDeltaX) * 4)>
  [1667] setlocal 9 ............................. tD = tD + ((tDeltaY - tDeltaX) * 4)
  [1669] getlocal 5 ............................. <tY>
  [1671] pushint8 1 ............................. <1>
  [1673] sub .................................... <tY - 1>
  [1674] setlocal 5 ............................. tY = tY - 1
  [1676] pushint8 -1
  [1678] getlocal 8
  [1680] add
  [1681] setlocal 8
  [1683] endrepeat [1596]
  [1685] jmp [1830]
  [1688] getlocal 2 ............................. <tDump>
  [1690] jmpifz [1700] .......................... if tDump then
  [1693] pushcons 23 ............................ <"* 4d">
  [1695] pusharglistnoret 1 ..................... <"* 4d">
  [1697] extcall 470 ............................ put "* 4d"
  [1700] getparam 2 ............................. <tX1>
  [1702] setlocal 8 ............................. tX = tX1
  [1704] getlocal 0 ............................. <tDeltaX>
  [1706] pushint8 4 ............................. <4>
  [1708] mul .................................... <tDeltaX * 4>
  [1709] getlocal 1 ............................. <tDeltaY>
  [1711] sub .................................... <(tDeltaX * 4) - tDeltaY>
  [1712] setlocal 9 ............................. tD = (tDeltaX * 4) - tDeltaY
  [1714] getparam 3 ............................. <tY1>
  [1716] setlocal 3 ............................. tYFirst = tY1
  [1718] getparam 8 ............................. <tExcludeLast>
  [1720] jmpifz [1733] .......................... if tExcludeLast then / else
  [1723] getparam 5 ............................. <tY2>
  [1725] pushint8 1 ............................. <1>
  [1727] add .................................... <tY2 + 1>
  [1728] setlocal 4 ............................. tYLast = tY2 + 1
  [1730] jmp [1737]
  [1733] getparam 5 ............................. <tY2>
  [1735] setlocal 4 ............................. tYLast = tY2
  [1737] getlocal 3 ............................. <tYFirst>
  [1739] setlocal 5
  [1741] getlocal 5
  [1743] getlocal 4 ............................. <tYLast>
  [1745] gteq
  [1746] jmpifz [1830] .......................... repeat with tY = tYFirst down to tYLast
  [1749] getparam 7 ............................. <tExcludeFirst>
  [1751] jmpifz [1760] .......................... if tExcludeFirst then / else
  [1754] pushzero ............................... <0>
  [1755] setparam 7 ............................. tExcludeFirst = 0
  [1757] jmp [1781]
  [1760] getparam 1 ............................. <tLineOfSightTester>
  [1762] getlocal 8 ............................. <tX>
  [1764] getlocal 5 ............................. <tY>
  [1766] getparam 6 ............................. <tBlockingLevel>
  [1768] pusharglist 4 .......................... <tLineOfSightTester, tX, tY, tBlockingLevel>
  [1770] objcall 847 ............................ <tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel)>
  [1773] jmpifz [1781] .......................... if tLineOfSightTester.isBlockingLineOfSight(tX, tY, tBlockingLevel) then
  [1776] pushzero ............................... <0>
  [1777] pusharglistnoret 1 ..................... <0>
  [1779] extcall 53 ............................. return 0
  [1781] getlocal 9 ............................. <tD>
  [1783] pushzero ............................... <0>
  [1784] lt ..................................... <tD < 0>
  [1785] jmpifz [1801] .......................... if tD < 0 then
  [1788] getlocal 9 ............................. <tD>
  [1790] getlocal 1 ............................. <tDeltaY>
  [1792] pushint8 4 ............................. <4>
  [1794] mul .................................... <tDeltaY * 4>
  [1795] add .................................... <tD + (tDeltaY * 4)>
  [1796] setlocal 9 ............................. tD = tD + (tDeltaY * 4)
  [1798] jmp [1821] ............................. next repeat
  [1801] getlocal 9 ............................. <tD>
  [1803] getlocal 0 ............................. <tDeltaX>
  [1805] getlocal 1 ............................. <tDeltaY>
  [1807] sub .................................... <tDeltaX - tDeltaY>
  [1808] pushint8 4 ............................. <4>
  [1810] mul .................................... <(tDeltaX - tDeltaY) * 4>
  [1811] add .................................... <tD + ((tDeltaX - tDeltaY) * 4)>
  [1812] setlocal 9 ............................. tD = tD + ((tDeltaX - tDeltaY) * 4)
  [1814] getlocal 8 ............................. <tX>
  [1816] pushint8 1 ............................. <1>
  [1818] sub .................................... <tX - 1>
  [1819] setlocal 8 ............................. tX = tX - 1
  [1821] pushint8 -1
  [1823] getlocal 5
  [1825] add
  [1826] setlocal 5
  [1828] endrepeat [1741]
  [1830] pushint8 1 ............................. <1>
  [1832] pusharglistnoret 1 ..................... <1>
  [1834] extcall 53 ............................. return 1
  [1836] ret
end
